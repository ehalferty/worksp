//------------------------------------------------------------------------------
//
// Copyright (C) 2006, Xilinx, Inc. All Rights Reserved.
//
// This file is owned and controlled by Xilinx and must be used solely
// for design, simulation, implementation and creation of design files
// limited to Xilinx devices or technologies. Use with non-Xilinx
// devices or technologies is expressly prohibited and immediately
// terminates your license.
//
// Xilinx products are not intended for use in life support
// appliances, devices, or systems. Use in such applications is
// expressly prohibited.
//
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 1.3
//  \   \         Application : Generated by Xilinx PCI Express Wizard
//  /   /         Filename    : pcie_top.v
// /___/   /\     Module      : pcie_top_wrapper
// \   \  /  \
//  \___\/\___\
//
//------------------------------------------------------------------------------
`timescale 1 ns / 1 ps

`define MINF(A,B) (A)>(B)?(B):(A)
`define MAXF(A,B) (A)>(B)?(A):(B) 

module   pcie_top_wrapper #
(
    parameter   G_SIM = 0,
    parameter   G_USER_RESETS = 0,
    parameter   G_USE_DCM = 0,
    
    // integer: 0 for no BAR logic , 1 for BAR decoding logic to be included
    //-------------------------------------------------------
    parameter  BARMONITORENABLE  = 0,

    // integer: 100 for 100MHz Refclk, 125 for 125MHz Refclk,250 for 250MHz Refclk,
    // ------------------------------------------------------
    parameter  REFCLKFREQ = 100,

    // integer: 0 for PCI Express Endpoint, 1 for Legacy PCI Express Endpoint
    // ------------------------------------------------------
    parameter  COMPONENTTYPE = 0,

    // integer: 1 for x1 lane, 2 for x2 lanes, 4 for x4 lanes, 8 for x8 lanes
    // ------------------------------------------------------
    parameter  NO_OF_LANES = 8,

    // integer: 1 for 1/1 ratio, 2 for 1/2 ratio, 4 for 1/4 ratio
    // ------------------------------------------------------
    parameter  CLKRATIO = 2, // 1: USERCLK = 250 MHz; 2: USERCLK = 125 MHz; 4: USERCLK = 62.5 MHz

    // (CLKRATIO > 1) ? "TRUE" : "FALSE";
    // ------------------------------------------------------
    parameter         CLKDIVIDED = "TRUE",

    // 16 bit : 10EE for xilinx
    // ------------------------------------------------------
    parameter [15:0]  VENDORID = 16'h10EE,

    // 16 bit :
    // ------------------------------------------------------
    parameter [15:0]  DEVICEID = 16'h5050,

    // 8 bit :
    // ------------------------------------------------------
    parameter [7:0]   REVISIONID = 8'h00,

    // 16 bit :
    // ------------------------------------------------------
    parameter [15:0]  SUBSYSTEMVENDORID = 16'h10EE,

    // 16 bit :
    // ------------------------------------------------------
    parameter [15:0]  SUBSYSTEMID = 16'h5050,

    // 24 bit :
    // ------------------------------------------------------
    parameter [23:0]  CLASSCODE = 24'h058000,

    // 32 bit :
    // ------------------------------------------------------
    parameter [31:0]  CARDBUSCISPOINTER = 32'h00000000,

    // 8 bit : 0 for NONE, 1 for INTA, 2 for INTB, 3 for INTC, 4 for INTD
    // ------------------------------------------------------
    parameter [7:0]   INTERRUPTPIN = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR0EXIST = "TRUE",

    // integer: 0 for MEMORY, 1 for I/O
    // ------------------------------------------------------
    parameter  BAR0IOMEMN = 0,

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  BAR064 = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR0PREFETCHABLE = "FALSE",

    // integer:
    // ------------------------------------------------------
    parameter [5:0]   BAR0MASKWIDTH = 20,

    // true or false
    // ------------------------------------------------------
    parameter         BAR1EXIST = "FALSE",

    // integer: 0 for MEMORY, 1 for I/O
    // ------------------------------------------------------
    parameter  BAR1IOMEMN = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR1PREFETCHABLE = "FALSE",

    // 6 bit:
    // ------------------------------------------------------
    parameter [5:0]   BAR1MASKWIDTH = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR2EXIST = "FALSE",

    // integer: 0 for MEMORY, 1 for I/O
    // ------------------------------------------------------
    parameter  BAR2IOMEMN = 0,

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  BAR264 = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR2PREFETCHABLE = "FALSE",

    // 6 bit:
    // ------------------------------------------------------
    parameter [5:0]   BAR2MASKWIDTH = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR3EXIST = "FALSE",

    // integer: 0 for MEMORY, 1 for I/O
    // ------------------------------------------------------
    parameter  BAR3IOMEMN = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR3PREFETCHABLE = "FALSE",

    // 6 bit:
    // ------------------------------------------------------
    parameter [5:0]   BAR3MASKWIDTH = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR4EXIST = "FALSE",

    // integer: 0 for MEMORY, 1 for I/O
    // ------------------------------------------------------
    parameter  BAR4IOMEMN = 0,

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  BAR464 = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR4PREFETCHABLE = "FALSE",

    // 6 bit:
    // ------------------------------------------------------
    parameter [5:0]   BAR4MASKWIDTH = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR5EXIST = "FALSE",

    // integer: 0 for MEMORY, 1 for I/O
    // ------------------------------------------------------
    parameter  BAR5IOMEMN = 0,

    // true or false
    // ------------------------------------------------------
    parameter         BAR5PREFETCHABLE = "FALSE",

    // 6 bit:
    // ------------------------------------------------------
    parameter [5:0]   BAR5MASKWIDTH = 0,

    // integer: 0:128, 1:256, 2:512, 3:1024, 4:2048, 5:4096
    // ------------------------------------------------------
    parameter  MAXPAYLOADSIZE = 0,

    // 3 bit : 0 for max of 64ns, 1 for max of 128ns, 2 for max of 256ns, 3 for max of 512ns,
    //          4 for max of 1us, 5 for max of 2us, 6 for max of 4us, 7 for no limit
    // ------------------------------------------------------
    parameter [2:0]   DEVICECAPABILITYENDPOINTL0SLATENCY = 0,

    // 3 bit: 0 for max of 1us, 1 for max of 2us, 2 for max of 4us, 3 for max of 8us,
    //          4 for max of 16us, 5 for max of 32us, 6 for max of 64us, 7 for no limit
    // ------------------------------------------------------
    parameter [2:0]   DEVICECAPABILITYENDPOINTL1LATENCY = 0,

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  LINKCAPABILITYASPMSUPPORTEN = 0,

    // integer: 0 for less than 64ns, 1 for 64ns to 128ns, 2 for 128ns to 256ns, 3 for 256ns to 512ns,
    //          4 for 512ns to 1us, 5 for 1us to 2us, 6 for 2us to 4us, 7 for more than 4us
    // ------------------------------------------------------
    parameter  L0SEXITLATENCY = 7,

    // integer: 0 for less than 64ns, 1 for 64ns to 128ns, 2 for 128ns to 256ns, 3 for 256ns to 512ns,
    //          4 for 512ns to 1us, 5 for 1us to 2us, 6 for 2us to 4us, 7 for more than 4us
    // ------------------------------------------------------
    parameter  L0SEXITLATENCYCOMCLK = 7,

    // integer: 0 for less than 1us, 1 for 1us to 2us, 2 for 2us to 4us, 3 for 4us to 8us,
    //          4 for 8us to 16us, 5 for 16us to 32us, 6 for 32us to 64us, 7 for more than 64us
    // ------------------------------------------------------
    parameter  L1EXITLATENCY = 7,

    // integer: 0 for less than 1us, 1 for 1us to 2us, 2 for 2us to 4us, 3 for 4us to 8us,
    //          4 for 8us to 16us, 5 for 16us to 32us, 6 for 32us to 64us, 7 for more than 64us
    // ------------------------------------------------------
    parameter  L1EXITLATENCYCOMCLK = 7,

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  MSIENABLE = 0, 

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  DSNENABLE = 0, 

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter  VCENABLE = 0,

    // 3 bit : 0 for 1 message, 1 for 2 messages, 2 for 4 messages
    // ------------------------------------------------------
    parameter [2:0]   MSICAPABILITYMULTIMSGCAP = 0,

    // true or false 
    // ------------------------------------------------------
    parameter         PMCAPABILITYDSI = "TRUE",

    // 2 bit: 0, 1, 2
    // ------------------------------------------------------
    parameter  [2:0]  PORTVCCAPABILITYEXTENDEDVCCOUNT = 0,

    // 8 bit: 0 for none, 1 for round robin, 2 for weighted round robin
    // ------------------------------------------------------
     parameter [7:0]  PORTVCCAPABILITYVCARBCAP = 0,

    // integer: 0, 1
    // ------------------------------------------------------
    parameter         LOWPRIORITYVCCOUNT = 0,

    // 64 bit hex:
    // ------------------------------------------------------
    parameter [63:0]  DEVICESERIALNUMBER = 64'hE000000001000A35,

    // integer: 0 for false, 1 for true
    // ------------------------------------------------------
    parameter [0:0]   FORCENOSCRAMBLING = 1'b0,

    // true or false
    // ------------------------------------------------------
    parameter         LINKSTATUSSLOTCLOCKCONFIG = "FALSE",

    // integer: 0..255
    // ------------------------------------------------------
    parameter  TXTSNFTS = 255,

    // integer: 0..255
    // ------------------------------------------------------
    parameter  TXTSNFTSCOMCLK = 255,

    // true or false
    // ------------------------------------------------------
    parameter         RESETMODE = "FALSE",

    // integer: 4096, 8192, 16384, 32768
    // GUI encoding: 4096bytes: 9, 8192: 10, 16384: 11, 32768: 12
    // ------------------------------------------------------
    parameter  RETRYRAMSIZE = 9,

    // integer:
    // ------------------------------------------------------
    parameter  VC0RXFIFOSIZEP = 1024,

    // integer:
    // ------------------------------------------------------
    parameter  VC0RXFIFOSIZENP = 192,

    // integer:
    // ------------------------------------------------------
    parameter  VC0RXFIFOSIZEC = 1024,

    // integer:
    // ------------------------------------------------------
    parameter  VC1RXFIFOSIZEP = 0,

    // integer:
    // ------------------------------------------------------
    parameter  VC1RXFIFOSIZENP = 0,

    // integer:
    // ------------------------------------------------------
    parameter  VC1RXFIFOSIZEC = 0,

    // integer:
    // ------------------------------------------------------
    parameter  VC0TXFIFOSIZEP = 1024,

    // integer:
    // ------------------------------------------------------
    parameter  VC0TXFIFOSIZENP = 192,

    // integer:
    // ------------------------------------------------------
    parameter  VC0TXFIFOSIZEC = 1024,

    // integer:
    // ------------------------------------------------------
    parameter  VC1TXFIFOSIZEP = 0,

    // integer:
    // ------------------------------------------------------
    parameter  VC1TXFIFOSIZENP = 0,

    // integer:
    // ------------------------------------------------------
    parameter  VC1TXFIFOSIZEC = 0
   
)

(

   input   wire                user_reset_n,
          
   output  wire                core_clk,                  
   output  wire                user_clk,  
   output  wire                clock_lock,
   
   input   wire                gsr,
  
   input   wire                crm_urst_n,                      
   input   wire                crm_nvrst_n,                     
   input   wire                crm_mgmt_rst_n,                  
   input   wire                crm_user_cfg_rst_n,  
   input   wire                crm_mac_rst_n,                                
   input   wire                crm_link_rst_n, 

   input   wire                compliance_avoid,
   input   wire                l0_cfg_loopback_master, 
   input   wire                l0_transactions_pending, 


   input   wire                l0_set_completer_abort_error,                   
   input   wire                l0_set_detected_corr_error,                     
   input   wire                l0_set_detected_fatal_error,                    
   input   wire                l0_set_detected_nonfatal_error,                 
   input   wire                l0_set_user_detected_parity_error,              
   input   wire                l0_set_user_master_data_parity,                 
   input   wire                l0_set_user_received_master_abort,              
   input   wire                l0_set_user_received_target_abort,              
   input   wire                l0_set_user_system_error,                       
   input   wire                l0_set_user_signalled_target_abort,             
   input   wire                l0_set_completion_timeout_uncorr_error,         
   input   wire                l0_set_completion_timeout_corr_error,           
   input   wire                l0_set_unexpected_completion_uncorr_error,      
   input   wire                l0_set_unexpected_completion_corr_error,        
   input   wire                l0_set_unsupported_request_nonposted_error,     
   input   wire                l0_set_unsupported_request_other_error,         
   input   wire                l0_legacy_int_funct0,                           

   input   wire   [31:0]       mgmt_wdata,                                     
   input   wire   [3:0]        mgmt_bwren,                                     
   input   wire                mgmt_wren,                                      
   input   wire   [10:0]       mgmt_addr,                                      
   input   wire                mgmt_rden,                                      
   input   wire   [6:0]        mgmt_stats_credit_sel,                          

   output                     crm_do_hot_reset_n,                           
   output                     crm_pwr_soft_reset_n,                         

   output        [31:0]       mgmt_rdata,
   output                     mgmt_rddone,
   output                     mgmt_wrdone,
  
   output        [16:0]       mgmt_pso,                                     
   output        [11:0]       mgmt_stats_credit,                            
   output                     l0_first_cfg_write_occurred,                  
   output                     l0_cfg_loopback_ack,                          
   output        [1:0]        l0_rx_mac_link_error,                         
   output                     l0_mac_link_up,                               
   output        [3:0]        l0_mac_negotiated_link_width,                 
   output                     l0_mac_link_training,                         
   output        [3:0]        l0_ltssm_state,                               
   
   output                     l0_mac_new_state_ack,
   output                     l0_mac_rx_l0s_state,
   output                     l0_mac_entered_l0,

   output        [7:0]        l0_dl_up_down,                                
   output        [6:0]        l0_dll_error_vector,                          
   
   output        [12:0]       l0_completer_id,                              
   
   output                     l0_msi_enable0,                               
   output        [2:0]        l0_multi_msg_en0,                             
   output                     l0_stats_dllp_received,                       
   output                     l0_stats_dllp_transmitted,                    
   output                     l0_stats_os_received,                         
   output                     l0_stats_os_transmitted,                      
   output                     l0_stats_tlp_received,                        
   output                     l0_stats_tlp_transmitted,                    
   output                     l0_stats_cfg_received,                        
   output                     l0_stats_cfg_transmitted,                     
   output                     l0_stats_cfg_other_received,                  
   output                     l0_stats_cfg_other_transmitted, 
   
   output        [1:0]        l0_pwr_state0,                                
   output                     l0_pwr_l23_ready_state,                       
   output                     l0_pwr_tx_l0s_state,                          
   output                     l0_pwr_turn_off_req,                          
   
   
   output                     io_space_enable,                              
   output                     mem_space_enable,                             
   output                     bus_master_enable,                            
   output                     parity_error_response,                        
   output                     serr_enable,                                  
   output                     interrupt_disable,                            
   output                     ur_reporting_enable,                          

   //Local Link Interface ports 
   // TX ports
   input    wire   [63:0]     llk_tx_data,                     
   input    wire              llk_tx_src_rdy_n,                
   input    wire              llk_tx_sof_n,                    
   input    wire              llk_tx_eof_n,                    
   input    wire              llk_tx_sop_n,                    
   input    wire              llk_tx_eop_n,                    
   input    wire   [1:0]      llk_tx_enable_n,                 
   input    wire   [2:0]      llk_tx_ch_tc,                    
   input    wire   [1:0]      llk_tx_ch_fifo,                  
   output                     llk_tx_dst_rdy_n,
   output          [9:0]      llk_tx_chan_space,
   output          [7:0]      llk_tx_ch_posted_ready_n,
   output          [7:0]      llk_tx_ch_non_posted_ready_n,
   output          [7:0]      llk_tx_ch_completion_ready_n,
 
 // RX Ports
   input    wire              llk_rx_dst_req_n,                
   input    wire              llk_rx_dst_cont_req_n,                
   input    wire   [2:0]      llk_rx_ch_tc,                    
   input    wire   [1:0]      llk_rx_ch_fifo,                  
   output          [7:0]      llk_tc_status,
   output          [63:0]     llk_rx_data,
   output                     llk_rx_src_rdy_n,
   output                     llk_rx_src_last_req_n,
   output                     llk_rx_sof_n,
   output                     llk_rx_eof_n,
   output                     llk_rx_sop_n,
   output                     llk_rx_eop_n,
   output         [1:0]       llk_rx_valid_n,
   output         [15:0]      llk_rx_preferred_type,
   output         [7:0]       llk_rx_ch_posted_available_n,
   output         [7:0]       llk_rx_ch_non_posted_available_n,
   output         [7:0]       llk_rx_ch_completion_available_n,

   input    wire  [NO_OF_LANES - 1: 0] RXN,
   input    wire  [NO_OF_LANES - 1: 0] RXP,
   output   wire  [NO_OF_LANES - 1: 0] TXN,
   output   wire  [NO_OF_LANES - 1: 0] TXP,
   output   wire              gtpclk_bufg,
   output   wire              refclkout_bufg,
   output   wire  [3: 0]      plllkdet_out,
   output   wire  [7: 0]      resetdone,
   output   wire  [106:0]     debug,
   input    wire              gtpreset,
   input    wire              refclk,

   input    wire   [7:0]      gt_rx_present,
   
   output   wire    [6:0]     bar_hit, 

   output   wire   [2:0]      max_payload_size,
   output   wire   [2:0]      max_read_request_size
   
  );


//////////////////////////////////
 
// PARAMETER DECLARATIONS WHICH MATCH GUI SOFTWARE ATTRIBUTES
// COREGEN WILL INSTANTIATE THE TOP LEVEL MODULE AND MAP THE PARAMETERS
// BASED ON GUI ENTRIES
//
// generic parameter definitions
    parameter [3:0]   XPDEVICEPORTTYPE = (COMPONENTTYPE==0)? 4'b0000:4'b0001; 
   
   // NO_OF_LANES is defined at the module port list level as it is used to decide
   // the width of the cumulative serial rx and tx ports
    parameter [7:0]   ACTIVELANESIN = 2**(NO_OF_LANES) - 1;

   // override settings if IO, else pass through after converting boolean to binary
    localparam integer BAR0ADDRWIDTH_CALC    = (BAR0IOMEMN == 0) ? BAR064 :0;
    localparam         BAR0PREFETCHABLE_CALC = (BAR0IOMEMN == 0) ? BAR0PREFETCHABLE :"FALSE";

   // override settings if IO, else pass through after converting boolean to binary
   // Note that BAR1 cannot have 64 bit checked. BAR364 will always be FALSE
    localparam integer BAR1ADDRWIDTH_CALC    = 0;
    localparam         BAR1PREFETCHABLE_CALC = (BAR1IOMEMN == 0) ? BAR1PREFETCHABLE:"FALSE";

    localparam integer BAR2ADDRWIDTH_CALC    = (BAR2IOMEMN == 0) ? BAR264:0;
    localparam         BAR2PREFETCHABLE_CALC = (BAR2IOMEMN == 0) ? BAR2PREFETCHABLE:"FALSE";

   // override settings if IO, else pass through after converting boolean to binary
   // Note that BAR3 cannot have 64 bit checked. BAR364 will always be FALSE
    localparam integer BAR3ADDRWIDTH_CALC    = 0;
    localparam         BAR3PREFETCHABLE_CALC = (BAR3IOMEMN == 0) ? BAR3PREFETCHABLE:"FALSE";

    localparam integer BAR4ADDRWIDTH_CALC    = (BAR4IOMEMN == 0) ? BAR464:0;
    localparam         BAR4PREFETCHABLE_CALC = (BAR4IOMEMN == 0) ? BAR4PREFETCHABLE :"FALSE";

   // override settings if IO, else pass through after converting boolean to binary
   // Note that BAR5 cannot have 64 bit checked. BAR564 will always be FALSE
    localparam         BAR5PREFETCHABLE_CALC = (BAR5IOMEMN == 0) ? BAR5PREFETCHABLE :"FALSE";


// DEVICE CAPABILITY REGISTER VALUES // GUI Note
// NOTE THAT THIS IS BROKEN DOWN INTO INDIVIDUAL ATTRIBUTES // GUI Note
    localparam integer XPMAXPAYLOAD    = MAXPAYLOADSIZE;//encoded value is passed by GUI
    localparam integer MAXPAYLOADBYTES = 2**(MAXPAYLOADSIZE+7);//encoded value is passed by GUI

// LINK CAPABILITY REGISTER VALUES // GUI Note
// NOTE THAT THIS IS BROKEN DOWN INTO INDIVIDUAL ATTRIBUTES // GUI Note
// NOTE_X: Maximum link speed has no corresponding attribute // GUI Note
    parameter [5:0]  LINKCAPABILITYMAXLINKWIDTH     = NO_OF_LANES;
    localparam [1:0] LINKCAPABILITYASPMSUPPORT_CALC =  LINKCAPABILITYASPMSUPPORTEN ? 2'b11:2'b01; 


// EXTENDED CAPABILITIES REGISTERS // GUI Note
// REPRESENTED AS A LINK LIST // GUI Note
    parameter integer  PMENABLE  = 1; //GUI parameter: Power management capability checked = 1, unchecked = 0
    parameter integer  XPENABLE  = 1; // GUI parameter : PCI Express checked = 1, unchecked = 0 
    localparam [11:0]  PMBASEPTR = 64;// 40h
    localparam [11:0]  MSIBASEPTR = 72;//48h
    localparam [7:0]   XPBASEPTR  = 96;//60h

    parameter [7:0] CAPABILITIESPTR_CALC       = (PMENABLE==1) ? 64 : (MSIENABLE==1) ? 72: (XPENABLE==1) ? 96:0;
    parameter [7:0] PMCAPABILITYNEXTPTR_CALC   = (PMENABLE==1)? (MSIENABLE==1)?72:(XPENABLE==1)?96:0  : 72;
    parameter [7:0] MSICAPABILITYNEXTPTR_CALC  = (MSIENABLE==1)?(XPENABLE==1)?96:0 :96; 
    parameter [7:0] PCIECAPABILITYNEXTPTR_CALC = 0;

   // SECOND LINK LIST // GUI Note
   // Only 4 possibilities can alter the base pointer values // GUI Note 
    parameter integer   AERENABLE = 0; // GUI parameter : Advanced Error Reporting checked = 1, unchecked = 0
    parameter integer   PBENABLE  = 0; // GUI parameter : Power Budgeting checked = 1, unchecked = 0

    parameter [11:0] AERBASEPTR = AERENABLE ? 256 : //100h
                                  PBENABLE  ? 272 : //110h
                                  DSNENABLE ? 268 : //10Ch
                                  VCENABLE  ? 300 : 272; //12Ch : 110h
    parameter [11:0] PBBASEPTR =  AERENABLE ? 312 : //138h
                                  PBENABLE  ? 256 : //100h
                                  DSNENABLE ? 324 : //144h
                                  VCENABLE  ? 356 : 312;//164h : 138h
    parameter [11:0] DSNBASEPTR = AERENABLE ? 328 : //148h
                                  PBENABLE  ? 328 : //148h
                                  DSNENABLE ? 256 : // 100h
                                  VCENABLE  ? 372 : 328; //174h : 148h
    parameter [11:0] VCBASEPTR  = AERENABLE ? 340 : //154h
                                  PBENABLE  ? 340 : // 154h
                                  DSNENABLE ? 340 : //154h
                                  VCENABLE  ? 256 : 340; //100h : 154h

    parameter [11:0]  AERCAPABILITYNEXTPTR = AERENABLE ? PBENABLE ? PBBASEPTR:(DSNENABLE ? DSNBASEPTR : VCENABLE ? VCBASEPTR : 0):PBBASEPTR; 
    parameter [11:0]  PBCAPABILITYNEXTPTR  = PBENABLE ? (DSNENABLE ? DSNBASEPTR : VCENABLE ? VCBASEPTR : 0 ):DSNBASEPTR ;
    parameter [11:0]  DSNCAPABILITYNEXTPTR = DSNENABLE ? (VCENABLE ? VCBASEPTR : 0):VCBASEPTR;
    parameter [11:0]  VCCAPABILITYNEXTPTR  = 0;

   // POWER Management extended capabilities register components // GUI Note
    parameter [2:0]  PMCAPABILITYAUXCURRENT = 3'b000; // GUI parameter: integer 
    parameter        PMCAPABILITYD1SUPPORT  = "FALSE"; // GUI parameter: checked = 1, unchecked = 0 
    parameter        PMCAPABILITYD2SUPPORT  = "FALSE"; // GUI parameter: checked = 1, unchecked = 0
    parameter [4:0]  PMCAPABILITYPMESUPPORT = 5'b00000; // GUI parameter: 5 bit binary value based on checked boxes 
    parameter [7:0]  PMDATA0 = 8'h00;
    parameter [7:0]  PMDATA1 = 8'h00;
    parameter [7:0]  PMDATA2 = 8'h00;
    parameter [7:0]  PMDATA3 = 8'h00;
    parameter [7:0]  PMDATA4 = 8'h00;
    parameter [7:0]  PMDATA5 = 8'h00;
    parameter [7:0]  PMDATA6 = 8'h00;
    parameter [7:0]  PMDATA7 = 8'h00;
    
    parameter integer  PMDATASCALE0 = 0;
    parameter integer  PMDATASCALE1 = 0;
    parameter integer  PMDATASCALE2 = 0;
    parameter integer  PMDATASCALE3 = 0;
    parameter integer  PMDATASCALE4 = 0;
    parameter integer  PMDATASCALE5 = 0;
    parameter integer  PMDATASCALE6 = 0;
    parameter integer  PMDATASCALE7 = 0;

    //AER Register Components // GUI Note
    // VC Register Components // GUI Note
    localparam [7:0]  PORTVCCAPABILITYVCARBTABLEOFFSET_CALC = (LOWPRIORITYVCCOUNT==1) ? 8: 0 ; 

    // Power capabilities
    parameter [7:0]  PBCAPABILITYDW0BASEPOWER  = 0;  
    parameter [1:0]  PBCAPABILITYDW0DATASCALE  = 0;
    parameter [2:0]  PBCAPABILITYDW0PMSUBSTATE = 0;
    parameter [1:0]  PBCAPABILITYDW0PMSTATE    = 0;
    parameter [2:0]  PBCAPABILITYDW0TYPE       = 0;
    parameter [2:0]  PBCAPABILITYDW0POWERRAIL  = 0; 
    parameter [7:0]  PBCAPABILITYDW1BASEPOWER  = 0; 
    parameter [1:0]  PBCAPABILITYDW1DATASCALE  = 0; 
    parameter [2:0]  PBCAPABILITYDW1PMSUBSTATE = 0; 
    parameter [1:0]  PBCAPABILITYDW1PMSTATE    = 0; 
    parameter [2:0]  PBCAPABILITYDW1TYPE       = 0; 
    parameter [2:0]  PBCAPABILITYDW1POWERRAIL  = 0; 
    parameter [7:0]  PBCAPABILITYDW2BASEPOWER  = 0; 
    parameter [1:0]  PBCAPABILITYDW2DATASCALE  = 0; 
    parameter [2:0]  PBCAPABILITYDW2PMSUBSTATE = 0; 
    parameter [1:0]  PBCAPABILITYDW2PMSTATE    = 0; 
    parameter [2:0]  PBCAPABILITYDW2TYPE       = 0; 
    parameter [2:0]  PBCAPABILITYDW2POWERRAIL  = 0; 
    parameter [7:0]  PBCAPABILITYDW3BASEPOWER  = 0; 
    parameter [1:0]  PBCAPABILITYDW3DATASCALE  = 0; 
    parameter [2:0]  PBCAPABILITYDW3PMSUBSTATE = 0; 
    parameter [1:0]  PBCAPABILITYDW3PMSTATE    = 0; 
    parameter [2:0]  PBCAPABILITYDW3TYPE       = 0; 
    parameter [2:0]  PBCAPABILITYDW3POWERRAIL  = 0; 
    parameter        PBCAPABILITYSYSTEMALLOCATED = "FALSE";

   parameter  [0:0]  AUXPOWER       = 1'b0;

  //SCREEN 5 : BUFFERING
  //calculate rety ram size based on payload size
    localparam [11:0] RETRYRAMSIZE_CALC = (MAXPAYLOADBYTES == 2048) ? `MAXF(10,RETRYRAMSIZE) :
                                          (MAXPAYLOADBYTES == 4096) ? `MAXF(11,RETRYRAMSIZE) :
                                           RETRYRAMSIZE;
  
    parameter integer  RETRYRAMREADLATENCY  = 3;//GUI parameter 
    parameter integer  RETRYRAMWRITELATENCY = 1;//GUI parameter
  
    // calculate minimum values of RX Posted FIFO Sizes 
    localparam integer VC0RXFIFOSIZEP_MIN = 192 + MAXPAYLOADBYTES;
    localparam integer VC0RXFIFOSIZEP_MAX = `MINF(192 + (8*MAXPAYLOADBYTES), 32768);
    localparam integer VC1RXFIFOSIZEP_MIN = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                            0 : 192 + MAXPAYLOADBYTES;
    localparam integer VC1RXFIFOSIZEP_MAX = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                            0 : `MINF(192 + (8*MAXPAYLOADBYTES), 32768);

     localparam integer  VC0RXFIFOSIZENP_CALC = 192;
     localparam integer  VC1RXFIFOSIZENP_CALC = (PORTVCCAPABILITYEXTENDEDVCCOUNT==0) ?
                                                0 : 192;

    // calculate minimum/max values of RX Posted Completion FIFO Sizes 
    localparam integer VC0RXFIFOSIZEC_MIN = 216 + MAXPAYLOADBYTES;
    // RX Completion FIFO requires storage of 9 headers + 9 packets to work reliably when
    // INFINITECOMPLETIONS is set to TRUE. This will not be 
    // possible when MAXPAYLOAD = 4096 due to upper limit on buffer size = 32768. In this particular
    // case INFINITECOMPLETIONS should be set to FALSE to enable
    localparam integer VC0RXFIFOSIZEC_MAX = (MAXPAYLOADBYTES == 4096)?`MINF(192 + (8*MAXPAYLOADBYTES), 32768) 
                                                                     :`MINF(216 + (9*MAXPAYLOADBYTES), 32768);
    
    localparam integer VC1RXFIFOSIZEC_MIN = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                             0 : 216 + MAXPAYLOADBYTES;
    
    localparam integer VC1RXFIFOSIZEC_MAX = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                             0 : ((MAXPAYLOADBYTES == 4096)?`MINF(192 + (8*MAXPAYLOADBYTES), 32768) 
                                                                           :`MINF(216 + (9*MAXPAYLOADBYTES), 32768));

    // calculate minimum/max values of TX Posted FIFO Sizes 
    localparam integer VC0TXFIFOSIZEP_MIN = 192 + MAXPAYLOADBYTES;
    localparam integer VC0TXFIFOSIZEP_MAX = `MINF(192 + (8*MAXPAYLOADBYTES), 32768);
    localparam integer VC1TXFIFOSIZEP_MIN = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                             0 : 192 + MAXPAYLOADBYTES;
    localparam integer VC1TXFIFOSIZEP_MAX = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                             0 : `MINF(192 + (8*MAXPAYLOADBYTES), 32768);

     localparam integer VC0TXFIFOSIZENP_CALC = 192;
     localparam integer VC1TXFIFOSIZENP_CALC = (PORTVCCAPABILITYEXTENDEDVCCOUNT==0) ?
                                                0 : 192;

    localparam integer VC0TXFIFOSIZEC_MIN = 128 + MAXPAYLOADBYTES;
    localparam integer VC0TXFIFOSIZEC_MAX = `MINF(128 + (8*MAXPAYLOADBYTES), 32768);
    localparam integer VC1TXFIFOSIZEC_MIN = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                             0 : 128 + MAXPAYLOADBYTES;
    localparam integer VC1TXFIFOSIZEC_MAX = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                             0 : `MINF(128 + (8*MAXPAYLOADBYTES), 32768);

   // calculate base and limit values for the FIFOs
   // The calculated min,max values for fifos based on XPMAXPAYLOAD will override // GUI NOTE
   // user entries in case the value goes out of band  // GUI NOTE
   // algorithm: final size = min(max(lowerlimit,userinput),upperlimit)          // GUI NOTE
   // For the RX completion FIFO if maxpayloadbytes is 4096 then the above algorithm is used 
   // else the upper limit is assigned to the RX completion FIFO size
      
      localparam  integer VC0RXFIFOSIZEP_CALC_int = `MAXF(VC0RXFIFOSIZEP_MIN,VC0RXFIFOSIZEP);
      localparam  integer VC0RXFIFOSIZEC_CALC_int = `MAXF(VC0RXFIFOSIZEC_MIN,VC0RXFIFOSIZEC);
      localparam  integer VC0TXFIFOSIZEP_CALC_int = `MAXF(VC0TXFIFOSIZEP_MIN,VC0TXFIFOSIZEP);
      localparam  integer VC0TXFIFOSIZEC_CALC_int = `MAXF(VC0TXFIFOSIZEC_MIN,VC0TXFIFOSIZEC);

      localparam  integer VC1RXFIFOSIZEP_CALC_int = `MAXF(VC1RXFIFOSIZEP_MIN,VC1RXFIFOSIZEP);
      localparam  integer VC1RXFIFOSIZEC_CALC_int = `MAXF(VC1RXFIFOSIZEC_MIN,VC1RXFIFOSIZEC);
      localparam  integer VC1TXFIFOSIZEP_CALC_int = `MAXF(VC1TXFIFOSIZEP_MIN,VC1TXFIFOSIZEP);
      localparam  integer VC1TXFIFOSIZEC_CALC_int = `MAXF(VC1TXFIFOSIZEC_MIN,VC1TXFIFOSIZEC);
   
      localparam  integer VC0RXFIFOSIZEP_CALC = `MINF(VC0RXFIFOSIZEP_CALC_int,VC0RXFIFOSIZEP_MAX);
      localparam  integer VC0RXFIFOSIZEC_CALC =  (MAXPAYLOADBYTES == 4096)?`MINF(VC0RXFIFOSIZEC_CALC_int,VC0RXFIFOSIZEC_MAX) 
                                                                          : VC0RXFIFOSIZEC_MAX;
      localparam  integer VC0TXFIFOSIZEP_CALC = `MINF(VC0TXFIFOSIZEP_CALC_int,VC0TXFIFOSIZEP_MAX);
      localparam  integer VC0TXFIFOSIZEC_CALC = `MINF(VC0TXFIFOSIZEC_CALC_int,VC0TXFIFOSIZEC_MAX);

      localparam  integer VC1RXFIFOSIZEP_CALC = `MINF(VC1RXFIFOSIZEP_CALC_int,VC1RXFIFOSIZEP_MAX);
      localparam  integer VC1RXFIFOSIZEC_CALC =  (MAXPAYLOADBYTES == 4096)?`MINF(VC1RXFIFOSIZEC_CALC_int,VC1RXFIFOSIZEC_MAX) 
                                                                          : VC1RXFIFOSIZEC_MAX;
      localparam  integer VC1TXFIFOSIZEP_CALC = `MINF(VC1TXFIFOSIZEP_CALC_int,VC1TXFIFOSIZEP_MAX);
      localparam  integer VC1TXFIFOSIZEC_CALC = `MINF(VC1TXFIFOSIZEC_CALC_int,VC1TXFIFOSIZEC_MAX);
   
   // calculate base pointers and limits for FIFOs
      localparam [12:0]  VC0RXFIFOBASEP_CALC  = 0;
      localparam [12:0]  VC0RXFIFOLIMITP_CALC = VC0RXFIFOBASEP_CALC + VC0RXFIFOSIZEP_CALC/8 - 1;
      localparam [12:0]  VC0RXFIFOBASENP_CALC = VC0RXFIFOLIMITP_CALC + 1;
      localparam [12:0]  VC0RXFIFOLIMITNP_CALC= VC0RXFIFOBASENP_CALC + VC0RXFIFOSIZENP_CALC/8 - 1;
      localparam [12:0]  VC0RXFIFOBASEC_CALC  = VC0RXFIFOLIMITNP_CALC + 1;
      localparam [12:0]  VC0RXFIFOLIMITC_CALC = VC0RXFIFOBASEC_CALC + VC0RXFIFOSIZEC_CALC/8 - 1;
      localparam [12:0]  VC1RXFIFOBASEP_CALC  = VC0RXFIFOLIMITC_CALC + 1;
      localparam [12:0]  VC1RXFIFOLIMITP_CALC = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ?
                                                  VC1RXFIFOBASEP_CALC:(VC1RXFIFOBASEP_CALC + VC1RXFIFOSIZEP_CALC/8 - 1);
      localparam [12:0]  VC1RXFIFOBASENP_CALC = VC1RXFIFOLIMITP_CALC + 1;
      localparam [12:0]  VC1RXFIFOLIMITNP_CALC= (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                                  VC1RXFIFOBASENP_CALC:(VC1RXFIFOBASENP_CALC + VC1RXFIFOSIZENP_CALC/8 - 1);
      localparam [12:0]  VC1RXFIFOBASEC_CALC  = VC1RXFIFOLIMITNP_CALC + 1;
      localparam [12:0]  VC1RXFIFOLIMITC_CALC = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                                  VC1RXFIFOBASEC_CALC : (VC1RXFIFOBASEC_CALC + VC1RXFIFOSIZEC_CALC/8 - 1);
      localparam [12:0]  VC0TXFIFOBASEP_CALC  = 0;
      localparam [12:0]  VC0TXFIFOLIMITP_CALC = VC0TXFIFOBASEP_CALC + VC0TXFIFOSIZEP_CALC/8 - 1;
      localparam [12:0]  VC0TXFIFOBASENP_CALC = VC0TXFIFOLIMITP_CALC + 1;
      localparam [12:0]  VC0TXFIFOLIMITNP_CALC= VC0TXFIFOBASENP_CALC + VC0TXFIFOSIZENP_CALC/8 - 1;
      localparam [12:0]  VC0TXFIFOBASEC_CALC  = VC0TXFIFOLIMITNP_CALC + 1;
      localparam [12:0]  VC0TXFIFOLIMITC_CALC = VC0TXFIFOBASEC_CALC + VC0TXFIFOSIZEC_CALC/8 - 1;
      localparam [12:0]  VC1TXFIFOBASEP_CALC  = VC0TXFIFOLIMITC_CALC + 1;
      localparam [12:0]  VC1TXFIFOLIMITP_CALC = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ?
                                                  VC1TXFIFOBASEP_CALC : (VC1TXFIFOBASEP_CALC + VC1TXFIFOSIZEP_CALC/8 - 1);
      localparam [12:0]  VC1TXFIFOBASENP_CALC = VC1TXFIFOLIMITP_CALC + 1;
      localparam [12:0]  VC1TXFIFOLIMITNP_CALC= (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 
                                                  VC1TXFIFOBASENP_CALC : (VC1TXFIFOBASENP_CALC + VC1TXFIFOSIZENP_CALC/8 - 1);
      localparam [12:0]  VC1TXFIFOBASEC_CALC  = VC1TXFIFOLIMITNP_CALC + 1;
      localparam [12:0]  VC1TXFIFOLIMITC_CALC = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ?  
                                                  VC1TXFIFOBASEC_CALC : (VC1TXFIFOBASEC_CALC + VC1TXFIFOSIZEC_CALC/8 - 1);
   //////////////////////////////////////////////////////
   // calculations for total BRAM size for each of the buffers TL_TX, TL_RX, DLL_RETRY
      localparam integer TL_TX_SIZE = VC0TXFIFOSIZEP_CALC + VC0TXFIFOSIZENP_CALC + VC0TXFIFOSIZEC_CALC + VC1TXFIFOSIZEP_CALC + VC1TXFIFOSIZENP_CALC + VC1TXFIFOSIZEC_CALC;
      localparam integer TL_RX_SIZE = VC0RXFIFOSIZEP_CALC + VC0RXFIFOSIZENP_CALC + VC0RXFIFOSIZEC_CALC + VC1RXFIFOSIZEP_CALC + VC1RXFIFOSIZENP_CALC + VC1RXFIFOSIZEC_CALC;

   // RAM Latencies
      parameter integer  TLRAMREADLATENCY  = 3;    //GUI parameter  
      parameter integer  TLRAMWRITELATENCY = 1;  //GUI parameter

   // FIFO CREDIT VAlUES
      localparam [6:0]  VC0TOTALCREDITSPH  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 8 : 8 ; 
      localparam [6:0]  VC0TOTALCREDITSNPH = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 8 : 8 ; 
      localparam [6:0]  VC0TOTALCREDITSCH  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : 0 ; 
      localparam [10:0] VC0TOTALCREDITSPD  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? ((VC0RXFIFOSIZEP_CALC - 192)/16) : ((VC0RXFIFOSIZEP_CALC - 192)/16); 
      localparam [10:0] VC0TOTALCREDITSCD  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : 0 ; 
      localparam [6:0]  VC1TOTALCREDITSPH  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : 8 ; 
      localparam [6:0]  VC1TOTALCREDITSNPH = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : 8 ; 
      localparam [6:0]  VC1TOTALCREDITSCH  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : 0 ; 
      localparam [10:0] VC1TOTALCREDITSPD  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : ((VC1RXFIFOSIZEP_CALC - 192)/16); 
      localparam [10:0] VC1TOTALCREDITSCD  = (PORTVCCAPABILITYEXTENDEDVCCOUNT == 0) ? 0 : 0 ; 
      
      localparam  INFINITECOMPLETIONS = (MAXPAYLOADBYTES == 4096)? "FALSE" 
                                                                 : "TRUE";


   // ADDITIONAL ATTRIBUTES
   // EITHER NOT SUPPORTED IN RELEASE  OR TEST FEATURES
      localparam  RETRYREADDATAPIPE = "FALSE";
      localparam  RXREADDATAPIPE    = "FALSE";  
      localparam  TXREADDATAPIPE    = "FALSE"; 
      
     parameter integer PLL_DIVSEL_FB  =  (REFCLKFREQ == 250) ? 1:
                                         (REFCLKFREQ == 125) ? 2:5;

     parameter integer PLL_DIVSEL_REF =  (REFCLKFREQ == 250) ? 1:
                                         (REFCLKFREQ == 125) ? 1:2;

     parameter integer CLKFBOUT_MULT  =  (REFCLKFREQ == 250) ? 2: 
                                         (REFCLKFREQ == 125) ? 4:5; 

     parameter         CLKIN_PERIOD  =   (REFCLKFREQ == 250) ? 4:
                                         (REFCLKFREQ == 125) ? 8:10; 
     
     parameter integer CLK25_DIVIDER  =  (REFCLKFREQ == 250) ? 10: 
                                         (REFCLKFREQ == 125) ? 5:4; 
      
/////////////////////////////////////////////////////
// Tie off declarations:
     localparam  TIEOFFTOHIGH1 = 1'b1;//1 bit
     localparam  TIEOFFTOLOW1  = 1'b0;//1 bit
     localparam  TIEOFFTOHIGH2 = 2'b11;//2 bit
     localparam  TIEOFFTOLOW2  = 2'b00;//2 bit
     localparam  TIEOFFTOLOW3  = 3'b000;//3 bit

//////////////////////////////////////////////

//Parameters connecting to ports 
    parameter  [0:0]       L0_TL_LINK_RETRAIN               = 1'b0;                             
    parameter  [5:0]       CFG_NEGOTIATED_LINK_WIDTH        = 6'b000000;  
    parameter  [0:0]       L0_PME_REQ_IN                    = 1'b0;             

//signals for module pcie_mim 
    wire   [63:0]      mim_rx_brdata;
    wire   [12:0]      mim_rx_bradd;
    wire               mim_rx_bren;
    wire   [63:0]      mim_rx_bwdata;
    wire   [12:0]      mim_rx_bwadd;
    wire               mim_rx_bwen;
    wire   [63:0]      mim_tx_brdata;
    wire   [12:0]      mim_tx_bradd;
    wire               mim_tx_bren;
    wire   [63:0]      mim_tx_bwdata;
    wire   [12:0]      mim_tx_bwadd;
    wire               mim_tx_bwen;
    wire   [63:0]      mim_dll_brdata;
    wire   [11:0]      mim_dll_bradd;
    wire               mim_dll_bren;
    wire   [63:0]      mim_dll_bwdata;
    wire   [11:0]      mim_dll_bwadd;
    wire               mim_dll_bwen;
    
    wire               pipe_rx_elec_idle_l0;
    wire   [2:0]       pipe_rx_status_l0;
    wire   [7:0]       pipe_rx_data_l0;
    wire               pipe_rx_phy_status_l0;
    wire               pipe_rx_data_k_l0;
    wire               pipe_rx_valid_l0;
    wire               pipe_rxchanisaligned_l0;
    
    wire   [7:0]       pipe_tx_data_l0;
    wire               pipe_tx_data_k_l0;
    wire               pipe_tx_elec_idle_l0;
    wire               pipe_tx_detect_rx_loopback_l0;
    wire               pipe_tx_compliance_l0;
    wire               pipe_rx_polarity_l0;
    wire   [1:0]       pipe_power_down_l0;
    wire               pipe_deskew_lanes_l0;
    wire               pipe_reset_l0;
    
    wire               pipe_rx_elec_idle_l1;
    wire   [2:0]       pipe_rx_status_l1;
    wire   [7:0]       pipe_rx_data_l1;
    wire               pipe_rx_phy_status_l1;
    wire               pipe_rx_data_k_l1;
    wire               pipe_rx_valid_l1;
    wire               pipe_rxchanisaligned_l1;
    
    wire   [7:0]       pipe_tx_data_l1;
    wire               pipe_tx_data_k_l1;
    wire               pipe_tx_elec_idle_l1;
    wire               pipe_tx_detect_rx_loopback_l1;
    wire               pipe_tx_compliance_l1;
    wire               pipe_rx_polarity_l1;
    wire   [1:0]       pipe_power_down_l1;
    wire               pipe_deskew_lanes_l1;
    wire               pipe_reset_l1;
    
    wire               pipe_rx_elec_idle_l2;
    wire   [2:0]       pipe_rx_status_l2;
    wire   [7:0]       pipe_rx_data_l2;
    wire               pipe_rx_phy_status_l2;
    wire               pipe_rx_data_k_l2;
    wire               pipe_rx_valid_l2;
    wire               pipe_rxchanisaligned_l2;
    
    wire   [7:0]       pipe_tx_data_l2;
    wire               pipe_tx_data_k_l2;
    wire               pipe_tx_elec_idle_l2;
    wire               pipe_tx_detect_rx_loopback_l2;
    wire               pipe_tx_compliance_l2;
    wire               pipe_rx_polarity_l2;
    wire   [1:0]       pipe_power_down_l2;
    wire               pipe_deskew_lanes_l2;
    wire               pipe_reset_l2;
    
    wire               pipe_rx_elec_idle_l3;
    wire   [2:0]       pipe_rx_status_l3;
    wire   [7:0]       pipe_rx_data_l3;
    wire               pipe_rx_phy_status_l3;
    wire               pipe_rx_data_k_l3;
    wire               pipe_rx_valid_l3;
    wire               pipe_rxchanisaligned_l3;
    
    wire   [7:0]       pipe_tx_data_l3;
    wire               pipe_tx_data_k_l3;
    wire               pipe_tx_elec_idle_l3;
    wire               pipe_tx_detect_rx_loopback_l3;
    wire               pipe_tx_compliance_l3;
    wire               pipe_rx_polarity_l3;
    wire   [1:0]       pipe_power_down_l3;
    wire               pipe_deskew_lanes_l3;
    wire               pipe_reset_l3;
    
    wire               pipe_rx_elec_idle_l4;
    wire   [2:0]       pipe_rx_status_l4;
    wire   [7:0]       pipe_rx_data_l4;
    wire               pipe_rx_phy_status_l4;
    wire               pipe_rx_data_k_l4;
    wire               pipe_rx_valid_l4;
    wire               pipe_rxchanisaligned_l4;
    
    wire   [7:0]       pipe_tx_data_l4;
    wire               pipe_tx_data_k_l4;
    wire               pipe_tx_elec_idle_l4;
    wire               pipe_tx_detect_rx_loopback_l4;
    wire               pipe_tx_compliance_l4;
    wire               pipe_rx_polarity_l4;
    wire   [1:0]       pipe_power_down_l4;
    wire               pipe_deskew_lanes_l4;
    wire               pipe_reset_l4;
    
    wire               pipe_rx_elec_idle_l5;
    wire   [2:0]       pipe_rx_status_l5;
    wire   [7:0]       pipe_rx_data_l5;
    wire               pipe_rx_phy_status_l5;
    wire               pipe_rx_data_k_l5;
    wire               pipe_rx_valid_l5;
    wire               pipe_rxchanisaligned_l5;
    
    wire   [7:0]       pipe_tx_data_l5;
    wire               pipe_tx_data_k_l5;
    wire               pipe_tx_elec_idle_l5;
    wire               pipe_tx_detect_rx_loopback_l5;
    wire               pipe_tx_compliance_l5;
    wire               pipe_rx_polarity_l5;
    wire   [1:0]       pipe_power_down_l5;
    wire               pipe_deskew_lanes_l5;
    wire               pipe_reset_l5;
    
    wire               pipe_rx_elec_idle_l6;
    wire   [2:0]       pipe_rx_status_l6;
    wire   [7:0]       pipe_rx_data_l6;
    wire               pipe_rx_phy_status_l6;
    wire               pipe_rx_data_k_l6;
    wire               pipe_rx_valid_l6;
    wire               pipe_rxchanisaligned_l6;
    
    wire   [7:0]       pipe_tx_data_l6;
    wire               pipe_tx_data_k_l6;
    wire               pipe_tx_elec_idle_l6;
    wire               pipe_tx_detect_rx_loopback_l6;
    wire               pipe_tx_compliance_l6;
    wire               pipe_rx_polarity_l6;
    wire   [1:0]       pipe_power_down_l6;
    wire               pipe_deskew_lanes_l6;
    wire               pipe_reset_l6;
    
    wire               pipe_rx_elec_idle_l7;
    wire   [2:0]       pipe_rx_status_l7;
    wire   [7:0]       pipe_rx_data_l7;
    wire               pipe_rx_phy_status_l7;
    wire               pipe_rx_data_k_l7;
    wire               pipe_rx_valid_l7;
    wire               pipe_rxchanisaligned_l7;
    
    wire   [7:0]       pipe_tx_data_l7;
    wire               pipe_tx_data_k_l7;
    wire               pipe_tx_elec_idle_l7;
    wire               pipe_tx_detect_rx_loopback_l7;
    wire               pipe_tx_compliance_l7;
    wire               pipe_rx_polarity_l7;
    wire   [1:0]       pipe_power_down_l7;
    wire               pipe_deskew_lanes_l7;
    wire               pipe_reset_l7;
    
    wire   [63:0]      pipe_rx_data;
    wire   [7:0]       pipe_rx_data_k;
    wire   [7:0]       pipe_rx_valid;
    wire   [7:0]       pipe_rx_elec_idle;
    wire   [23:0]      pipe_rx_status;
    wire   [7:0]       pipe_rx_phy_status;
    wire   [7:0]       pipe_rxchanisaligned;

    wire   [7:0]       pipe_rx_polarity;
    wire   [63:0]      pipe_tx_data;
    wire   [7:0]       pipe_tx_data_k;
    wire   [7:0]       pipe_tx_elec_idle;
    wire   [7:0]       pipe_tx_compliance;
    wire   [15:0]      pipe_power_down;
    wire   [7:0]       pipe_tx_detect_rx_loopback;
    wire   [7:0]       pipe_deskew_lanes;
    wire   [7:0]       pipe_reset;
    
    wire   [63:0]      pipe_rx_data_reg;
    wire   [7:0]       pipe_rx_data_k_reg;
    wire   [7:0]       pipe_rx_valid_reg;
    wire   [7:0]       pipe_rx_elec_idle_reg;
    wire   [23:0]      pipe_rx_status_reg;
    wire   [7:0]       pipe_rx_phy_status_reg;
    wire   [7:0]       pipe_rxchanisaligned_reg;
    
    wire   [7:0]       pipe_rx_polarity_reg;
    wire   [63:0]      pipe_tx_data_reg;
    wire   [7:0]       pipe_tx_data_k_reg;
    wire   [7:0]       pipe_tx_elec_idle_reg;
    wire   [7:0]       pipe_tx_compliance_reg;
    wire   [15:0]      pipe_power_down_reg;
    wire   [7:0]       pipe_tx_detect_rx_loopback_reg;
    wire   [7:0]       pipe_reset_reg;

    wire   [2:0]       maxpayloadsize_i;
    wire   [2:0]       maxreadrequestsize_i;
    
    wire                        gt_dclk  = 0;
    wire   [NO_OF_LANES*7-1:0]  gt_daddr = 0;
    wire   [NO_OF_LANES-1:0]    gt_den   = 0;
    wire   [NO_OF_LANES-1:0]    gt_dwen  = 0;
    wire   [NO_OF_LANES*16-1:0] gt_di    = 0;
    wire   [NO_OF_LANES*16-1:0] gt_do    = 0;
    wire   [NO_OF_LANES-1:0]    gt_drdy  = 0;
    
    wire   [7:0]      rxbyteisaligned;
    wire   [7:0]      rxchanbondseq;
    
    wire              mem_user_clk;
// Selecting which resets to use
    wire              mux_crm_urst_n;                      
    wire              mux_crm_nvrst_n;                     
    wire              mux_crm_mgmt_rst_n;                  
    wire              mux_crm_user_cfg_rst_n;  
    wire              mux_crm_mac_rst_n;                                
    wire              mux_crm_link_rst_n;
    
    wire              rb_crm_urst_n;                      
    wire              rb_crm_nvrst_n;                     
    wire              rb_crm_mgmt_rst_n;                  
    wire              rb_crm_user_cfg_rst_n;  
    wire              rb_crm_mac_rst_n;                                
    wire              rb_crm_link_rst_n;
    reg           reg_enable_ltssm_reset;
    wire          enable_ltssm_reset;
    reg  [3:0]        reg_ltssm_reset;
    wire [3:0]        ltssm_reset;
    wire          user_reset_gen_n;
      
    wire              usrclk;
    
    wire              crm_core_clk_rx_o; 
    wire              crm_user_clk_rx_o;   
    wire              crm_core_clk_tx_o;   
    wire              crm_user_clk_tx_o;   
    wire              crm_core_clk_dl_o;   
    wire              crm_core_clk;       
    wire              crm_user_clk;  
    
    wire   [10:0]     mgmt_address;                  
    wire              mgmt_write_en;  
    wire              mgmt_read_en;  
    wire   [31:0]     mgmt_write_data; 
    wire   [31:0]     mgmt_read_data; 
    wire   [3:0]      mgmt_byte_wr_en;  
    wire   [31:0]     cfg_do;
    wire              cfg_rd_wr_done_n;
    wire   [31:0]     cfg_rx_bar0;
    wire   [31:0]     cfg_rx_bar1;
    wire   [31:0]     cfg_rx_bar2;
    wire   [31:0]     cfg_rx_bar3;
    wire   [31:0]     cfg_rx_bar4;
    wire   [31:0]     cfg_rx_bar5;
    wire   [31:0]     cfg_rx_xrom;
    wire   [15:0]     cfg_status;
    wire   [15:0]     cfg_command;
    wire   [15:0]     cfg_dstatus;
    wire   [15:0]     cfg_dcommand;
    wire   [15:0]     cfg_lstatus;
    wire   [15:0]     cfg_lcommand;
    wire   [31:0]     cfg_pmcsr;
    wire   [31:0]     cfg_dcap;
    wire   [7:0]      cfg_bus_number;
    wire   [4:0]      cfg_device_number;
    wire   [2:0]      cfg_function_number;
    
    wire   [31:0]     bar0;
    wire   [31:0]     bar1;
    wire   [31:0]     bar2;
    wire   [31:0]     bar3;
    wire   [31:0]     bar4;
    wire   [31:0]     bar5;
    wire   [31:0]     xrom_bar;
    
    parameter [31:0]  one  = 32'hffffffff;
    parameter [31:0]  zero = 32'h0;
    
    reg               wr_done = 1'b0;
    reg    [1:0]      rd_done = 2'b0;
    
    reg    [3:0]      l0_ltssm_state_reg;   
    wire   [3:0]      l0_ltssm_state_i;   
    
    always @(posedge crm_core_clk) begin
       l0_ltssm_state_reg <= l0_ltssm_state_i;
    end
    
    assign l0_ltssm_state = l0_ltssm_state_reg;
    
    generate
    if (BAR0EXIST == "TRUE") begin :bar_0
        assign bar0[0]     = BAR0IOMEMN; 
        assign bar0[2:1]   = (BAR064 == 1)? 2'b10: 2'b00;
        assign bar0[3]     = (BAR0PREFETCHABLE == "FALSE") ? 1'b0: 1'b1;
        
        if  (BAR0MASKWIDTH < 32 ) begin: bar0mask_less_32   
           //This needs to be introduced as the minimum value of BAR0MASKWIDTH is 4 when bar0
           //exists. In this case, zero(4-1:4) gives error in compilation.
           if  (BAR0MASKWIDTH == 4 ) begin: bar0mask_eq_4   
               assign bar0[31:4] = one[31:BAR0MASKWIDTH];
           end else begin:bar0_mask_noteq_4
               assign bar0[31:4] = {one[31:BAR0MASKWIDTH],zero[BAR0MASKWIDTH-1:4]};
           end
    
        end else begin:bar0mask_more_32
            assign bar0[31:4] = zero[31:4];
    
        end  
    
    end else begin:no_bar0
        assign bar0[31:0]  = zero[31:0];
    
    end
    endgenerate
    
        
    
    generate
    if (BAR1EXIST == "TRUE") begin :bar_1
        assign bar1[0]    = BAR1IOMEMN; 
        assign bar1[2:1]  = 2'b00;
        assign bar1[3]    = (BAR1PREFETCHABLE == "FALSE") ? 1'b0: 1'b1;

        if  (BAR1MASKWIDTH == 4 ) begin: bar1mask_eq_4   
            assign bar1[31:4] = one[31:BAR1MASKWIDTH];
        end else begin:bar1_mask_noteq_4
            assign bar1[31:4] = {one[31:BAR1MASKWIDTH],zero[BAR1MASKWIDTH-1:4]};
        end
    
    end else if (BAR064 == 1) begin:bar0_64
        
        if (BAR0MASKWIDTH >32) begin: bar0mask_greater_32
            assign bar1[31:0] = {one[31: BAR0MASKWIDTH-32], zero[BAR0MASKWIDTH-33 :0]};
        end else begin: bar0mask_lesser_32 
            assign bar1[31:0] = one[31:0];  
        end
        
    end else begin:no_bar1
        assign bar1[31:0]  = zero[31:0];
    end    
    endgenerate
        
    generate
    if (BAR2EXIST == "TRUE") begin :bar_2
        assign bar2[0]    = BAR2IOMEMN; 
        assign bar2[2:1]  = (BAR264 == 1)? 2'b10: 2'b00;
        assign bar2[3]    = (BAR2PREFETCHABLE == "FALSE") ? 1'b0: 1'b1;
    
        if  (BAR2MASKWIDTH < 32) begin: bar2mask_less_32   
            if  (BAR2MASKWIDTH == 4 ) begin: bar2mask_eq_4   
                assign bar2[31:4] = one[31:BAR2MASKWIDTH];
            end else begin:bar2_mask_noteq_4
                assign bar2[31:4] = {one[31:BAR2MASKWIDTH],zero[BAR2MASKWIDTH-1:4]};
            end
        end else begin:bar2mask_more_32
            assign bar2[31:4] = zero[31:4];
        end    
    end else begin  :no_bar2
        assign bar2[31:0]  = zero[31:0];
    end    
    endgenerate
    
    generate
    if (BAR3EXIST == "TRUE") begin :bar_3
        assign bar3[0]    = BAR3IOMEMN; 
        assign bar3[2:1]  = 2'b00;
        assign bar3[3]    = (BAR3PREFETCHABLE == "FALSE") ? 1'b0: 1'b1;
        if  (BAR3MASKWIDTH == 4 ) begin: bar3mask_eq_4   
            assign bar3[31:4] = one[31:BAR3MASKWIDTH];
        end else begin:bar3_mask_noteq_4
            assign bar3[31:4] = {one[31:BAR3MASKWIDTH],zero[BAR3MASKWIDTH-1:4]};
        end
    
    end else if (BAR264 == 1) begin:bar2_64
    
        if (BAR2MASKWIDTH >32) begin: bar2mask_greater_32
            assign bar3[31:0] = {one[31: BAR2MASKWIDTH-32], zero[BAR2MASKWIDTH-33 :0]};
        end else begin: bar2mask_lesser_32 
            assign bar3[31:0] = one[31:0];  
        end
    
    end else begin :no_bar3
        assign bar3[31:0]  = zero[31:0];
    end    
    endgenerate
        
    generate
    if (BAR4EXIST == "TRUE") begin :bar_4
        assign bar4[0]    = BAR4IOMEMN; 
        assign bar4[2:1]  = (BAR464 == 1)? 2'b10: 2'b00;
        assign bar4[3]    = (BAR4PREFETCHABLE == "FALSE") ? 1'b0: 1'b1;
    
        if  (BAR4MASKWIDTH <32 ) begin:bar4mask_less_32   
            if  (BAR4MASKWIDTH == 4 ) begin: bar4mask_eq_4   
                assign bar4[31:4] = one[31:BAR4MASKWIDTH];
            end else begin:bar4_mask_noteq_4
                assign bar4[31:4] = {one[31:BAR4MASKWIDTH],zero[BAR4MASKWIDTH-1:4]};
            end
        end else begin:bar4mask_more_32
            assign bar4[31:4] = zero[31:4]; 
        end 
    
    end else begin :no_bar4
        assign bar4[31:0]  = zero[31:0];
    end
    endgenerate
        
    generate
    if (BAR5EXIST == "TRUE") begin :bar_5
        assign bar5[0]    = BAR5IOMEMN; 
        assign bar5[2:1]  = 2'b00;
        assign bar5[3]    = (BAR5PREFETCHABLE == "FALSE") ? 1'b0: 1'b1;
        if  (BAR5MASKWIDTH == 4 ) begin: bar5mask_eq_4   
            assign bar5[31:4] = one[31:BAR5MASKWIDTH];
        end else begin:bar5_mask_noteq_4
            assign bar5[31:4] = {one[31:BAR5MASKWIDTH],zero[BAR5MASKWIDTH-1:4]};
        end
    
    end else if (BAR464 == 1) begin:bar4_64
    
        if (BAR4MASKWIDTH >32) begin: bar4mask_greater_32
            assign bar5[31:0] = {one[31: BAR4MASKWIDTH-32], zero[BAR4MASKWIDTH-33 :0]};
        end else begin: bar4mask_lesser_32 
            assign bar5[31:0] = one[31:0];  
        end
    
    end else begin  :no_bar5
        assign bar5[31:0]  = zero[31:0];
    end
    endgenerate
    
    
    assign xrom_bar[31:0]  = zero[31:0];  
    
    generate    
    if(BARMONITORENABLE  == 0) begin:no_bar_logic
    
        assign  mgmt_address        =     mgmt_addr;
        assign  mgmt_write_en       =     mgmt_wren;
        assign  mgmt_read_en        =     mgmt_rden;
        assign  mgmt_write_data     =     mgmt_wdata;
        assign  mgmt_byte_wr_en     =     mgmt_bwren;
    
        assign  mgmt_rdata          =     mgmt_read_data;
        assign  mgmt_wrdone         =     wr_done;
        assign  mgmt_rddone         =     rd_done[1];
        assign  bar_hit             =     7'b0;
        
        always @(posedge user_clk)
        begin: gen_mgmt_rd_wr_done
            wr_done <= mgmt_wren;
            rd_done <= {rd_done[0], mgmt_rden}; 
        end    
    
    end else begin: use_bar_logic
    
    pcie_blk_cf_mgmt pcie_blk_cf_mgmt_i
    (
           // PCIe Block clock and reset

           .clk                (user_clk),
           .rst_n              (user_reset_n),
           .completer_id       (l0_completer_id),

           .mgmt_addr          (mgmt_address),
           .mgmt_wren          (mgmt_write_en),
           .mgmt_rden          (mgmt_read_en),
           .mgmt_wdata         (mgmt_write_data),
           .mgmt_rdata         (mgmt_read_data),
           .mgmt_bwren         (mgmt_byte_wr_en),

           .cfg_dsn            (DEVICESERIALNUMBER),
           .cfg_do             (mgmt_rdata),
           .cfg_read_done      (mgmt_rddone),
           .cfg_write_done     (mgmt_wrdone),

           .cfg_dwaddr         (mgmt_addr),
           .cfg_rd_en_n        (~mgmt_rden),
           .cfg_wr_en_n        (~mgmt_wren),
           .cfg_wr_data        (mgmt_wdata),
           .cfg_byte_en        (mgmt_bwren),

           .cfg_rx_bar0        (cfg_rx_bar0),  
           .cfg_rx_bar1        (cfg_rx_bar1),  
           .cfg_rx_bar2        (cfg_rx_bar2),  
           .cfg_rx_bar3        (cfg_rx_bar3),  
           .cfg_rx_bar4        (cfg_rx_bar4),  
           .cfg_rx_bar5        (cfg_rx_bar5),  
           .cfg_rx_xrom        (cfg_rx_xrom),  
           .cfg_status         (cfg_status),   
           .cfg_command        (cfg_command),  
           .cfg_dstatus        (cfg_dstatus),  
           .cfg_dcommand       (cfg_dcommand), 
           .cfg_lstatus        (cfg_lstatus),  
           .cfg_lcommand       (cfg_lcommand), 
           .cfg_pmcsr          (cfg_pmcsr),    
           .cfg_dcap           (cfg_dcap),     
           .cfg_bus_number     (cfg_bus_number),
           .cfg_device_number  (cfg_device_number),
           .cfg_function_number(cfg_function_number)

    );                 



    pcie_bar_decoder pcie_bar_decoder_i
        (
            .bar0                (bar0),
            .bar1                (bar1),
            .bar2                (bar2),
            .bar3                (bar3),
            .bar4                (bar4),
            .bar5                (bar5),
            .xrom_bar            (xrom_bar),
            .llk_rx_data         (llk_rx_data),
            .llk_rx_sof_n        (llk_rx_sof_n),
            .llk_rx_eof_n        (llk_rx_eof_n),
            .llk_rx_valid_n      (llk_rx_valid_n),

            .cfg_rx_bar0         (cfg_rx_bar0),  
            .cfg_rx_bar1         (cfg_rx_bar1),  
            .cfg_rx_bar2         (cfg_rx_bar2),  
            .cfg_rx_bar3         (cfg_rx_bar3),  
            .cfg_rx_bar4         (cfg_rx_bar4),  
            .cfg_rx_bar5         (cfg_rx_bar5),  
            .cfg_rx_xrom         (cfg_rx_xrom),  
            .cfg_status          (cfg_status),   
            .cfg_command         (cfg_command),  
            .cfg_dstatus         (cfg_dstatus),  
            .cfg_dcommand        (cfg_dcommand), 
            .cfg_lstatus         (cfg_lstatus),  
            .cfg_lcommand        (cfg_lcommand), 
            .cfg_pmcsr           (cfg_pmcsr),    
            .cfg_dcap            (cfg_dcap),     
            .cfg_bus_number      (cfg_bus_number),
            .cfg_device_number   (cfg_device_number),
            .cfg_function_number (cfg_function_number),

            .clk                 (user_clk),
            .rst_n               (user_reset_n),
            .bar_hit             (bar_hit)

       );     
        
     end
     endgenerate
     
     generate
       if (G_USER_RESETS == 1) begin : no_reset_logic
          assign rb_crm_urst_n     = 1'b1;
          assign rb_crm_nvrst_n    = 1'b1;
          assign rb_crm_mgmt_rst_n = 1'b1;
          assign rb_crm_user_cfg_rst_n = 1'b1;
          assign rb_crm_mac_rst_n  = 1'b1;
          assign rb_crm_link_rst_n = 1'b1;
       
       end else begin : use_reset_logic

      // enable ltssm reset only under the condition elec idle is broken
      // after ltssm is in polling. Disable it after reset is done.

      always @(posedge crm_core_clk or negedge user_reset_n)
        begin
           if (!user_reset_n)
         reg_enable_ltssm_reset <= 0;
           else if (ltssm_reset[3])
         reg_enable_ltssm_reset <= 0;
           else if (pipe_rx_elec_idle_l0 & (l0_ltssm_state_reg == 4'b0010))
         reg_enable_ltssm_reset <= 1;
        end

          assign enable_ltssm_reset = reg_enable_ltssm_reset;
          
          // count up to 8 clock cycles when enable is asserted and elec idle is broken.
          // Stop counting after 8 clock cycles.

           always @(posedge crm_core_clk or negedge user_reset_n)
         begin
        if (!user_reset_n)
          reg_ltssm_reset <= 4'h0;
        else if (enable_ltssm_reset & !ltssm_reset[3] & !pipe_rx_elec_idle_l0)
          reg_ltssm_reset <= reg_ltssm_reset + 4'h1;
         end

            assign ltssm_reset = reg_ltssm_reset;

          // assert and hold ltssm reset for 8 clock cycles when enable_ltssm_reset is asserted and elec idle is broken

            assign user_reset_gen_n = user_reset_n & !(enable_ltssm_reset & !pipe_rx_elec_idle_l0 & !ltssm_reset[3]);
      
          pcie_reset_logic
          #(
             .G_RESETMODE         (RESETMODE),
             .G_RESETSUBMODE      (0)
          )
          pcie_reset_logic_i
          (
             .l0dlupdown          (l0_dl_up_down[0]),
             .gsr                 (gsr),
             .crmcoreclk          (crm_core_clk),
             .l0ltssmstate        (l0_ltssm_state_reg),
             .crmdohotresetn      (crm_do_hot_reset_n),
             .crmpwrsoftresetn    (crm_pwr_soft_reset_n),
             
             .crmmgmtrstn         (rb_crm_mgmt_rst_n),
             .crmnvrstn           (rb_crm_nvrst_n),
             .crmmacrstn          (rb_crm_mac_rst_n),
             .crmlinkrstn         (rb_crm_link_rst_n),
             .crmurstn            (rb_crm_urst_n),
             .crmusercfgrstn      (rb_crm_user_cfg_rst_n),
             
             .user_master_reset_n (user_reset_gen_n),
             .clock_ready         (clock_lock)
          
          );
       end
     endgenerate
     
     assign mux_crm_mgmt_rst_n = (G_USER_RESETS == 1) ? crm_mgmt_rst_n : rb_crm_mgmt_rst_n;
     assign mux_crm_nvrst_n    = (G_USER_RESETS == 1) ? crm_nvrst_n   : rb_crm_nvrst_n;
     assign mux_crm_mac_rst_n  = (G_USER_RESETS == 1) ? crm_mac_rst_n : rb_crm_mac_rst_n;
     assign mux_crm_link_rst_n = (G_USER_RESETS == 1) ? crm_link_rst_n : rb_crm_link_rst_n;
     assign mux_crm_urst_n     = (G_USER_RESETS == 1) ? crm_urst_n : rb_crm_urst_n;
     assign mux_crm_user_cfg_rst_n = (G_USER_RESETS == 1) ? crm_user_cfg_rst_n : rb_crm_user_cfg_rst_n;
     
     
     pcie_clocking
     #(
        .G_USE_DCM     (G_USE_DCM), // use DCM (1) or use PLL (0)
        .G_DIVIDE_VAL  (CLKRATIO),  // use 1 for 250MHz use 2 for 125MHz and 4 for 62.5MHz
        .CLKFBOUT_MULT (CLKFBOUT_MULT),
        .CLKIN_PERIOD  (CLKIN_PERIOD)
     
     )
     pcie_clocking_i
     (
         .clkin_pll       (refclkout_bufg), 
         .clkin_dcm       (gtpclk_bufg), 
         .rst             (~plllkdet_out[0]), 
         .coreclk         (core_clk),  
         .userclk         (user_clk), 
         .locked          (clock_lock)
     );
     
     
     assign usrclk = (CLKDIVIDED == "FALSE") ? 1'b1 : user_clk;
            
     assign crm_core_clk_rx_o = core_clk;
     assign crm_user_clk_rx_o = usrclk;             
     assign crm_core_clk_tx_o = core_clk;             
     assign crm_user_clk_tx_o = usrclk;             
     assign crm_core_clk_dl_o = core_clk;             
     assign crm_core_clk      = core_clk; 
     assign crm_user_clk      = usrclk;


     
    PCIE_EP # (
           .CLKDIVIDED                             (CLKDIVIDED                  ),
           .RESETMODE                              (RESETMODE                   ),
           .VENDORID                               (VENDORID                    ),
           .DEVICEID                               (DEVICEID                    ),
           .REVISIONID                             (REVISIONID                  ),
           .CLASSCODE                              (CLASSCODE                   ),
           .CARDBUSCISPOINTER                      (CARDBUSCISPOINTER           ),
           .SUBSYSTEMVENDORID                      (SUBSYSTEMVENDORID           ),
           .SUBSYSTEMID                            (SUBSYSTEMID                 ),
           .CAPABILITIESPOINTER                    (CAPABILITIESPTR_CALC        ),
           .INTERRUPTPIN                           (INTERRUPTPIN                ),
           .AERBASEPTR                             (AERBASEPTR                  ),
           .DSNBASEPTR                             (DSNBASEPTR                  ),
           .MSIBASEPTR                             (MSIBASEPTR                  ),
           .PBBASEPTR                              (PBBASEPTR                   ),
           .PMBASEPTR                              (PMBASEPTR                   ),
           .VCBASEPTR                              (VCBASEPTR                   ),
           .XPBASEPTR                              (XPBASEPTR                   ),
           .PMDATASCALE0                           (PMDATASCALE0                ),
           .PMDATASCALE1                           (PMDATASCALE1                ),
           .PMDATASCALE2                           (PMDATASCALE2                ),
           .PMDATASCALE3                           (PMDATASCALE3                ),
           .PMDATASCALE4                           (PMDATASCALE4                ),
           .PMDATASCALE5                           (PMDATASCALE5                ),
           .PMDATASCALE6                           (PMDATASCALE6                ),
           .PMDATASCALE7                           (PMDATASCALE7                ),
           .PMCAPABILITYNEXTPTR                    (PMCAPABILITYNEXTPTR_CALC    ),
           .PMCAPABILITYDSI                        (PMCAPABILITYDSI             ),
           .PMCAPABILITYAUXCURRENT                 (PMCAPABILITYAUXCURRENT      ),
           .PMCAPABILITYD1SUPPORT                  (PMCAPABILITYD1SUPPORT       ),
           .PMCAPABILITYD2SUPPORT                  (PMCAPABILITYD2SUPPORT       ),
           .PMCAPABILITYPMESUPPORT                 (PMCAPABILITYPMESUPPORT      ),
           .PMDATA0                                (PMDATA0                     ),
           .PMDATA1                                (PMDATA1                     ),
           .PMDATA2                                (PMDATA2                     ),
           .PMDATA3                                (PMDATA3                     ),
           .PMDATA4                                (PMDATA4                     ),
           .PMDATA5                                (PMDATA5                     ),
           .PMDATA6                                (PMDATA6                     ),
           .PMDATA7                                (PMDATA7                     ),
           .MSICAPABILITYNEXTPTR                   (MSICAPABILITYNEXTPTR_CALC   ),
           .MSICAPABILITYMULTIMSGCAP               (MSICAPABILITYMULTIMSGCAP    ),
           .PCIECAPABILITYNEXTPTR                  (PCIECAPABILITYNEXTPTR_CALC  ),
           .DEVICECAPABILITYENDPOINTL0SLATENCY     (DEVICECAPABILITYENDPOINTL0SLATENCY   ),
           .DEVICECAPABILITYENDPOINTL1LATENCY      (DEVICECAPABILITYENDPOINTL1LATENCY    ),
           .LINKCAPABILITYMAXLINKWIDTH             (LINKCAPABILITYMAXLINKWIDTH           ),
           .LINKCAPABILITYASPMSUPPORT              (LINKCAPABILITYASPMSUPPORT_CALC       ),
           .LINKSTATUSSLOTCLOCKCONFIG              (LINKSTATUSSLOTCLOCKCONFIG            ),
           .AERCAPABILITYNEXTPTR                   (AERCAPABILITYNEXTPTR                 ),
           .VCCAPABILITYNEXTPTR                    (VCCAPABILITYNEXTPTR                  ),
           .PORTVCCAPABILITYEXTENDEDVCCOUNT        (PORTVCCAPABILITYEXTENDEDVCCOUNT      ),
           .PORTVCCAPABILITYVCARBCAP               (PORTVCCAPABILITYVCARBCAP             ),
           .PORTVCCAPABILITYVCARBTABLEOFFSET       (PORTVCCAPABILITYVCARBTABLEOFFSET_CALC),
           .DSNCAPABILITYNEXTPTR                   (DSNCAPABILITYNEXTPTR        ),
           .DEVICESERIALNUMBER                     (DEVICESERIALNUMBER          ),
           .PBCAPABILITYNEXTPTR                    (PBCAPABILITYNEXTPTR         ),
           .PBCAPABILITYDW0BASEPOWER               (PBCAPABILITYDW0BASEPOWER    ),
           .PBCAPABILITYDW0DATASCALE               (PBCAPABILITYDW0DATASCALE    ),
           .PBCAPABILITYDW0PMSUBSTATE              (PBCAPABILITYDW0PMSUBSTATE   ),
           .PBCAPABILITYDW0PMSTATE                 (PBCAPABILITYDW0PMSTATE      ),
           .PBCAPABILITYDW0TYPE                    (PBCAPABILITYDW0TYPE         ),
           .PBCAPABILITYDW0POWERRAIL               (PBCAPABILITYDW0POWERRAIL    ),
           .PBCAPABILITYDW1BASEPOWER               (PBCAPABILITYDW1BASEPOWER    ),
           .PBCAPABILITYDW1DATASCALE               (PBCAPABILITYDW1DATASCALE    ),
           .PBCAPABILITYDW1PMSUBSTATE              (PBCAPABILITYDW1PMSUBSTATE   ),
           .PBCAPABILITYDW1PMSTATE                 (PBCAPABILITYDW1PMSTATE      ),
           .PBCAPABILITYDW1TYPE                    (PBCAPABILITYDW1TYPE         ),
           .PBCAPABILITYDW1POWERRAIL               (PBCAPABILITYDW1POWERRAIL    ),
           .PBCAPABILITYDW2BASEPOWER               (PBCAPABILITYDW2BASEPOWER    ),
           .PBCAPABILITYDW2DATASCALE               (PBCAPABILITYDW2DATASCALE    ),
           .PBCAPABILITYDW2PMSUBSTATE              (PBCAPABILITYDW2PMSUBSTATE   ),
           .PBCAPABILITYDW2PMSTATE                 (PBCAPABILITYDW2PMSTATE      ),
           .PBCAPABILITYDW2TYPE                    (PBCAPABILITYDW2TYPE         ),
           .PBCAPABILITYDW2POWERRAIL               (PBCAPABILITYDW2POWERRAIL    ),
           .PBCAPABILITYDW3BASEPOWER               (PBCAPABILITYDW3BASEPOWER    ),
           .PBCAPABILITYDW3DATASCALE               (PBCAPABILITYDW3DATASCALE    ),
           .PBCAPABILITYDW3PMSUBSTATE              (PBCAPABILITYDW3PMSUBSTATE   ),
           .PBCAPABILITYDW3PMSTATE                 (PBCAPABILITYDW3PMSTATE      ),
           .PBCAPABILITYDW3TYPE                    (PBCAPABILITYDW3TYPE         ),
           .PBCAPABILITYDW3POWERRAIL               (PBCAPABILITYDW3POWERRAIL    ),
           .PBCAPABILITYSYSTEMALLOCATED            (PBCAPABILITYSYSTEMALLOCATED ),
           .VC0TXFIFOBASEP                         (VC0TXFIFOBASEP_CALC         ),
           .VC0TXFIFOBASENP                        (VC0TXFIFOBASENP_CALC        ),
           .VC0TXFIFOBASEC                         (VC0TXFIFOBASEC_CALC         ),
           .VC0TXFIFOLIMITP                        (VC0TXFIFOLIMITP_CALC        ),
           .VC0TXFIFOLIMITNP                       (VC0TXFIFOLIMITNP_CALC       ),
           .VC0TXFIFOLIMITC                        (VC0TXFIFOLIMITC_CALC        ),
           .VC0TOTALCREDITSPH                      (VC0TOTALCREDITSPH           ),
           .VC0TOTALCREDITSNPH                     (VC0TOTALCREDITSNPH          ),
           .VC0TOTALCREDITSCH                      (VC0TOTALCREDITSCH           ),
           .VC0TOTALCREDITSPD                      (VC0TOTALCREDITSPD           ),
           .VC0TOTALCREDITSCD                      (VC0TOTALCREDITSCD           ),
           .VC0RXFIFOBASEP                         (VC0RXFIFOBASEP_CALC         ),
           .VC0RXFIFOBASENP                        (VC0RXFIFOBASENP_CALC        ),
           .VC0RXFIFOBASEC                         (VC0RXFIFOBASEC_CALC         ),
           .VC0RXFIFOLIMITP                        (VC0RXFIFOLIMITP_CALC        ),
           .VC0RXFIFOLIMITNP                       (VC0RXFIFOLIMITNP_CALC       ),
           .VC0RXFIFOLIMITC                        (VC0RXFIFOLIMITC_CALC        ),
           .VC1TXFIFOBASEP                         (VC1TXFIFOBASEP_CALC         ),
           .VC1TXFIFOBASENP                        (VC1TXFIFOBASENP_CALC        ),
           .VC1TXFIFOBASEC                         (VC1TXFIFOBASEC_CALC         ),
           .VC1TXFIFOLIMITP                        (VC1TXFIFOLIMITP_CALC        ),
           .VC1TXFIFOLIMITNP                       (VC1TXFIFOLIMITNP_CALC       ),
           .VC1TXFIFOLIMITC                        (VC1TXFIFOLIMITC_CALC        ),
           .VC1TOTALCREDITSPH                      (VC1TOTALCREDITSPH           ),
           .VC1TOTALCREDITSNPH                     (VC1TOTALCREDITSNPH          ),
           .VC1TOTALCREDITSCH                      (VC1TOTALCREDITSCH           ),
           .VC1TOTALCREDITSPD                      (VC1TOTALCREDITSPD           ),
           .VC1TOTALCREDITSCD                      (VC1TOTALCREDITSCD           ),
           .VC1RXFIFOBASEP                         (VC1RXFIFOBASEP_CALC         ),
           .VC1RXFIFOBASENP                        (VC1RXFIFOBASENP_CALC        ),
           .VC1RXFIFOBASEC                         (VC1RXFIFOBASEC_CALC         ),
           .VC1RXFIFOLIMITP                        (VC1RXFIFOLIMITP_CALC        ),
           .VC1RXFIFOLIMITNP                       (VC1RXFIFOLIMITNP_CALC       ),
           .VC1RXFIFOLIMITC                        (VC1RXFIFOLIMITC_CALC        ),
           .BAR0EXIST                              (BAR0EXIST                   ),
           .BAR1EXIST                              (BAR1EXIST                   ),
           .BAR2EXIST                              (BAR2EXIST                   ),
           .BAR3EXIST                              (BAR3EXIST                   ),
           .BAR4EXIST                              (BAR4EXIST                   ),
           .BAR5EXIST                              (BAR5EXIST                   ),
           .BAR0ADDRWIDTH                          (BAR0ADDRWIDTH_CALC          ),
           .BAR1ADDRWIDTH                          (BAR1ADDRWIDTH_CALC          ),
           .BAR2ADDRWIDTH                          (BAR2ADDRWIDTH_CALC          ),
           .BAR3ADDRWIDTH                          (BAR3ADDRWIDTH_CALC          ),
           .BAR4ADDRWIDTH                          (BAR4ADDRWIDTH_CALC          ),
           .BAR0PREFETCHABLE                       (BAR0PREFETCHABLE_CALC       ),
           .BAR1PREFETCHABLE                       (BAR1PREFETCHABLE_CALC       ),
           .BAR2PREFETCHABLE                       (BAR2PREFETCHABLE_CALC       ),
           .BAR3PREFETCHABLE                       (BAR3PREFETCHABLE_CALC       ),
           .BAR4PREFETCHABLE                       (BAR4PREFETCHABLE_CALC       ),
           .BAR5PREFETCHABLE                       (BAR5PREFETCHABLE_CALC       ),
           .BAR0IOMEMN                             (BAR0IOMEMN                  ),
           .BAR1IOMEMN                             (BAR1IOMEMN                  ),
           .BAR2IOMEMN                             (BAR2IOMEMN                  ),
           .BAR3IOMEMN                             (BAR3IOMEMN                  ),
           .BAR4IOMEMN                             (BAR4IOMEMN                  ),
           .BAR5IOMEMN                             (BAR5IOMEMN                  ),
           .BAR0MASKWIDTH                          (BAR0MASKWIDTH               ),
           .BAR1MASKWIDTH                          (BAR1MASKWIDTH               ),
           .BAR2MASKWIDTH                          (BAR2MASKWIDTH               ),
           .BAR3MASKWIDTH                          (BAR3MASKWIDTH               ),
           .BAR4MASKWIDTH                          (BAR4MASKWIDTH               ),
           .BAR5MASKWIDTH                          (BAR5MASKWIDTH               ),
           .XPDEVICEPORTTYPE                       (XPDEVICEPORTTYPE            ),
           .XPMAXPAYLOAD                           (XPMAXPAYLOAD                ),
           .INFINITECOMPLETIONS                    (INFINITECOMPLETIONS         ),
           .ACTIVELANESIN                          (ACTIVELANESIN               ),
           .LOWPRIORITYVCCOUNT                     (LOWPRIORITYVCCOUNT          ),
           .L0SEXITLATENCY                         (L0SEXITLATENCY              ),
           .L0SEXITLATENCYCOMCLK                   (L0SEXITLATENCYCOMCLK        ),
           .L1EXITLATENCY                          (L1EXITLATENCY               ),
           .L1EXITLATENCYCOMCLK                    (L1EXITLATENCYCOMCLK         ),
           .TXTSNFTS                               (TXTSNFTS                    ),
           .TXTSNFTSCOMCLK                         (TXTSNFTSCOMCLK              ),
           .TLRAMREADLATENCY                       (TLRAMREADLATENCY            ),
           .TLRAMWRITELATENCY                      (TLRAMWRITELATENCY           ),
           .RETRYRAMSIZE                           (RETRYRAMSIZE_CALC           ),
           .RETRYRAMREADLATENCY                    (RETRYRAMREADLATENCY         ),
           .RETRYRAMWRITELATENCY                   (RETRYRAMWRITELATENCY        )
     
     ) pcie_ep (
 
           .PIPERXELECIDLEL0                ( pipe_rx_elec_idle_l0        ),
           .PIPERXSTATUSL0                  ( pipe_rx_status_l0           ),
           .PIPERXDATAL0                    ( pipe_rx_data_l0             ),
           .PIPEPHYSTATUSL0                 ( pipe_rx_phy_status_l0       ),
           .PIPERXDATAKL0                   ( pipe_rx_data_k_l0           ),
           .PIPERXVALIDL0                   ( pipe_rx_valid_l0            ),
           .PIPERXCHANISALIGNEDL0           ( pipe_rxchanisaligned_l0     ),
           .PIPERXELECIDLEL1                ( pipe_rx_elec_idle_l1        ),
           .PIPERXSTATUSL1                  ( pipe_rx_status_l1           ),
           .PIPERXDATAL1                    ( pipe_rx_data_l1             ),
           .PIPEPHYSTATUSL1                 ( pipe_rx_phy_status_l1       ),
           .PIPERXDATAKL1                   ( pipe_rx_data_k_l1           ),
           .PIPERXVALIDL1                   ( pipe_rx_valid_l1            ),
           .PIPERXCHANISALIGNEDL1           ( pipe_rxchanisaligned_l1     ),
           .PIPERXELECIDLEL2                ( pipe_rx_elec_idle_l2        ),
           .PIPERXSTATUSL2                  ( pipe_rx_status_l2           ),
           .PIPERXDATAL2                    ( pipe_rx_data_l2             ),
           .PIPEPHYSTATUSL2                 ( pipe_rx_phy_status_l2       ),
           .PIPERXDATAKL2                   ( pipe_rx_data_k_l2           ),
           .PIPERXVALIDL2                   ( pipe_rx_valid_l2            ),
           .PIPERXCHANISALIGNEDL2           ( pipe_rxchanisaligned_l2     ),
           .PIPERXELECIDLEL3                ( pipe_rx_elec_idle_l3        ),
           .PIPERXSTATUSL3                  ( pipe_rx_status_l3           ),
           .PIPERXDATAL3                    ( pipe_rx_data_l3             ),
           .PIPEPHYSTATUSL3                 ( pipe_rx_phy_status_l3       ),
           .PIPERXDATAKL3                   ( pipe_rx_data_k_l3           ),
           .PIPERXVALIDL3                   ( pipe_rx_valid_l3            ),
           .PIPERXCHANISALIGNEDL3           ( pipe_rxchanisaligned_l3     ),
           .PIPERXELECIDLEL4                ( pipe_rx_elec_idle_l4        ),
           .PIPERXSTATUSL4                  ( pipe_rx_status_l4           ),
           .PIPERXDATAL4                    ( pipe_rx_data_l4             ),
           .PIPEPHYSTATUSL4                 ( pipe_rx_phy_status_l4       ),
           .PIPERXDATAKL4                   ( pipe_rx_data_k_l4           ),
           .PIPERXVALIDL4                   ( pipe_rx_valid_l4            ),
           .PIPERXCHANISALIGNEDL4           ( pipe_rxchanisaligned_l4     ),
           .PIPERXELECIDLEL5                ( pipe_rx_elec_idle_l5        ),
           .PIPERXSTATUSL5                  ( pipe_rx_status_l5           ),
           .PIPERXDATAL5                    ( pipe_rx_data_l5             ),
           .PIPEPHYSTATUSL5                 ( pipe_rx_phy_status_l5       ),
           .PIPERXDATAKL5                   ( pipe_rx_data_k_l5           ),
           .PIPERXVALIDL5                   ( pipe_rx_valid_l5            ),
           .PIPERXCHANISALIGNEDL5           ( pipe_rxchanisaligned_l5     ),
           .PIPERXELECIDLEL6                ( pipe_rx_elec_idle_l6        ),
           .PIPERXSTATUSL6                  ( pipe_rx_status_l6           ),
           .PIPERXDATAL6                    ( pipe_rx_data_l6             ),
           .PIPEPHYSTATUSL6                 ( pipe_rx_phy_status_l6       ),
           .PIPERXDATAKL6                   ( pipe_rx_data_k_l6           ),
           .PIPERXVALIDL6                   ( pipe_rx_valid_l6            ),
           .PIPERXCHANISALIGNEDL6           ( pipe_rxchanisaligned_l6     ),
           .PIPERXELECIDLEL7                ( pipe_rx_elec_idle_l7        ),
           .PIPERXSTATUSL7                  ( pipe_rx_status_l7           ),
           .PIPERXDATAL7                    ( pipe_rx_data_l7             ),
           .PIPEPHYSTATUSL7                 ( pipe_rx_phy_status_l7       ),
           .PIPERXDATAKL7                   ( pipe_rx_data_k_l7           ),
           .PIPERXVALIDL7                   ( pipe_rx_valid_l7            ),
           .PIPERXCHANISALIGNEDL7           ( pipe_rxchanisaligned_l7     ),
           .MIMRXBRDATA                     ( mim_rx_brdata               ),
           .CRMCORECLKRXO                   ( crm_core_clk_rx_o           ),
           .CRMUSERCLKRXO                   ( crm_user_clk_rx_o           ),
           .MIMTXBRDATA                     ( mim_tx_brdata               ),
           .CRMCORECLKTXO                   ( crm_core_clk_tx_o           ),
           .CRMUSERCLKTXO                   ( crm_user_clk_tx_o           ),
           .MIMDLLBRDATA                    ( mim_dll_brdata              ),
           .CRMCORECLKDLO                   ( crm_core_clk_dl_o           ),
           .CRMCORECLK                      ( crm_core_clk                ),
           .CRMUSERCLK                      ( crm_user_clk                ),
 
           .CRMURSTN                        (mux_crm_urst_n               ),
           .CRMNVRSTN                       (mux_crm_nvrst_n              ),
           .CRMMGMTRSTN                     (mux_crm_mgmt_rst_n           ),
           .CRMLINKRSTN                     (mux_crm_link_rst_n           ),
           .CRMMACRSTN                      (mux_crm_mac_rst_n            ),
           .CRMUSERCFGRSTN                  (mux_crm_user_cfg_rst_n       ),
 
           .LLKTXDATA                       (llk_tx_data                  ),
           .LLKTXSRCRDYN                    (llk_tx_src_rdy_n             ),
           .LLKTXSRCDSCN                    (TIEOFFTOHIGH1                ),
           .LLKTXSOFN                       (llk_tx_sof_n                 ),
           .LLKTXEOFN                       (llk_tx_eof_n                 ),
           .LLKTXSOPN                       (llk_tx_sop_n                 ),
           .LLKTXEOPN                       (llk_tx_eop_n                 ),
           .LLKTXENABLEN                    (llk_tx_enable_n              ),
           .LLKTXCHTC                       (llk_tx_ch_tc                 ),
           .LLKTXCHFIFO                     (llk_tx_ch_fifo               ),
           .LLKRXDSTREQN                    (llk_rx_dst_req_n             ),
           .LLKRXDSTCONTREQN                (llk_rx_dst_cont_req_n        ),
           .LLKRXCHTC                       (llk_rx_ch_tc                 ),
           .LLKRXCHFIFO                     (llk_rx_ch_fifo               ),
           .MGMTWDATA                       (mgmt_write_data              ),
           .MGMTBWREN                       (mgmt_byte_wr_en              ),
           .MGMTWREN                        (mgmt_write_en                ),
           .MGMTADDR                        (mgmt_address                 ),
           .MGMTRDEN                        (TIEOFFTOHIGH1                ),
 
           .MGMTSTATSCREDITSEL              (mgmt_stats_credit_sel        ),
           .AUXPOWER                        (AUXPOWER                     ),
           .COMPLIANCEAVOID                 (compliance_avoid             ),
           .L0CFGLOOPBACKMASTER             (l0_cfg_loopback_master       ),
           .L0CFGDISABLESCRAMBLE            (FORCENOSCRAMBLING            ),
           .L0TRANSACTIONSPENDING           (l0_transactions_pending      ),
           .L0SETCOMPLETERABORTERROR        (l0_set_completer_abort_error ),
           .L0SETDETECTEDCORRERROR          (l0_set_detected_corr_error   ),
           .L0SETDETECTEDFATALERROR         (l0_set_detected_fatal_error  ),
           .L0SETDETECTEDNONFATALERROR      (l0_set_detected_nonfatal_error    ),
           .L0SETUSERDETECTEDPARITYERROR    (l0_set_user_detected_parity_error ),
           .L0SETUSERMASTERDATAPARITY       (l0_set_user_master_data_parity    ),
           .L0SETUSERRECEIVEDMASTERABORT    (l0_set_user_received_master_abort ),
           .L0SETUSERRECEIVEDTARGETABORT    (l0_set_user_received_target_abort ),
           .L0SETUSERSYSTEMERROR            (l0_set_user_system_error          ),
           .L0SETUSERSIGNALLEDTARGETABORT   (l0_set_user_signalled_target_abort),
           .L0SETCOMPLETIONTIMEOUTUNCORRERROR(l0_set_completion_timeout_uncorr_error        ),
           .L0SETCOMPLETIONTIMEOUTCORRERROR (l0_set_completion_timeout_corr_error           ),
           .L0SETUNEXPECTEDCOMPLETIONUNCORRERROR(l0_set_unexpected_completion_uncorr_error  ),
           .L0SETUNEXPECTEDCOMPLETIONCORRERROR(l0_set_unexpected_completion_corr_error      ),
           .L0SETUNSUPPORTEDREQUESTNONPOSTEDERROR(l0_set_unsupported_request_nonposted_error),
           .L0SETUNSUPPORTEDREQUESTOTHERERROR(l0_set_unsupported_request_other_error        ),
           .L0PACKETHEADERFROMUSER          (128'h00000000000000000000000000000000          ),
           .L0LEGACYINTFUNCT0               (l0_legacy_int_funct0            ),
           
           .L0MSIREQUEST0                   (4'b0                            ),
           .L0PMEREQIN                      (L0_PME_REQ_IN                   ),
           
           .PIPETXDATAL0                    (pipe_tx_data_l0                 ),
           .PIPETXDATAKL0                   (pipe_tx_data_k_l0               ),
           .PIPETXELECIDLEL0                (pipe_tx_elec_idle_l0            ),
           .PIPETXDETECTRXLOOPBACKL0        (pipe_tx_detect_rx_loopback_l0   ),
           .PIPETXCOMPLIANCEL0              (pipe_tx_compliance_l0           ),
           .PIPERXPOLARITYL0                (pipe_rx_polarity_l0             ),
           .PIPEPOWERDOWNL0                 (pipe_power_down_l0              ),
           .PIPEDESKEWLANESL0               (pipe_deskew_lanes_l0            ),
           .PIPERESETL0                     (pipe_reset_l0                   ),
           .PIPETXDATAL1                    (pipe_tx_data_l1                 ),
           .PIPETXDATAKL1                   (pipe_tx_data_k_l1               ),
           .PIPETXELECIDLEL1                (pipe_tx_elec_idle_l1            ),
           .PIPETXDETECTRXLOOPBACKL1        (pipe_tx_detect_rx_loopback_l1   ),
           .PIPETXCOMPLIANCEL1              (pipe_tx_compliance_l1           ),
           .PIPERXPOLARITYL1                (pipe_rx_polarity_l1             ),
           .PIPEPOWERDOWNL1                 (pipe_power_down_l1              ),
           .PIPEDESKEWLANESL1               (pipe_deskew_lanes_l1            ),
           .PIPERESETL1                     (pipe_reset_l1                   ),
           .PIPETXDATAL2                    (pipe_tx_data_l2                 ),
           .PIPETXDATAKL2                   (pipe_tx_data_k_l2               ),
           .PIPETXELECIDLEL2                (pipe_tx_elec_idle_l2            ),
           .PIPETXDETECTRXLOOPBACKL2        (pipe_tx_detect_rx_loopback_l2   ),
           .PIPETXCOMPLIANCEL2              (pipe_tx_compliance_l2           ),
           .PIPERXPOLARITYL2                (pipe_rx_polarity_l2             ),
           .PIPEPOWERDOWNL2                 (pipe_power_down_l2              ),
           .PIPEDESKEWLANESL2               (pipe_deskew_lanes_l2            ),
           .PIPERESETL2                     (pipe_reset_l2                   ),
           .PIPETXDATAL3                    (pipe_tx_data_l3                 ),
           .PIPETXDATAKL3                   (pipe_tx_data_k_l3               ),
           .PIPETXELECIDLEL3                (pipe_tx_elec_idle_l3            ),
           .PIPETXDETECTRXLOOPBACKL3        (pipe_tx_detect_rx_loopback_l3   ),
           .PIPETXCOMPLIANCEL3              (pipe_tx_compliance_l3           ),
           .PIPERXPOLARITYL3                (pipe_rx_polarity_l3             ),
           .PIPEPOWERDOWNL3                 (pipe_power_down_l3              ),
           .PIPEDESKEWLANESL3               (pipe_deskew_lanes_l3            ),
           .PIPERESETL3                     (pipe_reset_l3                   ),
           .PIPETXDATAL4                    (pipe_tx_data_l4                 ),
           .PIPETXDATAKL4                   (pipe_tx_data_k_l4               ),
           .PIPETXELECIDLEL4                (pipe_tx_elec_idle_l4            ),
           .PIPETXDETECTRXLOOPBACKL4        (pipe_tx_detect_rx_loopback_l4   ),
           .PIPETXCOMPLIANCEL4              (pipe_tx_compliance_l4           ),
           .PIPERXPOLARITYL4                (pipe_rx_polarity_l4             ),
           .PIPEPOWERDOWNL4                 (pipe_power_down_l4              ),
           .PIPEDESKEWLANESL4               (pipe_deskew_lanes_l4            ),
           .PIPERESETL4                     (pipe_reset_l4                   ),
           .PIPETXDATAL5                    (pipe_tx_data_l5                 ),
           .PIPETXDATAKL5                   (pipe_tx_data_k_l5               ),
           .PIPETXELECIDLEL5                (pipe_tx_elec_idle_l5            ),
           .PIPETXDETECTRXLOOPBACKL5        (pipe_tx_detect_rx_loopback_l5   ),
           .PIPETXCOMPLIANCEL5              (pipe_tx_compliance_l5           ),
           .PIPERXPOLARITYL5                (pipe_rx_polarity_l5             ),
           .PIPEPOWERDOWNL5                 (pipe_power_down_l5              ),
           .PIPEDESKEWLANESL5               (pipe_deskew_lanes_l5            ),
           .PIPERESETL5                     (pipe_reset_l5                   ),
           .PIPETXDATAL6                    (pipe_tx_data_l6                 ),
           .PIPETXDATAKL6                   (pipe_tx_data_k_l6               ),
           .PIPETXELECIDLEL6                (pipe_tx_elec_idle_l6            ),
           .PIPETXDETECTRXLOOPBACKL6        (pipe_tx_detect_rx_loopback_l6   ),
           .PIPETXCOMPLIANCEL6              (pipe_tx_compliance_l6           ),
           .PIPERXPOLARITYL6                (pipe_rx_polarity_l6             ),
           .PIPEPOWERDOWNL6                 (pipe_power_down_l6              ),
           .PIPEDESKEWLANESL6               (pipe_deskew_lanes_l6            ),
           .PIPERESETL6                     (pipe_reset_l6                   ),
           .PIPETXDATAL7                    (pipe_tx_data_l7                 ),
           .PIPETXDATAKL7                   (pipe_tx_data_k_l7               ),
           .PIPETXELECIDLEL7                (pipe_tx_elec_idle_l7            ),
           .PIPETXDETECTRXLOOPBACKL7        (pipe_tx_detect_rx_loopback_l7   ),
           .PIPETXCOMPLIANCEL7              (pipe_tx_compliance_l7           ),
           .PIPERXPOLARITYL7                (pipe_rx_polarity_l7             ),
           .PIPEPOWERDOWNL7                 (pipe_power_down_l7              ),
           .PIPEDESKEWLANESL7               (pipe_deskew_lanes_l7            ),
           .PIPERESETL7                     (pipe_reset_l7                   ),
           
           .MIMRXBWDATA                     (mim_rx_bwdata                   ),
           .MIMRXBWADD                      (mim_rx_bwadd                    ),
           .MIMRXBRADD                      (mim_rx_bradd                    ),
           .MIMRXBWEN                       (mim_rx_bwen                     ),
           .MIMRXBREN                       (mim_rx_bren                     ),
           .MIMTXBWDATA                     (mim_tx_bwdata                   ),
           .MIMTXBWADD                      (mim_tx_bwadd                    ),
           .MIMTXBRADD                      (mim_tx_bradd                    ),
           .MIMTXBWEN                       (mim_tx_bwen                     ),
           .MIMTXBREN                       (mim_tx_bren                     ),
           .MIMDLLBWDATA                    (mim_dll_bwdata                  ),
           .MIMDLLBWADD                     (mim_dll_bwadd                   ),
           .MIMDLLBRADD                     (mim_dll_bradd                   ),
           .MIMDLLBWEN                      (mim_dll_bwen                    ),
           .MIMDLLBREN                      (mim_dll_bren                    ),
           
           .CRMDOHOTRESETN                  (crm_do_hot_reset_n              ),
           .CRMPWRSOFTRESETN                (crm_pwr_soft_reset_n            ),
           
           .LLKTCSTATUS                     (llk_tc_status                   ),
           .LLKTXDSTRDYN                    (llk_tx_dst_rdy_n                ),
           .LLKTXCHANSPACE                  (llk_tx_chan_space               ),
           .LLKTXCHPOSTEDREADYN             (llk_tx_ch_posted_ready_n        ),
           .LLKTXCHNONPOSTEDREADYN          (llk_tx_ch_non_posted_ready_n    ),
           .LLKTXCHCOMPLETIONREADYN         (llk_tx_ch_completion_ready_n    ),
           .LLKRXDATA                       (llk_rx_data                     ),
           .LLKRXSRCRDYN                    (llk_rx_src_rdy_n                ),
           .LLKRXSRCLASTREQN                (llk_rx_src_last_req_n           ),
           .LLKRXSOFN                       (llk_rx_sof_n                    ),
           .LLKRXEOFN                       (llk_rx_eof_n                    ),
           .LLKRXSOPN                       (llk_rx_sop_n                    ),
           .LLKRXEOPN                       (llk_rx_eop_n                    ),
           .LLKRXVALIDN                     (llk_rx_valid_n                  ),
           .LLKRXPREFERREDTYPE              (llk_rx_preferred_type),
           .LLKRXCHPOSTEDAVAILABLEN         (llk_rx_ch_posted_available_n    ),
           .LLKRXCHNONPOSTEDAVAILABLEN      (llk_rx_ch_non_posted_available_n),
           .LLKRXCHCOMPLETIONAVAILABLEN     (llk_rx_ch_completion_available_n),
           
           .MGMTRDATA                       (mgmt_read_data                  ),
           .MGMTPSO                         (mgmt_pso                        ),
           .MGMTSTATSCREDIT                 (mgmt_stats_credit               ),
           
           .DLLTXPMDLLPOUTSTANDING          (),
           .L0FIRSTCFGWRITEOCCURRED         (l0_first_cfg_write_occurred     ),
           .L0CFGLOOPBACKACK                (l0_cfg_loopback_ack             ),
           .L0RXMACLINKERROR                (l0_rx_mac_link_error            ),
           .L0MACLINKUP                     (l0_mac_link_up                  ),
           .L0MACNEGOTIATEDLINKWIDTH        (l0_mac_negotiated_link_width    ),
           .L0MACLINKTRAINING               (l0_mac_link_training            ),
           .L0LTSSMSTATE                    (l0_ltssm_state_i                ),
           .L0DLLVCSTATUS                   (),
           .L0DLUPDOWN                      (l0_dl_up_down                   ),
           .L0DLLERRORVECTOR                (l0_dll_error_vector             ),
           .L0COMPLETERID                   (l0_completer_id                 ),
           .L0UNLOCKRECEIVED                (),
           .L0MSIENABLE0                    (l0_msi_enable0                  ),
           .L0MULTIMSGEN0                   (l0_multi_msg_en0                ),
           .L0STATSDLLPRECEIVED             (l0_stats_dllp_received          ),
           .L0STATSDLLPTRANSMITTED          (l0_stats_dllp_transmitted       ),
           .L0STATSOSRECEIVED               (l0_stats_os_received            ),
           .L0STATSOSTRANSMITTED            (l0_stats_os_transmitted         ),
           .L0STATSTLPRECEIVED              (l0_stats_tlp_received           ),
           .L0STATSTLPTRANSMITTED           (l0_stats_tlp_transmitted        ),
           .L0STATSCFGRECEIVED              (l0_stats_cfg_received           ),
           .L0STATSCFGTRANSMITTED           (l0_stats_cfg_transmitted        ),
           .L0STATSCFGOTHERRECEIVED         (l0_stats_cfg_other_received     ),
           .L0STATSCFGOTHERTRANSMITTED      (l0_stats_cfg_other_transmitted  ),
 
           .MAXPAYLOADSIZE                  (maxpayloadsize_i                ),
           .MAXREADREQUESTSIZE              (maxreadrequestsize_i            ),
           .IOSPACEENABLE                   (io_space_enable                 ),
           .MEMSPACEENABLE                  (mem_space_enable                ),
 
           .L0PWRSTATE0                     (l0_pwr_state0                   ),
           .L0PMEACK                        (),
           .L0PMEREQOUT                     (),
           .L0PMEEN                         (),
           .L0PWRL1STATE                    (),
           .L0PWRL23READYSTATE              (l0_pwr_l23_ready_state          ),
           .L0PWRTXL0SSTATE                 (l0_pwr_tx_l0s_state             ),
           .L0PWRTURNOFFREQ                 (l0_pwr_turn_off_req),
           .L0RXDLLPM                       (),
           .L0RXDLLPMTYPE                   (),
           .L0MACNEWSTATEACK                (l0_mac_new_state_ack             ),
           .L0MACRXL0SSTATE                 (l0_mac_rx_l0s_state              ),
           .L0MACENTEREDL0                  (l0_mac_entered_l0                ),
           .L0DLLRXACKOUTSTANDING           (),
           .L0DLLTXOUTSTANDING              (),
           .L0DLLTXNONFCOUTSTANDING         (),
           .BUSMASTERENABLE                 (bus_master_enable               ),
           .PARITYERRORRESPONSE             (parity_error_response           ),
           .SERRENABLE                      (serr_enable                     ),
           .INTERRUPTDISABLE                (interrupt_disable               ),
           .URREPORTINGENABLE               (ur_reporting_enable             )
     );


     assign mem_user_clk = (CLKDIVIDED == "FALSE") ? crm_core_clk : crm_user_clk;
     assign max_payload_size      = maxpayloadsize_i;
     assign max_read_request_size = maxreadrequestsize_i;
     
     
     pcie_mim_wrapper #
     (
           .RETRYRAMWRITELATENCY    (RETRYRAMWRITELATENCY ),    
           .RETRYRAMREADLATENCY     (RETRYRAMREADLATENCY  ),    
           .RETRYRAMSIZE            (RETRYRAMSIZE_CALC),
           .RETRYREADDATAPIPE       (0                    ),
     
           .TLRAMWRITELATENCY       (TLRAMWRITELATENCY    ),    
           .TLRAMREADLATENCY        (TLRAMREADLATENCY     ),    
           .TL_TX_SIZE              (TL_TX_SIZE),
           .TXREADDATAPIPE          (0                    ),  
     
           .RXREADDATAPIPE          (0                    ),
           .TL_RX_SIZE              (TL_RX_SIZE)
     )
     
     pcie_mim_wrapper_i   
     (
           .mim_dll_bwadd     (mim_dll_bwadd   ),
           .mim_dll_bwen      (mim_dll_bwen    ),
           .mim_dll_bren      (mim_dll_bren    ),
           .mim_dll_bwdata    (mim_dll_bwdata  ),
           .mim_dll_bradd     (mim_dll_bradd   ),
           .mim_dll_brdata    (mim_dll_brdata  ),
           .mim_dll_bclk      (crm_core_clk    ),
     
           .mim_tx_bwadd      (mim_tx_bwadd    ),
           .mim_tx_bwen       (mim_tx_bwen     ),
           .mim_tx_bren       (mim_tx_bren     ),
           .mim_tx_bwdata     (mim_tx_bwdata   ),
           .mim_tx_bradd      (mim_tx_bradd    ),
           .mim_tx_brdata     (mim_tx_brdata   ),
           .mim_tx_brclk      (crm_core_clk    ),
           .mim_tx_bwclk      (mem_user_clk    ),
          
           .mim_rx_bwadd      (mim_rx_bwadd    ),
           .mim_rx_bwen       (mim_rx_bwen     ),
           .mim_rx_bren       (mim_rx_bren     ),
           .mim_rx_bwdata     (mim_rx_bwdata   ),
           .mim_rx_bradd      (mim_rx_bradd    ),
           .mim_rx_brdata     (mim_rx_brdata   ),
           .mim_rx_bwclk      (crm_core_clk    ),
           .mim_rx_brclk      (mem_user_clk    )
           
     );

      assign   {pipe_rx_elec_idle_l7, pipe_rx_elec_idle_l6,
                pipe_rx_elec_idle_l5, pipe_rx_elec_idle_l4,
                pipe_rx_elec_idle_l3, pipe_rx_elec_idle_l2,
                pipe_rx_elec_idle_l1, pipe_rx_elec_idle_l0}         =  pipe_rx_elec_idle; 

      assign   {pipe_rx_status_l7, pipe_rx_status_l6, 
                pipe_rx_status_l5, pipe_rx_status_l4,
                pipe_rx_status_l3, pipe_rx_status_l2,
                pipe_rx_status_l1, pipe_rx_status_l0}               =  pipe_rx_status; 

      assign   {pipe_rx_data_k_l7, pipe_rx_data_k_l6,
                pipe_rx_data_k_l5, pipe_rx_data_k_l4,
                pipe_rx_data_k_l3, pipe_rx_data_k_l2,
                pipe_rx_data_k_l1, pipe_rx_data_k_l0}               =  pipe_rx_data_k;   

      assign   {pipe_rx_phy_status_l7, pipe_rx_phy_status_l6,
                pipe_rx_phy_status_l5, pipe_rx_phy_status_l4,
                pipe_rx_phy_status_l3, pipe_rx_phy_status_l2,
                pipe_rx_phy_status_l1, pipe_rx_phy_status_l0}       =  pipe_rx_phy_status; 

      assign   {pipe_rx_data_l7, pipe_rx_data_l6,
                pipe_rx_data_l5, pipe_rx_data_l4,
                pipe_rx_data_l3, pipe_rx_data_l2,
                pipe_rx_data_l1, pipe_rx_data_l0}                   =  pipe_rx_data;

      assign   {pipe_rx_valid_l7, pipe_rx_valid_l6,
                pipe_rx_valid_l5, pipe_rx_valid_l4,
                pipe_rx_valid_l3, pipe_rx_valid_l2,
                pipe_rx_valid_l1, pipe_rx_valid_l0}                 =  pipe_rx_valid;
                           
      assign   {pipe_rxchanisaligned_l7, pipe_rxchanisaligned_l6,
                pipe_rxchanisaligned_l5, pipe_rxchanisaligned_l4,
                pipe_rxchanisaligned_l3, pipe_rxchanisaligned_l2,
                pipe_rxchanisaligned_l1, pipe_rxchanisaligned_l0}   =  pipe_rxchanisaligned;
                            
      
      assign    pipe_tx_data                                        = {pipe_tx_data_l7, pipe_tx_data_l6,
                                                                       pipe_tx_data_l5, pipe_tx_data_l4,
                                                                       pipe_tx_data_l3, pipe_tx_data_l2,
                                                                       pipe_tx_data_l1, pipe_tx_data_l0};
        
      assign    pipe_tx_data_k                                      = {pipe_tx_data_k_l7, pipe_tx_data_k_l6,
                                                                       pipe_tx_data_k_l5, pipe_tx_data_k_l4,
                                                                       pipe_tx_data_k_l3, pipe_tx_data_k_l2,
                                                                       pipe_tx_data_k_l1, pipe_tx_data_k_l0};
      
      assign    pipe_tx_elec_idle                                   = {pipe_tx_elec_idle_l7, pipe_tx_elec_idle_l6,
                                                                       pipe_tx_elec_idle_l5, pipe_tx_elec_idle_l4,
                                                                       pipe_tx_elec_idle_l3, pipe_tx_elec_idle_l2,
                                                                       pipe_tx_elec_idle_l1, pipe_tx_elec_idle_l0};
   
      assign pipe_tx_detect_rx_loopback                             = {pipe_tx_detect_rx_loopback_l7, pipe_tx_detect_rx_loopback_l6,
                                                                       pipe_tx_detect_rx_loopback_l5, pipe_tx_detect_rx_loopback_l4,
                                                                       pipe_tx_detect_rx_loopback_l3, pipe_tx_detect_rx_loopback_l2,
                                                                       pipe_tx_detect_rx_loopback_l1, pipe_tx_detect_rx_loopback_l0};
      
      assign pipe_tx_compliance                                     = {pipe_tx_compliance_l7, pipe_tx_compliance_l6,
                                                                       pipe_tx_compliance_l5, pipe_tx_compliance_l4,
                                                                       pipe_tx_compliance_l3, pipe_tx_compliance_l2,
                                                                       pipe_tx_compliance_l1, pipe_tx_compliance_l0};
   
      assign pipe_rx_polarity                                       = {pipe_rx_polarity_l7, pipe_rx_polarity_l6,
                                                                       pipe_rx_polarity_l5, pipe_rx_polarity_l4,
                                                                       pipe_rx_polarity_l3, pipe_rx_polarity_l2,
                                                                       pipe_rx_polarity_l1, pipe_rx_polarity_l0};
   
      assign pipe_power_down                                        = {pipe_power_down_l7, pipe_power_down_l6,
                                                                       pipe_power_down_l5, pipe_power_down_l4,
                                                                       pipe_power_down_l3, pipe_power_down_l2,
                                                                       pipe_power_down_l1, pipe_power_down_l0};
     
      assign pipe_deskew_lanes                                      = {pipe_deskew_lanes_l7, pipe_deskew_lanes_l6,
                                                                       pipe_deskew_lanes_l5, pipe_deskew_lanes_l4,
                                                                       pipe_deskew_lanes_l3, pipe_deskew_lanes_l2,
                                                                       pipe_deskew_lanes_l1, pipe_deskew_lanes_l0};

   
      assign pipe_reset                                             = {pipe_reset_l7, pipe_reset_l6,
                                                                       pipe_reset_l5, pipe_reset_l4,
                                                                       pipe_reset_l3, pipe_reset_l2,
                                                                       pipe_reset_l1, pipe_reset_l0};
   


        genvar k;
        generate
        for (k=0 ; k < NO_OF_LANES ; k= k+1)
        begin:flop

            FD tx_data_0             ( .Q (pipe_tx_data_reg[8*k+0]),    .D (pipe_tx_data[8*k+0]),     .C(crm_core_clk));
            FD tx_data_1             ( .Q (pipe_tx_data_reg[8*k+1]),    .D (pipe_tx_data[8*k+1]),     .C(crm_core_clk));
            FD tx_data_2             ( .Q (pipe_tx_data_reg[8*k+2]),    .D (pipe_tx_data[8*k+2]),     .C(crm_core_clk));
            FD tx_data_3             ( .Q (pipe_tx_data_reg[8*k+3]),    .D (pipe_tx_data[8*k+3]),     .C(crm_core_clk));
            FD tx_data_4             ( .Q (pipe_tx_data_reg[8*k+4]),    .D (pipe_tx_data[8*k+4]),     .C(crm_core_clk));
            FD tx_data_5             ( .Q (pipe_tx_data_reg[8*k+5]),    .D (pipe_tx_data[8*k+5]),     .C(crm_core_clk));
            FD tx_data_6             ( .Q (pipe_tx_data_reg[8*k+6]),    .D (pipe_tx_data[8*k+6]),     .C(crm_core_clk));
            FD tx_data_7             ( .Q (pipe_tx_data_reg[8*k+7]),    .D (pipe_tx_data[8*k+7]),     .C(crm_core_clk));

            FD tx_data_k             ( .Q (pipe_tx_data_k_reg[k]),    .D (pipe_tx_data_k[k]),     .C(crm_core_clk));
            FD tx_elec_idle          ( .Q (pipe_tx_elec_idle_reg[k]), .D (pipe_tx_elec_idle[k]),  .C(crm_core_clk));

            FD tx_detect_rx_loopback ( .Q (pipe_tx_detect_rx_loopback_reg[k]), .D (pipe_tx_detect_rx_loopback[k]),  .C(crm_core_clk));

            FD tx_compliance         ( .Q (pipe_tx_compliance_reg[k]),  .D (pipe_tx_compliance[k]),  .C(crm_core_clk));
            FD power_down_0          ( .Q (pipe_power_down_reg[2*k+0]), .D (pipe_power_down[2*k+0]), .C(crm_core_clk));
            FD power_down_1          ( .Q (pipe_power_down_reg[2*k+1]), .D (pipe_power_down[2*k+1]), .C(crm_core_clk));

            FD rx_polarity           ( .Q (pipe_rx_polarity_reg[k]),   .D (pipe_rx_polarity[k]),    .C(crm_core_clk));
            FD reset                 ( .Q (pipe_reset_reg[k]),         .D (pipe_reset[k]),    .C(crm_core_clk));

            FD rx_data_0             ( .Q (pipe_rx_data[8*k+0]),    .D (pipe_rx_data_reg[8*k+0]),     .C(crm_core_clk));
            FD rx_data_1             ( .Q (pipe_rx_data[8*k+1]),    .D (pipe_rx_data_reg[8*k+1]),     .C(crm_core_clk));
            FD rx_data_2             ( .Q (pipe_rx_data[8*k+2]),    .D (pipe_rx_data_reg[8*k+2]),     .C(crm_core_clk));
            FD rx_data_3             ( .Q (pipe_rx_data[8*k+3]),    .D (pipe_rx_data_reg[8*k+3]),     .C(crm_core_clk));
            FD rx_data_4             ( .Q (pipe_rx_data[8*k+4]),    .D (pipe_rx_data_reg[8*k+4]),     .C(crm_core_clk));
            FD rx_data_5             ( .Q (pipe_rx_data[8*k+5]),    .D (pipe_rx_data_reg[8*k+5]),     .C(crm_core_clk));
            FD rx_data_6             ( .Q (pipe_rx_data[8*k+6]),    .D (pipe_rx_data_reg[8*k+6]),     .C(crm_core_clk));
            FD rx_data_7             ( .Q (pipe_rx_data[8*k+7]),    .D (pipe_rx_data_reg[8*k+7]),     .C(crm_core_clk));

            FD rx_data_k             ( .Q (pipe_rx_data_k[k]),    .D (pipe_rx_data_k_reg[k]),     .C(crm_core_clk));
            FD rx_elec_idle          ( .Q (pipe_rx_elec_idle[k]), .D (pipe_rx_elec_idle_reg[k]),  .C(crm_core_clk));
            FD rx_valid              ( .Q (pipe_rx_valid[k]),     .D (pipe_rx_valid_reg[k]),      .C(crm_core_clk));

            FD rx_phy_status         ( .Q (pipe_rx_phy_status[k]),     .D (pipe_rx_phy_status_reg[k]),      .C(crm_core_clk));
            FD rxchanisaligned       ( .Q (pipe_rxchanisaligned[k]),   .D (pipe_rxchanisaligned_reg[k]),    .C(crm_core_clk));

            FD rx_status_0           ( .Q (pipe_rx_status[3*k+0]),     .D (pipe_rx_status_reg[3*k+0]),      .C(crm_core_clk));
            FD rx_status_1           ( .Q (pipe_rx_status[3*k+1]),     .D (pipe_rx_status_reg[3*k+1]),      .C(crm_core_clk));
            FD rx_status_2           ( .Q (pipe_rx_status[3*k+2]),     .D (pipe_rx_status_reg[3*k+2]),      .C(crm_core_clk));

        end
        endgenerate

        genvar i;
        generate
        for (i=NO_OF_LANES; i < 8; i=i+1) 
        begin: tied_off   
            assign pipe_tx_data_reg[8*i+7:8*i+0]          = 8'b0;
            assign pipe_tx_data_k_reg[i]                  = 1'b0;
            assign pipe_tx_elec_idle_reg[i]               = 1'b1;
            assign pipe_tx_detect_rx_loopback_reg[i]      = 1'b0;
            assign pipe_tx_compliance_reg[i]              = 1'b0;
            assign pipe_power_down_reg[2*i+1:2*i+0]       = 2'b0;
            assign pipe_reset_reg[i]                      = 1'b0;
            assign pipe_rx_polarity_reg[i]                = 1'b0;
            
            assign pipe_rx_data[8*i+7:8*i+0]            =   8'b0;   
            assign pipe_rx_data_k[i]                    =   1'b0;    
            assign pipe_rx_valid[i]                     =   1'b0;   
            assign pipe_rx_elec_idle[i]                 =   1'b1;
            assign pipe_rx_status[3*i+2:3*i]            =   3'b0;   
            assign pipe_rx_phy_status[i]                =   1'b0;
            assign pipe_rxchanisaligned[i]              =   1'b0;
        end
        endgenerate    
        
        
       pcie_gt_wrapper#
        (
              .NO_OF_LANES      (NO_OF_LANES   ),
              .SIM              (G_SIM         ),
              .PLL_DIVSEL_REF   (PLL_DIVSEL_REF),
              .PLL_DIVSEL_FB    (PLL_DIVSEL_FB ),
              .CLK25_DIVIDER    (CLK25_DIVIDER )
        )

        pcie_gt_wrapper_i 
        (
              .gt_rx_elec_idle         (pipe_rx_elec_idle_reg),
              .gt_rx_status            (pipe_rx_status_reg),
              .gt_rx_data              (pipe_rx_data_reg),
              .gt_rx_phy_status        (pipe_rx_phy_status_reg),
              .gt_rx_data_k            (pipe_rx_data_k_reg),
              .gt_rx_valid             (pipe_rx_valid_reg),
              .gt_rxchanisaligned      (pipe_rxchanisaligned_reg),
              
              .gt_rx_n                 (RXN                   ),     
              .gt_rx_p                 (RXP                   ),     
              .gt_tx_n                 (TXN                   ),     
              .gt_tx_p                 (TXP                   ),    
              
              .gt_tx_data              (pipe_tx_data_reg      ),
              .gt_tx_data_k            (pipe_tx_data_k_reg    ),
              .gt_tx_elec_idle         (pipe_tx_elec_idle_reg ),
              .gt_tx_detect_rx_loopback(pipe_tx_detect_rx_loopback_reg),
              .gt_tx_compliance        (pipe_tx_compliance_reg),
              .gt_rx_polarity          (pipe_rx_polarity_reg  ),
              .gt_power_down           (pipe_power_down_reg   ),
              
              .gt_deskew_lanes         (pipe_deskew_lanes     ),
              .gt_pipe_reset           (pipe_reset_reg        ),
              .gt_rx_present           (gt_rx_present         ),

              .gsr                     (gsr                   ),
              .gtpreset                (gtpreset              ),
              .refclk                  (refclk                ),
              .refclkout_bufg          (refclkout_bufg        ),
              .gtpclk_bufg             (gtpclk_bufg           ), 
              .plllkdet_out            (plllkdet_out          ),
              .resetdone               (resetdone             ),
              .pclk                    (crm_core_clk          ),
              .rxbyteisaligned         (rxbyteisaligned       ), 
              .rxchanbondseq           (rxchanbondseq         ), 
              
              // GTP register ports
              .gt_dclk                 (gt_dclk               ),
              .gt_daddr                (gt_daddr              ),
              .gt_den                  (gt_den                ),
              .gt_dwen                 (gt_dwen               ),
              .gt_di                   (gt_di                 ),
              .gt_do                   (gt_do                 ),
              .gt_drdy                 (gt_drdy               )
        );

/*
    assign debug[7:0]    = pipe_tx_data[7:0];
    assign debug[8]      = pipe_tx_detect_rx_loopback[0];
    assign debug[10:9]   = pipe_power_down[1:0];
    assign debug[18:11]  = pipe_rx_data[7:0];
    assign debug[19]     = pipe_tx_elec_idle[0];
    assign debug[20]     = pipe_rx_elec_idle[0];
    assign debug[23:21]  = pipe_rx_status[2:0];
    assign debug[24]     = pipe_rx_phy_status[0];
    assign debug[25]     = pipe_rxchanisaligned[0];

    assign debug[26]     = pipe_tx_elec_idle[1];
    assign debug[27]     = pipe_rx_elec_idle[1];
    assign debug[30:28]  = pipe_rx_status[5:3];
    assign debug[31]     = pipe_rx_phy_status[1];
    assign debug[32]     = pipe_rxchanisaligned[1];

    assign debug[33]     = pipe_tx_elec_idle[2];
    assign debug[34]     = pipe_rx_elec_idle[2];
    assign debug[37:35]  = pipe_rx_status[8:6];
    assign debug[38]     = pipe_rx_phy_status[2];
    assign debug[39]     = pipe_rxchanisaligned[2];

    assign debug[40]     = pipe_tx_elec_idle[3];
    assign debug[41]     = pipe_rx_elec_idle[3];
    assign debug[44:42]  = pipe_rx_status[11:9];
    assign debug[45]     = pipe_rx_phy_status[3];
    assign debug[46]     = pipe_rxchanisaligned[3];

    assign debug[47]     = pipe_tx_elec_idle[4];
    assign debug[48]     = pipe_rx_elec_idle[4];
    assign debug[51:49]  = pipe_rx_status[14:12];
    assign debug[52]     = pipe_rx_phy_status[4];
    assign debug[53]     = pipe_rxchanisaligned[4];


    assign debug[54]     = pipe_tx_elec_idle[5];
    assign debug[55]     = pipe_rx_elec_idle[5];
    assign debug[58:56]  = pipe_rx_status[17:15];
    assign debug[59]     = pipe_rx_phy_status[5];
    assign debug[60]     = pipe_rxchanisaligned[5];

    assign debug[61]     = pipe_tx_elec_idle[6];
    assign debug[62]     = pipe_rx_elec_idle[6];
    assign debug[65:63]  = pipe_rx_status[20:18];
    assign debug[66]     = pipe_rx_phy_status[6];
    assign debug[67]     = pipe_rxchanisaligned[6];

    assign debug[68]     = pipe_tx_elec_idle[7];
    assign debug[69]     = pipe_rx_elec_idle[7];
    assign debug[72:70]  = pipe_rx_status[23:21];
    assign debug[73]     = pipe_rx_phy_status[7];
    assign debug[74]     = pipe_rxchanisaligned[7];
    
    assign debug[82:75]  = pipe_rx_data[15:8];
    assign debug[90:83]  = pipe_rx_data[23:16];
    assign debug[98:91]  = pipe_rx_data[32:24];
    
    assign debug[99]     = rxchanbondseq[0];
    assign debug[100]    = rxchanbondseq[1];
    assign debug[101]    = rxchanbondseq[2];
    assign debug[102]    = rxchanbondseq[3];
    
    assign debug[103]    = rxbyteisaligned[0];
    assign debug[104]    = rxbyteisaligned[1];
    assign debug[105]    = rxbyteisaligned[2];
    assign debug[106]    = rxbyteisaligned[3];*/

//synthesis translate_off
    initial begin
        wait (clock_lock == 1'b1)
            $display ("%d", $time, ": FE CLOCK_LOCK asserted");
        
        wait (user_reset_n == 1'b1)
            $display ("%d", $time, ": FE RESET_N deasserted");    
        
        wait (pipe_reset[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b0}}) 
            $display ("%d", $time, ": FE PIPE_RESET deasserted");
        
        wait (resetdone[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b1}}) 
            $display ("%d", $time, ": FE RESETDONE asserted");

        wait (pipe_rx_phy_status[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b0}}) 
            $display ("%d", $time, ": FE PHYSTATUS low");

        wait (pipe_tx_detect_rx_loopback[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b1}}) 
            $display ("%d", $time, ": FE TXDETECTRX asserted");

        wait (pipe_tx_elec_idle[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b0}}) 
            $display ("%d", $time, ": FE TXELECIDLE deasserted");

        wait (TXN[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b0}} || TXN[NO_OF_LANES-1:0] == {NO_OF_LANES{1'b1}}) 
            $display ("%d", $time, ": FE Started transmission");
    end
    
    always @(l0_mac_link_up) begin
        if (l0_mac_link_up == 1'b1) begin
            $display("%d", $time, ": FE LINK is up");
        end
        else if ((l0_mac_link_up == 1'b0) & (user_reset_n == 1)) begin
            $display("%d", $time, ": FE LINK is down ");
        end
    end
//synthesis translate_on

endmodule
