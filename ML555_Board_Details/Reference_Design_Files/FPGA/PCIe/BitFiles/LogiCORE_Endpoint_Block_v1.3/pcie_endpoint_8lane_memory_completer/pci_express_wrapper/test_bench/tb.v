//------------------------------------------------------------------------------
//
// Copyright (C) 2006, Xilinx, Inc. All Rights Reserved.
//
// This file is owned and controlled by Xilinx and must be used solely
// for design, simulation, implementation and creation of design files
// limited to Xilinx devices or technologies. Use with non-Xilinx
// devices or technologies is expressly prohibited and immediately
// terminates your license.
//
// Xilinx products are not intended for use in life support
// appliances, devices, or systems. Use in such applications is
// expressly prohibited.
//
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 1.3
//  \   \         Application : Generated by Xilinx PCI Express Wizard
//  /   /         Filename    : tb.v
// /___/   /\     Module      : tb
// \   \  /  \
//  \___\/\___\
//
//------------------------------------------------------------------------------
 `include "tb_def.v"

module tb;


     parameter integer CORE_CLK_PERIOD = 4;
     parameter integer USER_CLK_PERIOD = 8;
     
     // Inputs
     reg rst_n;
     reg clk;
     
parameter integer REFCLKFREQ = 100;
parameter integer NO_OF_LANES = 8;
     
     
     parameter integer CLKRATIO = 2;
     parameter         CLKDIVIDED = "TRUE";
     
     parameter integer G_SIM = 1;
     parameter integer G_USER_RESETS = 0;
     parameter integer G_USE_DCM = 0;
     
     
     
     parameter         G_TC_NUMBER = 0;
     
     `define TESTNAME "pcie_tb_endpoint"

     // to change maxpayload size and max read request size on  NE and FE change the following tick defines
`define MAXPAYLOAD 128 // choose 128, 256, 512, 1024, 2048, or 4096
     
     
      localparam integer L_MAX_PAYLOAD_SIZE = `MAXPAYLOAD/4;
      localparam integer L_MAX_PAYLOAD_BITS =  (`MAXPAYLOAD == 4096) ? 3'b101 :
                                               ((`MAXPAYLOAD == 2048) ? 3'b100 :
                                               ((`MAXPAYLOAD == 1024) ? 3'b011 :
                                               ((`MAXPAYLOAD == 512) ? 3'b010 :
                                               ((`MAXPAYLOAD == 256) ? 3'b001 :
                                               3'b000))));
     
     
     
      parameter real     REF_CLK_PERIOD =    (REFCLKFREQ == 100) ? 10: 
                                             (REFCLKFREQ == 125) ? 8: 
                                             (REFCLKFREQ == 250) ? 4: 10;
                                         
                                         
     integer errors         = 0;
     integer test_invalid   = 0;
     integer verbose        = 0;
     
     reg   [32:0]       tx_data_buffer[0:`BUFFER_DEPTH-1]; 
     reg   [32:0]       rx_data_buffer[0:`BUFFER_DEPTH-1]; 
     reg   [32:0]       expected_data_buffer[0:`BUFFER_DEPTH-1]; 
     reg   [31:0]       tx_data_to_send [0:`BUFFER_DEPTH-1];
     reg   [31:0]       expected_data [0:`BUFFER_DEPTH-1];
     
     reg   [11:0]       capabilities[0:255];  
     reg   [11:0]       enhanced_capabilities[0:255];  

     reg   [15:0]       requester_id = {16{1'b0}}; 
     wire  [15:0]       completer_id;

     reg   [7:0]        bus_number = 8'b0;
     reg   [31:0]       length;
     reg   [3:0]        first_be, last_be;
     reg   [11:0]       byte_count;
     reg   [31:0]       dword;
     reg   [31:0]       expected_dword;

     integer            j;
     integer            m;
     integer            init_count;
     integer            I;

     
     wire   [31:0]     data_vec [15:0];
     wire              link_up_fe;
     wire              clk_lock_fe;
     wire              clk_lock_ne;
     wire              core_clk_ne;
     wire              user_clk_ne;
     

     // Some test data
     assign data_vec[0] = 32'h12121212;
     assign data_vec[1] = 32'h34343434;
     assign data_vec[2] = 32'h56565656;
     assign data_vec[3] = 32'h78787878;
     assign data_vec[4] = 32'h89898989;
     assign data_vec[5] = 32'h99999999;
     assign data_vec[6] = 32'h11911119;
     assign data_vec[7] = 32'h12911129;
     assign data_vec[8] = 32'h13911139;
     assign data_vec[9] = 32'h14911149;
     assign data_vec[10] = 32'h15911159;
     assign data_vec[11] = 32'h16911169;
     assign data_vec[12] = 32'h17911179;
     assign data_vec[13] = 32'h18911189;
     assign data_vec[14] = 32'h19911199;
     assign data_vec[15] = 32'h21911219;

     integer ne_transmitted_packets_p  = 0;
     integer ne_transmitted_packets_np = 0;
     integer ne_transmitted_packets_c  = 0;

    
  
     wire [NO_OF_LANES-1 :0] RXN_A; 
     wire [NO_OF_LANES-1 :0] RXP_A; 
     wire [NO_OF_LANES-1 :0] TXN_A; 
     wire [NO_OF_LANES-1 :0] TXP_A; 
     
     reg   [63:0]       llk_tx_data;                            // input  
     reg                llk_tx_src_rdy_n;                       // input  
     reg                llk_tx_sof_n;                           // input  
     reg                llk_tx_eof_n;                           // input  
     reg                llk_tx_sop_n;                           // input  
     reg                llk_tx_eop_n;                           // input  
     reg   [1:0]        llk_tx_enable_n;                        // input  
     reg   [2:0]        llk_tx_ch_tc;                           // input  
     reg   [1:0]        llk_tx_ch_fifo;                         // input  
     
     wire               llk_tx_dst_rdy_n;                       // output 
     wire  [9:0]        llk_tx_chan_space;                      // output 
     wire  [7:0]        llk_tx_ch_posted_ready_n;               // output 
     wire  [7:0]        llk_tx_ch_non_posted_ready_n;           // output 
     wire  [7:0]        llk_tx_ch_completion_ready_n;           // output 
     wire               llk_tx_ch_config_ready_n;               // output 
                                                                //
     reg                llk_rx_dst_req_n;                       // input  
     reg   [2:0]        llk_rx_ch_tc;                           // input  
     reg   [1:0]        llk_rx_ch_fifo;                         // input  
     
     wire  [7:0]        llk_tc_status;                          // output 
     wire  [63:0]       llk_rx_data;                            // output 
     wire               llk_rx_src_rdy_n;                       // output 
     wire               llk_rx_src_last_req_n;                  // output 
     wire               llk_rx_sof_n;                           // output 
     wire               llk_rx_eof_n;                           // output 
     wire               llk_rx_sop_n;                           // output 
     wire               llk_rx_eop_n;                           // output 
     wire  [1:0]        llk_rx_valid_n;                         // output 
     wire  [7:0]        llk_rx_ch_posted_available_n;           // output 
     wire  [7:0]        llk_rx_ch_non_posted_available_n;       // output 
     wire  [7:0]        llk_rx_ch_completion_available_n;       // output 
     wire               llk_rx_ch_config_available_n;           // output 
     
     
     assign completer_id = tb.mem_ep_app_top_i.completer_id;
     
     mem_ep_app_top #
     (
        .G_NO_OF_LANES(NO_OF_LANES),
        .G_SIM        (1          ),
        .G_USE_DCM    (0          ),
        .G_USER_RESETS(0          ),
        .G_CHIPSCOPE  (0          ),
        .G_ADV_DEBUG  (0          ),
        .G_MAXPAYLOADSIZE(L_MAX_PAYLOAD_BITS),
        .G_TC_NUMBER  (G_TC_NUMBER),
        .G_REFCLKFREQ (REFCLKFREQ )
        
     )
     mem_ep_app_top_i
     (
        // clock and reset related inputs
        .REFCLK_N   (clk       ),
        .REFCLK_P   (~clk      ),
        .RST_N      (rst_n     ),
        .GTPRESET_N (1'b1      ), 
         
        .TXN        (RXN_A     ),
        .TXP        (RXP_A     ),
        .RXN        (TXN_A     ),
        .RXP        (TXP_A     ),
        .LINKUP     (link_up_fe),
        .TXCLKOUT   (),
        .REFCLKOUT  (), 
        .CLKLOCK    (clk_lock_fe),
        .PLLLKDETOUT(),
        .CORECLK    (),
        .USERCLK    ()
     );
     


     pcie_top_ne
     #(
     
         .G_SIM(G_SIM),
         .G_USER_RESETS(G_USER_RESETS),
         .G_USE_DCM(G_USE_DCM),
     
        // integer: 100 for 100MHz Refclk, 125 for 125MHz Refclk,250 for 250MHz Refclk,
        // ------------------------------------------------------
        .REFCLKFREQ(REFCLKFREQ),
     
        // integer: 0 for PCI Express Endpoint, 1 for Legacy PCI Express Endpoint
        // ------------------------------------------------------
        .COMPONENTTYPE(0),
     
        // integer: 1 for x1 lane, 2 for x2 lanes, 4 for x4 lanes, 8 for x8 lanes
        // ------------------------------------------------------
        .NO_OF_LANES(NO_OF_LANES),
     
        // integer: 1 for 1/1 ratio, 2 for 1/2 ratio, 4 for 1/4 ratio
        // ------------------------------------------------------
        .CLKRATIO(CLKRATIO),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .CLKDIVIDED(CLKDIVIDED),
     
        // 16 bit hex: 10EE for xilinx
        // ------------------------------------------------------
        .VENDORID(16'h10EE),
     
        // 16 bit hex:
        // ------------------------------------------------------
        .DEVICEID(16'h5050),
     
        // 8 bit hex:
        // ------------------------------------------------------
        .REVISIONID(8'h00),
     
        // 16 bit hex:
        // ------------------------------------------------------
        .SUBSYSTEMVENDORID(16'h10EE),
     
        // 16 bit hex:
        // ------------------------------------------------------
        .SUBSYSTEMID(16'h5050),
     
        // 24 bit hex:
        // ------------------------------------------------------
        .CLASSCODE(24'h058000),
     
        // 32 bit hex:
        // ------------------------------------------------------
        .CARDBUSCISPOINTER(32'h00000000),
     
        // integer: 0 for NONE, 1 for INTA, 2 for INTB, 3 for INTC, 4 for INTD
        // ------------------------------------------------------
        .INTERRUPTPIN(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR0EXIST("TRUE"),
     
        // integer: 0 for MEMORY, 1 for I/O
        // ------------------------------------------------------
        .BAR0IOMEMN(0),
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .BAR064(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR0PREFETCHABLE("FALSE"),
     
        // integer:
        // ------------------------------------------------------
        .BAR0MASKWIDTH(20),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR1EXIST("FALSE"),
     
        // integer: 0 for MEMORY, 1 for I/O
        // ------------------------------------------------------
        .BAR1IOMEMN(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR1PREFETCHABLE("FALSE"),
     
        // integer:
        // ------------------------------------------------------
        .BAR1MASKWIDTH(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR2EXIST("FALSE"),
     
        // integer: 0 for MEMORY, 1 for I/O
        // ------------------------------------------------------
        .BAR2IOMEMN(0),
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .BAR264(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR2PREFETCHABLE("FALSE"),
     
        // integer:
        // ------------------------------------------------------
        .BAR2MASKWIDTH(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR3EXIST("FALSE"),
     
        // integer: 0 for MEMORY, 1 for I/O
        // ------------------------------------------------------
        .BAR3IOMEMN(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR3PREFETCHABLE("FALSE"),
     
        // integer:
        // ------------------------------------------------------
        .BAR3MASKWIDTH(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR4EXIST("FALSE"),
     
        // integer: 0 for MEMORY, 1 for I/O
        // ------------------------------------------------------
        .BAR4IOMEMN(0),
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .BAR464(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR4PREFETCHABLE("FALSE"),
     
        // integer:
        // ------------------------------------------------------
        .BAR4MASKWIDTH(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR5EXIST("FALSE"),
     
        // integer: 0 for MEMORY, 1 for I/O
        // ------------------------------------------------------
        .BAR5IOMEMN(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .BAR5PREFETCHABLE("FALSE"),
     
        // integer:
        // ------------------------------------------------------
        .BAR5MASKWIDTH(0),
     
        // integer: 0 for 128 bytes, 1 for 256 bytes, 2 for 512 bytes,
         //          3 for 1024 bytes, 4 for 2048 bytes, 5 for 4096 bytes
        // ------------------------------------------------------
        .MAXPAYLOADSIZE(L_MAX_PAYLOAD_BITS),
     
        // integer: 0 for max of 64ns, 1 for max of 128ns, 2 for max of 256ns, 3 for max of 512ns,
        //          4 for max of 1us, 5 for max of 2us, 6 for max of 4us, 7 for no limit
        // ------------------------------------------------------
        .DEVICECAPABILITYENDPOINTL0SLATENCY(0),
     
        // integer: 0 for max of 1us, 1 for max of 2us, 2 for max of 4us, 3 for max of 8us,
        //          4 for max of 16us, 5 for max of 32us, 6 for max of 64us, 7 for no limit
        // ------------------------------------------------------
        .DEVICECAPABILITYENDPOINTL1LATENCY(0),
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .LINKCAPABILITYASPMSUPPORTEN(1),
     
        // integer: 0 for less than 64ns, 1 for 64ns to 128ns, 2 for 128ns to 256ns, 3 for 256ns to 512ns,
        //          4 for 512ns to 1us, 5 for 1us to 2us, 6 for 2us to 4us, 7 for more than 4us
        // ------------------------------------------------------
        .L0SEXITLATENCY(7),
     
        // integer: 0 for less than 64ns, 1 for 64ns to 128ns, 2 for 128ns to 256ns, 3 for 256ns to 512ns,
        //          4 for 512ns to 1us, 5 for 1us to 2us, 6 for 2us to 4us, 7 for more than 4us
        // ------------------------------------------------------
        .L0SEXITLATENCYCOMCLK(7),
     
        // integer: 0 for less than 1us, 1 for 1us to 2us, 2 for 2us to 4us, 3 for 4us to 8us,
        //          4 for 8us to 16us, 5 for 16us to 32us, 6 for 32us to 64us, 7 for more than 64us
        // ------------------------------------------------------
        .L1EXITLATENCY(7),
     
        // integer: 0 for less than 1us, 1 for 1us to 2us, 2 for 2us to 4us, 3 for 4us to 8us,
        //          4 for 8us to 16us, 5 for 16us to 32us, 6 for 32us to 64us, 7 for more than 64us
        // ------------------------------------------------------
        .L1EXITLATENCYCOMCLK(7),
     
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .MSIENABLE(0), 
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .DSNENABLE(0), 
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .VCENABLE(0),
     
        // integer: 0 for 1 message, 1 for 2 messages, 2 for 4 messages
        // ------------------------------------------------------
        .MSICAPABILITYMULTIMSGCAP(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .PMCAPABILITYDSI("TRUE"),
     
        // integer: 0, 1
        // ------------------------------------------------------
        .PORTVCCAPABILITYEXTENDEDVCCOUNT(0),
     
        // integer: 0 for none, 1 for round robin, 2 for weighted round robin
        // ------------------------------------------------------
         .PORTVCCAPABILITYVCARBCAP(0),
     
        // integer: 0, 1
        // ------------------------------------------------------
        .LOWPRIORITYVCCOUNT(0),
     
        // 64 bit hex:
        // ------------------------------------------------------
        .DEVICESERIALNUMBER(64'hE000000001000A35),
     
        // integer: 0 for false, 1 for true
        // ------------------------------------------------------
        .FORCENOSCRAMBLING(0),
     
        // string: "TRUE" or "FALSE"
        // ------------------------------------------------------
        .LINKSTATUSSLOTCLOCKCONFIG("FALSE"),
     
        // integer: 0..255
        // ------------------------------------------------------
        .TXTSNFTS(255),
     
        // integer: 0..255
        // ------------------------------------------------------
        .TXTSNFTSCOMCLK(255),
     
        // integer: 9 for 4096 bytes, 10 for 8192 bytes, 11 for 16384 bytes,
         //          12 for 32768 bytes
        // ------------------------------------------------------
        .RETRYRAMSIZE(9),
     
        // integer:
        // ------------------------------------------------------
        .VC0RXFIFOSIZEP(1024),
     
        // integer:
        // ------------------------------------------------------
        .VC0RXFIFOSIZENP(192),
     
        // integer:
        // ------------------------------------------------------
        .VC0RXFIFOSIZEC(1024),
     
        // integer:
        // ------------------------------------------------------
        .VC1RXFIFOSIZEP(0),
     
        // integer:
        // ------------------------------------------------------
        .VC1RXFIFOSIZENP(0),
     
        // integer:
        // ------------------------------------------------------
        .VC1RXFIFOSIZEC(0),
     
        // integer:
        // ------------------------------------------------------
        .VC0TXFIFOSIZEP(1024),
     
        // integer:
        // ------------------------------------------------------
        .VC0TXFIFOSIZENP(192),
     
        // integer:
        // ------------------------------------------------------
        .VC0TXFIFOSIZEC(1024),
     
        // integer:
        // ------------------------------------------------------
        .VC1TXFIFOSIZEP(0),
     
        // integer:
        // ------------------------------------------------------
        .VC1TXFIFOSIZENP(0),
     
        // integer:
        // ------------------------------------------------------
        .VC1TXFIFOSIZEC(0)
     
     )
     pcie_ne_inst
     (
     
        // ------------------------------------------------------
        // Clock Management and Reset Interface
        // ------------------------------------------------------
     
         .user_reset_n           (rst_n      ),                     // I
     
         .core_clk               (core_clk_ne),                    // O
         .user_clk               (user_clk_ne),                    // O
         .clock_lock             (clk_lock_ne),                    // O
     
         .gsr                    (gsr),                            // I
     
         .crm_urst_n             (rst_n),                          // I
         .crm_nvrst_n            (rst_n),                          // I
         .crm_mgmt_rst_n         (rst_n),                          // I
         .crm_user_cfg_rst_n     (rst_n),                          // I
         .crm_mac_rst_n          (rst_n),                          // I
         .crm_link_rst_n         (rst_n),                          // I
     
         .compliance_avoid       (1'b0),                           // I
         .l0_cfg_loopback_master (1'b0),                           // I
         .l0_transactions_pending(1'b0),                           // I
     
         .l0_set_completer_abort_error(1'b0),                      // I
         .l0_set_detected_corr_error  (1'b0),                      // I
         .l0_set_detected_fatal_error (1'b0),                      // I
         .l0_set_detected_nonfatal_error   (1'b0),                 // I
         .l0_set_link_detected_parity_error(1'b0),                 // I
         .l0_set_link_master_data_parity   (1'b0),                 // I
         .l0_set_link_received_master_abort(1'b0),                 // I
         .l0_set_link_received_target_abort(1'b0),                 // I
         .l0_set_link_system_error         (1'b0),                 // I
         .l0_set_link_signalled_target_abort    (1'b0),            // I
         .l0_set_completion_timeout_uncorr_error(1'b0),            // I
         .l0_set_completion_timeout_corr_error  (1'b0),            // I
         .l0_set_unexpected_completion_uncorr_error (1'b0),        // I
         .l0_set_unexpected_completion_corr_error   (1'b0),        // I
         .l0_set_unsupported_request_nonposted_error(1'b0),        // I
         .l0_set_unsupported_request_other_error    (1'b0),        // I
         .l0_legacy_int_funct0 (1'b0),                             // I
         .l0_msi_request0      (4'b0),                             // I [3:0]
     
         .mgmt_wdata           (32'h00000000),                     // I [31:0]
         .mgmt_bwren           (4'hf),                             // I [3:0]
         .mgmt_wren            (1'b0),                             // I
         .mgmt_addr            (11'h000),                          // I [10:0]
         .mgmt_rden            (1'b0),                             // I
     
         .mgmt_stats_credit_sel(7'b0),                             // I [6:0]
     
         .crm_do_hot_reset_n   (),                                 // O
         .crm_pwr_soft_reset_n (),                                 // O
     
         .mgmt_rdata           (),                                 // O [31:0]
         .mgmt_pso             (),                                 // O [16:0]
         .mgmt_stats_credit    (),                                 // O [11:0]
     
         .l0_first_cfg_write_occurred(),                           // O
         .l0_cfg_loopback_ack  (),                                 // O
         .l0_rx_mac_link_error (),                                 // O [1:0]
         .l0_mac_link_up       (),                                 // O
         .l0_mac_negotiated_link_width(),                          // O [3:0]
         .l0_mac_link_training     (),                             // O
         .l0_ltssm_state           (),                             // O [3:0]
     
         .l0_mac_new_state_ack     (),                             // O
         .l0_mac_rx_l0s_state      (),                             // O
         .l0_mac_entered_l0        (),                             // O
     
         .l0_dl_up_down            (),                             // O [7:0]
         .l0_dll_error_vector      (),                             // O [6:0]
     
         .l0_completer_id          (),                             // O [12:0]
     
         .l0_msi_enable0           (),                             // O
         .l0_multi_msg_en0         (),                             // O [2:0]
         .l0_stats_dllp_received   (),                             // O
         .l0_stats_dllp_transmitted(),                             // O
         .l0_stats_os_received     (),                             // O
         .l0_stats_os_transmitted  (),                             // O
         .l0_stats_tlp_received    (),                             // O
         .l0_stats_tlp_transmitted (),                             // O
         .l0_stats_cfg_received    (),                             // O
         .l0_stats_cfg_transmitted (),                             // O
         .l0_stats_cfg_other_received   (),                        // O
         .l0_stats_cfg_other_transmitted(),                        // O
     
         .l0_pwr_state0            (),                             // O [1:0]
         .l0_pwr_l23_ready_state   (),                             // O
         .l0_pwr_tx_l0s_state      (),                             // O
         .l0_pwr_turn_off_req      (),                             // O
     
         .io_space_enable          (),                             // O
         .mem_space_enable         (),                             // O
         .bus_master_enable        (),                             // O
         .parity_error_response    (),                             // O
         .serr_enable              (),                             // O
         .interrupt_disable        (),                             // O
         .ur_reporting_enable      (),                             // O
     
        // ------------------------------------------------------
        // Local Link Interface
        // ------------------------------------------------------
     
       // TX ports
         .llk_tx_data      (llk_tx_data     ),                     // I [63:0]
         .llk_tx_src_rdy_n (llk_tx_src_rdy_n),                     // I
         .llk_tx_sof_n     (llk_tx_sof_n    ),                     // I
         .llk_tx_eof_n     (llk_tx_eof_n    ),                     // I
         .llk_tx_sop_n     (llk_tx_sop_n    ),                     // I
         .llk_tx_eop_n     (llk_tx_eop_n    ),                     // I
         .llk_tx_enable_n  (llk_tx_enable_n ),                     // I [1:0]
         .llk_tx_ch_tc     (llk_tx_ch_tc    ),                     // I [2:0]
         .llk_tx_ch_fifo   (llk_tx_ch_fifo  ),                     // I [1:0]
         .llk_tx_dst_rdy_n (llk_tx_dst_rdy_n),                     // O
         .llk_tx_chan_space(llk_tx_chan_space),                    // O [9:0]
         .llk_tx_ch_posted_ready_n    (llk_tx_ch_posted_ready_n    ),   // O [7:0]
         .llk_tx_ch_non_posted_ready_n(llk_tx_ch_non_posted_ready_n),   // O [7:0]
         .llk_tx_ch_completion_ready_n(llk_tx_ch_completion_ready_n),   // O [7:0]
         .llk_tx_ch_config_ready_n    (llk_tx_ch_config_ready_n    ),   // O [7:0]
      
         // RX ports
         .llk_rx_dst_req_n (llk_rx_dst_req_n),                           // I
         .llk_rx_ch_tc     (llk_rx_ch_tc    ),                           // I [2:0]
         .llk_rx_ch_fifo   (llk_rx_ch_fifo  ),                           // I [1:0]
         .llk_tc_status    (llk_tc_status   ),                           // O [7:0]
         .llk_rx_data      (llk_rx_data     ),                           // O [63:0]
         .llk_rx_src_rdy_n (llk_rx_src_rdy_n),                           // O
         .llk_rx_src_last_req_n(llk_rx_src_last_req_n),                  // O
         .llk_rx_sof_n     (llk_rx_sof_n  ),                             // O
         .llk_rx_eof_n     (llk_rx_eof_n  ),                             // O
         .llk_rx_sop_n     (llk_rx_sop_n  ),                             // O
         .llk_rx_eop_n     (llk_rx_eop_n  ),                             // O
         .llk_rx_valid_n   (llk_rx_valid_n),                                      // O [1:0]
         .llk_rx_ch_posted_available_n    (llk_rx_ch_posted_available_n    ),     // O [7:0]
         .llk_rx_ch_non_posted_available_n(llk_rx_ch_non_posted_available_n),     // O [7:0]
         .llk_rx_ch_completion_available_n(llk_rx_ch_completion_available_n),     // O [7:0]
         .llk_rx_ch_config_available_n    (llk_rx_ch_config_available_n    ),     // O [7:0]
     
        // ------------------------------------------------------
        // Transceiver Interface
        // ------------------------------------------------------
     
        // GT ports
         .RXN(RXN_A),                                               // I [3:0]
         .RXP(RXP_A),                                               // I [3:0]
         .TXN(TXN_A),                                               // O [3:0]
         .TXP(TXP_A),                                               // O [3:0]
         .gtpclk_bufg(),                                            // O
         .refclkout_bufg(),                                         // O
         .plllkdet_out(),                                           // O [3:0]
         .resetdone(),                                              // O [7:0]
         .debug(),                                                  // O [106:0]
         .gtpreset(1'b0),                                           // I
         .refclk(clk),                                              // I
     
         .gt_rx_present(8'b11111111),                               // I [7:0]
         .max_payload_size(),                                       // O [2:0]
         .max_read_request_size()                                   // O [2:0]
     
     );
     


     `include "pcie_tasks.v"
     
      //Clock
      initial
          clk = 1'b0;
      always  
          #(REF_CLK_PERIOD / 2) clk = !clk;


      //Reset    
      initial
      begin 
          rst_n = 1'b0; 

          #(1*CORE_CLK_PERIOD)

          // Wait on clock lock on near end and far end
          while (clk_lock_ne != 1'b1 || clk_lock_fe != 1'b1) begin
            #1;
          end

          #(10*CORE_CLK_PERIOD)
          rst_n = 1'b1;
      end
    
     initial
       begin
       
         $display ("%d",$time,"   Start %s, version 1.0", `TESTNAME);
         $display ("%d",$time,"   Simulating %1d lanes", NO_OF_LANES, " with TC%1d traffic", G_TC_NUMBER);
         $display ("%d",$time,"   Simulating %1d Maximum Payload", `MAXPAYLOAD);
       
         initialise;
         
     
         requester_id = 16'b0101010100000000;
         
         // Clear arrays
         clear_tx_buffer;
         for (I=0; I<256; I=I+1) begin
             capabilities[I] = 0;
             enhanced_capabilities[I] = 0;
         end
         
         #(1*CORE_CLK_PERIOD)
       
         init_count = 0;
         while ((link_up_fe != 1'b1) && (init_count < `TB_LINK_NEG_TIMEOUT*2)) begin
           #1
           init_count = init_count + 1;
         end
         
         if (link_up_fe != 1'b1) begin
             $display ("%d",$time,"  **Error: link never becomes active");
             $finish;
         end    
     
         #(2000);
     
         $display(" ");     
         $display("Find the capabilty structures");
         $display("-----------------------------");
         
         find_capabilities;
         
         if (capabilities[`CAP_ID_PCIE] == 0) begin
             $display("%d ",$time,"  **Error: The PCI Express Capability is missing, this test will not run");
             test_invalid = 1;
           #(0); // allow simulation delta to pass so that test_invalid can be read correctly      
         end  
     
         if (test_invalid == 0) begin
             
           // change maxpayloadsize on endpoint (fe)  
           if (`MAXPAYLOAD != 128) begin // uses 128 by default, others need register changes
              //--------------------------------------------------------------------------------    
              $display(" ");     
              $display("Set MAX PAYLOAD and MAX READ REQUEST size to %4d", `MAXPAYLOAD);
              $display("-----------------------------");
              $display("  ** Changing FE config registers");
              // perform read-modify-write
              config0_read(11'd1, 32'h68, 4'hf, 4'h0);
              tx_data_to_send[0][31:24] = {L_MAX_PAYLOAD_BITS, rx_data_buffer[3][28:24]};
              tx_data_to_send[0][23:16] = {rx_data_buffer[3][23], L_MAX_PAYLOAD_BITS, rx_data_buffer[3][19:16]};
              tx_data_to_send[0][15:8] = rx_data_buffer[3][15:8];
              tx_data_to_send[0][7:0] = rx_data_buffer[3][7:0];
              $display("   New config data is %9X", tx_data_to_send[0]);
              config0_write(11'd1, 32'h68, 4'hf, 4'h0);
     
             $display("   Check if config write was successful");
              config0_read(11'd1, 32'h68, 4'hf, 4'h0); // check to see if it worked
              
            // change maxpayloadsize on ne 
             $display("  ** Changing NE config registers");
             // perform read-modify-write
             ne_config_read(11'd1, 8'h68, 4'hf, 4'h0);
             tx_data_to_send[0][31:24] = {L_MAX_PAYLOAD_BITS, rx_data_buffer[3][28:24]};
             tx_data_to_send[0][23:16] = {rx_data_buffer[3][23], L_MAX_PAYLOAD_BITS, rx_data_buffer[3][19:16]};
             tx_data_to_send[0][15:8] = rx_data_buffer[3][15:8];
             tx_data_to_send[0][7:0] = rx_data_buffer[3][7:0];
     
             $display("   New config data is %9X", tx_data_to_send[0]);
             ne_config_write(11'd1, 8'h68, 4'hf, 4'h0);
     
             $display("   Check if config write was successful");
             ne_config_read(11'd1, 8'h68, 4'hf, 4'h0);
     
           end
      //--------------------------------------------------------------------------------    
         $display(" ");
         $display("Enable Mem address space and IO address space by writing to the command register");
         $display("-------------------------------------------");
         tx_data_to_send[0][31:0] = 32'h03000000;
         $display("   data sent is %9X", tx_data_to_send[0]);
         config0_write(11'd1, 32'h04, 4'hf, 4'h0);     
     
      //--------------------------------------------------------------------------------    
        $display(" ");
        $display("Test Memory Memory Writes followed by Reads to TC%1d", G_TC_NUMBER);
        $display("-------------------------------------------");
        
         // Write 16 DW to address 0x04
         for (j=0; j < 16; j=j+1) begin
             tx_data_to_send[j] = data_vec[j];
         end
         
         memory_write(11'd16, 32'h00000004, G_TC_NUMBER, 4'hf, 4'hf);
                   
         
         // Write 1 DW to address 0x00
         tx_data_to_send[0] = 32'h32323232;
         memory_write(11'd1, 32'h00000000, G_TC_NUMBER, 4'hf, 4'h0);
         
           
         // Read 16 DW from address 0x04
         for (j=0; j < 16; j=j+1) begin
             expected_data[j] = data_vec[j];
         end
         memory_read(11'd16, 32'h00000004, G_TC_NUMBER, 4'hf, 4'hf);
         
        
         // Read 5 DW from address 0x05 (not on a DW boundary, 
         // so byte enables have to be modified)
         for (j=0; j < 5; j=j+1) begin
             expected_data[j] = data_vec[j];
         end
         memory_read(11'd5, 32'h00000005, G_TC_NUMBER, 4'he, 4'hf);
         
         // Test max payload read and write
         $display(" ");
         $display("Testing Max Payload Memory Writes followed by Reads");
         $display("-------------------------------------------");
     
         // Write Max Payload DW to address 0x00
         for (j=0; j < L_MAX_PAYLOAD_SIZE; j=j+1) begin
             dword = j;
             tx_data_to_send[j] = dword;
         end
         memory_write(L_MAX_PAYLOAD_SIZE , 32'h00000000, G_TC_NUMBER, 4'hf, 4'hf);
     
         // Read Max Payload DW from address 0x00
         for (j=0; j < L_MAX_PAYLOAD_SIZE; j=j+1) begin
             expected_dword   = j;
             expected_data[j] = expected_dword;
         end
         memory_read(L_MAX_PAYLOAD_SIZE, 32'h00000000, G_TC_NUMBER, 4'hf, 4'hf);
     
         #(2000);
     
         end
     
      //------------------------------------------------------------------------------    
         // BEGINNING OF STANDARD FOOTER BLOCK
         //------------------------------------------------------------------------------    
         $display("");
         $display("Testbench Report");
         $display("----------------");
       
         $display("%d",$time," NE sent %d posted packets.",     ne_transmitted_packets_p);
         $display("%d",$time," NE sent %d non posted packets.", ne_transmitted_packets_np);
         $display("%d",$time," NE sent %d completion packets.", ne_transmitted_packets_c);
     
         $finish;
     
      end   

 
endmodule

