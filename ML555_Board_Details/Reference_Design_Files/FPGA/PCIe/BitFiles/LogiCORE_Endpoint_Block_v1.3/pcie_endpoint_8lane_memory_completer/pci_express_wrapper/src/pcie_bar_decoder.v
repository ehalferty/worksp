//------------------------------------------------------------------------------
//
// Copyright (C) 2006, Xilinx, Inc. All Rights Reserved.
//
// This file is owned and controlled by Xilinx and must be used solely
// for design, simulation, implementation and creation of design files
// limited to Xilinx devices or technologies. Use with non-Xilinx
// devices or technologies is expressly prohibited and immediately
// terminates your license.
//
// Xilinx products are not intended for use in life support
// appliances, devices, or systems. Use in such applications is
// expressly prohibited.
//
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 1.3
//  \   \         Application : Generated by Xilinx PCI Express Wizard
//  /   /         Filename    : pcie_bar_decoder.v
// /___/   /\     Module      : pcie_bar_decoder
// \   \  /  \
//  \___\/\___\
//
//------------------------------------------------------------------------------
`timescale 1 ns / 1 ps

module pcie_bar_decoder (
        
        input  wire       [31:0]  bar0,                             
        input  wire       [31:0]  bar1,                             
        input  wire       [31:0]  bar2,                             
        input  wire       [31:0]  bar3,                             
        input  wire       [31:0]  bar4,                             
        input  wire       [31:0]  bar5,                             
        input  wire       [31:0]  xrom_bar,                         
               
        input  wire       [63:0]  llk_rx_data,
        input  wire               llk_rx_sof_n,
        input  wire               llk_rx_eof_n,
        input  wire       [1:0]   llk_rx_valid_n,
               
        input  wire       [31:0]  cfg_rx_bar0,                      
        input  wire       [31:0]  cfg_rx_bar1,                      
        input  wire       [31:0]  cfg_rx_bar2,                      
        input  wire       [31:0]  cfg_rx_bar3,                      
        input  wire       [31:0]  cfg_rx_bar4,                      
        input  wire       [31:0]  cfg_rx_bar5,                       
        input  wire       [31:0]  cfg_rx_xrom,                      
        input  wire       [15:0]  cfg_status,                       
        input  wire       [15:0]  cfg_command,                      
        input  wire       [15:0]  cfg_dstatus,                      
        input  wire       [15:0]  cfg_dcommand,                     
        input  wire       [15:0]  cfg_lstatus,                      
        input  wire       [15:0]  cfg_lcommand,                     
        input  wire       [31:0]  cfg_pmcsr,                        
        input  wire       [31:0]  cfg_dcap,                         
        input  wire        [7:0]  cfg_bus_number,                   
        input  wire        [4:0]  cfg_device_number,               
        input  wire        [2:0]  cfg_function_number,              
              
        input  wire               clk,                            
        input  wire               rst_n,                            
        output wire        [6:0]  bar_hit 
        
 );

    parameter Tcq = 1;     
    
    reg [4:0] type;
    reg [1:0] fmt;
    reg       reg_next_dword;
    
    reg [63:0] raddr;
    reg        rio;
    reg        rmem32;
    reg        rmem64;
    
    reg [3:0] llk_rx_eof_n_d;
    wire      llk_rx_eof_n_d4;
    
    
    
    wire [671:0] cfg_temp = {{320{1'bx}}, xrom_bar, {64{1'bx}}, bar5,
                              bar4, bar3, bar2, bar1, bar0, {64{1'bx}}};
           
    
    always @ (posedge clk) begin
        if (rst_n == 1'b0) begin
            type[4:0]  <= 5'b11111; 
            fmt[1:0]   <= 2'b11;
            reg_next_dword <= 1'b0;
        end    
        else if (llk_rx_sof_n == 1'b0  && llk_rx_valid_n[1] == 1'b0) begin
            type[4:0]  <= #Tcq llk_rx_data[60:56]; 
            fmt[1:0]   <= #Tcq llk_rx_data[62:61];
            reg_next_dword <= #Tcq 1'b1;
        end    
        else begin
            type[4:0]  <= #Tcq 5'b11111; 
            fmt[1:0]   <= #Tcq 2'b11;
            reg_next_dword <= #Tcq 1'b0;
        end
    end
    
    
    always @ (posedge clk) begin
        if (rst_n == 1'b0) 
            raddr[63:0]  <= 64'hffffffffffffffff;         
        else if (reg_next_dword == 1'b1 && llk_rx_valid_n[1] == 1'b0) 
                raddr[63:0] <= #Tcq llk_rx_data[63:0];
        else
                raddr[63:0]  <= #Tcq 64'hffffffffffffffff;         
    end   
    
    always @ (posedge clk) begin
        if (rst_n == 1'b0) begin
             rio <= 1'b0;
             rmem32 <= 1'b0;
             rmem64 <= 1'b0;
        end
        else if (type == 5'b00010) begin
            rio <= #Tcq 1'b1;
            rmem32 <= #Tcq 1'b0;
            rmem64 <= #Tcq 1'b0;
        end
        else if (type == 5'b00000 && fmt[0] == 1'b0) begin
            rio <= #Tcq 1'b0;
            rmem32 <= #Tcq 1'b1;
            rmem64 <= #Tcq 1'b0;
        end    
        else if (type == 5'b00000 && fmt[0] == 1'b1) begin
            rio <= #Tcq 1'b0;
            rmem32 <= #Tcq 1'b0;
            rmem64 <= #Tcq 1'b1;
        end  
        else begin
            rio <= #Tcq 1'b0;
            rmem32 <= #Tcq 1'b0;
            rmem64 <= #Tcq 1'b0;
        end
    end    
    
     always @(posedge clk)
      begin
        if (rst_n == 1'b0)
          llk_rx_eof_n_d <= #Tcq 4'hf;
        else
          llk_rx_eof_n_d <= #Tcq {llk_rx_eof_n_d[2:0],llk_rx_eof_n};
      end
    
    assign llk_rx_eof_n_d4 = llk_rx_eof_n_d[3];
    
    
    // Instantiate BAR decoder logic from the CMM32
      pcie_cmm_decoder pcie_cmm_decoder_i
      (
       .raddr              (raddr),
       .rmem32             (rmem32),
       .rmem64             (rmem64),
       .rio                (rio),
       .rcheck_bus_id      (1'b0),
       .rcheck_dev_id      (1'b0),
       .rcheck_fun_id      (1'b0),
       .rhit               (),
       .bar_hit_dd         (bar_hit),
       .cmmt_rbar_hit_lat2_n (), // lat=2 if low, =3 if high
       .command            (cfg_command),
       .bar0_reg           (cfg_rx_bar0),
       .bar1_reg           (cfg_rx_bar1),
       .bar2_reg           (cfg_rx_bar2),
       .bar3_reg           (cfg_rx_bar3),
       .bar4_reg           (cfg_rx_bar4),
       .bar5_reg           (cfg_rx_bar5),
       .xrom_reg           (cfg_rx_xrom),
       .pme_pmcsr          (cfg_pmcsr[15:0]),
       .bus_num            (cfg_bus_number),
       .device_num         (cfg_device_number),
       .function_num       (cfg_function_number),
       .cfg                (cfg_temp),
       .llk_rx_eof_n_d4    (llk_rx_eof_n_d4),
       .rst                (~rst_n),
       .clk                (clk)
      );
  
endmodule
  
