//------------------------------------------------------------------------------
//
// Copyright (C) 2006, Xilinx, Inc. All Rights Reserved.
//
// This file is owned and controlled by Xilinx and must be used solely
// for design, simulation, implementation and creation of design files
// limited to Xilinx devices or technologies. Use with non-Xilinx
// devices or technologies is expressly prohibited and immediately
// terminates your license.
//
// Xilinx products are not intended for use in life support
// appliances, devices, or systems. Use in such applications is
// expressly prohibited.
//
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 1.2
//  \   \         Application : Generated by Xilinx PCI Express Wizard
//  /   /         Filename    : config.v 
// /___/   /\     Module      : Not applicable 
// \   \  /  \
//  \___\/\___\
//
//------------------------------------------------------------------------------

 // Required to define trigger and data width for debug modules
 `define chipscope_ila0_data_width      150 
 `define chipscope_ila0_trig_width       15 

 `define chipscope_ila1_data_width      100 
 `define chipscope_ila1_trig_width       15 

 `define chipscope_ila2_data_width      200 
 `define chipscope_ila2_trig_width       15 

 `define chipscope_vio0_sync_in_width   256 
 `define chipscope_vio0_sync_out_width   80 

  // Required for support to read status FIFO externally
 `define block0_fifo_status_ext_rd_en      
  // `define block1_cntl_sig_status_ext_en     

 `define block2_fifo_status_ext_rd_en        
 // `define block2_pso_status_ext_en          
 // `define block2_config_status_ext_en          
 // `define block2_mesg_err_status_ext_en          
 // `define block2_pkt_cntr_status_ext_en          
 // `define block2_misc_status_ext_en          

 `define block0_fifo_status_rd_cnt_width      8
 `define block2_fifo_status_rd_cnt_width      8

 // Define the width of the debug signals
 `define block0_debug_width              15
 `define block1_debug_width              15
 `define block2_debug_width              15

 // Define width of status FIFO
 `define block0_fifo_status_width        36
 `define block2_fifo_status_width        19 


 // Define the input interface bit definitions
 `define input_width      80 

 // Input bits are either control bits or the command bits
 `define cntl_width       16  
 `define cmd_width        ( `input_width - `cntl_width ) 

 `define cmd_min          ( `cntl_width )
 `define cmd_max          ( `cmd_min + `cmd_width - 1 )

 // Control bit definitions 
 `define block0_rst                     0
 `define block1_rst                     1
 `define block2_rst                     2
 `define block0_run_tests               3
 `define block1_run_tests               4
 `define block2_run_tests               5
                                       
 `define block0_fifo_cmd_wr_en          6 
 `define block1_fifo_cmd_wr_en          7 
 `define block0_fifo_status_rd_en       8 
 `define block1_cntl_sig_status_en      9 
 `define block2_fifo_status_rd_en      10 
 `define block2_pso_status_en          11 
 `define block2_config_status_en       12 
 `define block2_mesg_err_status_en     13
 `define block2_pkt_cntr_status_en     14
 `define block2_misc_status_en         15

 // Define output bus (status bits)
 `define status_width      16 

 // Status bit definitions 
 `define block0_fifo_cmd_full           0 
 `define block0_fifo_cmd_empty          1 
 `define block0_fifo_status_full        2 
 `define block0_fifo_status_empty       3 
 `define block1_fifo_cmd_full           4 
 `define block1_fifo_cmd_empty          5 
 `define block2_fifo_status_full        6 
 `define block2_fifo_status_empty       7 


 // Definitions for block0 data bits   
 `define block0_data_width     ( `cmd_width )

 // Bit definition for block0   
 `define block0_cmd_width    ( `block0_data_width )

 // Definitions for managment interface signals
 `define mgmt_addr_width     11
 `define mgmt_data_width     32
 `define mgmt_byte_en_width  ( `mgmt_data_width / 8 )

 // Bit definitions for block1  
 `define block1_data_width   ( `cmd_width )
                                  
 `define block1_cntl_width   20 

 `define block1_cntl_min     44 
 `define block1_cntl_max     ( `block1_cntl_min + `block1_cntl_width - 1 ) 

 `define block1_delay_width  20 

 `define block1_delay_min    ( `block1_cntl_min )
 `define block1_delay_max    ( `block1_delay_min + `block1_delay_width - 1 )
                                   
 // Bits for blocks controlled by block_cntl1 (Override and control signals)  
 `define block1_cmd_width    ( `block1_data_width - `block1_cntl_width )
                               
 `define block1_cmd_min      0 
 `define block1_cmd_max      ( `block1_cmd_min + `block1_cmd_width - 1 )

 // Definitions for control signal manipulator
 `define csm_cntl_width      36 

 // Definitions for parallel status monitor
 `define psm_credit_status_width        12  
 `define psm_credit_status_sel_width     7 

 `define psm_pso_status_width           17
                                       
 `define config_status_width            22 
 `define mesg_err_status_width          19
                                       
 `define no_pkt_cntr                    10
 `define pkt_cntr_width                  8
                                       
 `define misc_status_en_width           10 
 `define misc_status_output_width       20 

 //////////////////////////////////////////////////////////////////////////

  
  
