//------------------------------------------------------------------------------
//
// Copyright (C) 2005, Xilinx, Inc. All Rights Reserved.
//
// This file is owned and controlled by Xilinx and must be used solely
// for design, simulation, implementation and creation of design files
// limited to Xilinx devices or technologies. Use with non-Xilinx
// devices or technologies is expressly prohibited and immediately
// terminates your license.
//
// Xilinx products are not intended for use in life support
// appliances, devices, or systems. Use in such applications is
// expressly prohibited.
//
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 1.3
//  \   \         Application : Generated by Xilinx PCI Express Wizard
//  /   /         Filename    : pcie_gt_wrapper.v
// /___/   /\     Module      : pcie_gt_wrapper
// \   \  /  \
//  \___\/\___\
//
//------------------------------------------------------------------------------


module pcie_gt_wrapper #
   (
     parameter NO_OF_LANES = 4,
     parameter SIM = 0,
     parameter PLL_DIVSEL_FB = 5,
     parameter PLL_DIVSEL_REF = 2,
     parameter CLK25_DIVIDER = 4
   )  
   (
      output  reg    [7:0]                gt_rx_elec_idle,
      output  reg    [23:0]               gt_rx_status,
      output  reg    [63:0]               gt_rx_data,
      output  reg    [7:0]                gt_rx_phy_status,
      output  reg    [7:0]                gt_rx_data_k,
      output  reg    [7:0]                gt_rx_valid,
      output  reg    [7:0]                gt_rxchanisaligned,
      input   wire   [NO_OF_LANES-1:0]    gt_rx_n,     
      input   wire   [NO_OF_LANES-1:0]    gt_rx_p,     
      
      output  wire   [NO_OF_LANES-1:0]    gt_tx_n,     
      output  wire   [NO_OF_LANES-1:0]    gt_tx_p,     
      input   wire   [63:0]               gt_tx_data,
      input   wire   [7:0]                gt_tx_data_k,
      input   wire   [7:0]                gt_tx_elec_idle,
      input   wire   [7:0]                gt_tx_detect_rx_loopback,
      input   wire   [7:0]                gt_tx_compliance,
      input   wire   [7:0]                gt_rx_polarity,
      input   wire   [15:0]               gt_power_down,
      input   wire   [7:0]                gt_deskew_lanes,
      input   wire   [7:0]                gt_pipe_reset,
      input   wire   [7:0]                gt_rx_present,
      
      input   wire                        gsr,
      input   wire                        gtpreset,
      input   wire                        refclk,
      output  wire                        refclkout_bufg,
      output  wire                        gtpclk_bufg,
      output  wire  [7:0]                 resetdone,
      output  wire  [3:0]                 plllkdet_out,
      input   wire                        pclk,
      output  wire  [7:0]                 rxbyteisaligned,
      output  wire  [7:0]                 rxchanbondseq,
      
      // GTP register ports
      input   wire                        gt_dclk,
      input   wire   [NO_OF_LANES*7-1:0]  gt_daddr,
      input   wire   [NO_OF_LANES-1:0]    gt_den,
      input   wire   [NO_OF_LANES-1:0]    gt_dwen,
      input   wire   [NO_OF_LANES*16-1:0] gt_di,
      output  wire   [NO_OF_LANES*16-1:0] gt_do,
      output  wire   [NO_OF_LANES-1:0]    gt_drdy
   );


/************************** Start of GTP instantiation *************************/

     wire [NO_OF_LANES-1:0] gt_clk;
     wire [NO_OF_LANES-1:0] gt_refclk_out;
     wire [7:0] gt_rx_enchansync  = 8'h01;
     
     
     wire [2:0] gt_rx_chbond_i [NO_OF_LANES:0];
     wire [2:0] gt_rx_chbond_o [NO_OF_LANES:0];
       
     wire [7:0] float_rx_data_k = 8'b0;
     wire [63:0] float_rx_data = 64'b0;
     
     
     wire [7:0] GTP_TXN,GTP_RXN;
     wire [7:0] GTP_TXP,GTP_RXP;
     wire [7:0] rTXN;
     wire [7:0] rTXP;
     
     wire [7:0] gt_rx_elec_idle_reset;
     wire [3:0] gt_rx_en_elec_idle_resetb;

     wire [63:0]   gt_rx_data_reg;
     wire [7:0]    gt_rx_data_k_reg;
     wire [7:0]    gt_rx_valid_reg;
     wire [7:0]    gt_rx_elec_idle_reg;
     wire [23:0]   gt_rx_status_reg;
     wire [7:0]    gt_rx_phy_status_reg;
     wire [7:0]    gt_rxchanisaligned_reg;

     reg  [7:0]    gt_pipe_reset_reg;
     reg  [15:0]   gt_rx_power_down_reg;
     reg  [7:0]    gt_rx_polarity_reg;

     wire [63:0]   gt_tx_data_reg;              
     wire [7:0]    gt_tx_data_k_reg;            
     wire [7:0]    gt_tx_elec_idle_reg;         
     wire [7:0]    gt_tx_detect_rx_loopback_reg;
     wire [7:0]    gt_tx_compliance_reg;        
     wire [15:0]   gt_tx_power_down_reg;


 always @(posedge pclk) begin
    if (gtpreset == 1'b1) begin
        gt_rx_power_down_reg            =   16'h0;           
        gt_pipe_reset_reg               =   8'h0;
        gt_rx_polarity_reg              =   8'h0;
        
        gt_rx_data                      =   63'h0;   
        gt_rx_data_k                    =   8'h0;    
        gt_rx_valid                     =   8'h0;   
        gt_rx_elec_idle                 =   8'hff;
        gt_rx_status                    =   24'h0;   
        gt_rx_phy_status                =   8'h0;
        gt_rxchanisaligned              =   8'h0;
        
    end
    else begin
        gt_rx_power_down_reg            =   gt_power_down;           
        gt_pipe_reset_reg               =   gt_pipe_reset;
        gt_rx_polarity_reg              =   gt_rx_polarity;
        
        gt_rx_data                      =   gt_rx_data_reg;        
        gt_rx_data_k                    =   gt_rx_data_k_reg;      
        gt_rx_valid                     =   gt_rx_valid_reg;       
        gt_rx_elec_idle                 =   gt_rx_elec_idle_reg;   
        gt_rx_status                    =   gt_rx_status_reg;      
        gt_rx_phy_status                =   gt_rx_phy_status_reg;  
        gt_rxchanisaligned              =   gt_rxchanisaligned_reg;

    end     
 end     
    


//////////////////////////////////////////////////////////
// Flop Locations for GTP TX signals
/////////////////////////////////////////////////////////

               // Lane 0 - GTPX0Y2
     // synthesis attribute loc l0_reg_tx_data0   "SLICE_X58Y59"
     // synthesis attribute loc l0_reg_tx_data1   "SLICE_X58Y59"
     // synthesis attribute loc l0_reg_tx_data2   "SLICE_X58Y59"
     // synthesis attribute loc l0_reg_tx_data3   "SLICE_X58Y59"
     // synthesis attribute loc l0_reg_tx_data4   "SLICE_X58Y58"
     // synthesis attribute loc l0_reg_tx_data5   "SLICE_X58Y58"
     // synthesis attribute loc l0_reg_tx_data6   "SLICE_X58Y58"
     // synthesis attribute loc l0_reg_tx_data7   "SLICE_X58Y58"
     
     // synthesis attribute loc l0_reg_tx_data_k      "SLICE_X59Y58"
     // synthesis attribute loc l0_reg_tx_elec_idle   "SLICE_X59Y58"
     // synthesis attribute loc l0_reg_tx_compliance  "SLICE_X59Y58"
                                      
     // synthesis attribute loc l0_reg_power_down0    "SLICE_X59Y59"
     // synthesis attribute loc l0_reg_power_down1    "SLICE_X59Y59"
                                      
     // synthesis attribute loc l0_reg_tx_detect_rx_loopback "SLICE_X59Y59"
          
     FD l0_reg_tx_data0 ( .Q (gt_tx_data_reg[0]), .D (gt_tx_data[0]), .C(pclk));
     FD l0_reg_tx_data1 ( .Q (gt_tx_data_reg[1]), .D (gt_tx_data[1]), .C(pclk));
     FD l0_reg_tx_data2 ( .Q (gt_tx_data_reg[2]), .D (gt_tx_data[2]), .C(pclk));
     FD l0_reg_tx_data3 ( .Q (gt_tx_data_reg[3]), .D (gt_tx_data[3]), .C(pclk));
     FD l0_reg_tx_data4 ( .Q (gt_tx_data_reg[4]), .D (gt_tx_data[4]), .C(pclk));
     FD l0_reg_tx_data5 ( .Q (gt_tx_data_reg[5]), .D (gt_tx_data[5]), .C(pclk));
     FD l0_reg_tx_data6 ( .Q (gt_tx_data_reg[6]), .D (gt_tx_data[6]), .C(pclk));
     FD l0_reg_tx_data7 ( .Q (gt_tx_data_reg[7]), .D (gt_tx_data[7]), .C(pclk));
     
     FD l0_reg_tx_data_k    ( .Q (gt_tx_data_k_reg[0]),     .D (gt_tx_data_k[0]),     .C(pclk));
     FD l0_reg_tx_elec_idle ( .Q (gt_tx_elec_idle_reg[0]),  .D (gt_tx_elec_idle[0]),  .C(pclk));
     FD l0_reg_tx_compliance( .Q (gt_tx_compliance_reg[0]), .D (gt_tx_compliance[0]), .C(pclk));
         
     FD l0_reg_tx_detect_rx_loopback ( .Q (gt_tx_detect_rx_loopback_reg[0]), .D (gt_tx_detect_rx_loopback[0]), .C(pclk));
          
     FD l0_reg_power_down0  ( .Q (gt_tx_power_down_reg[0]),  .D (gt_power_down[0]),  .C(pclk));
     FD l0_reg_power_down1  ( .Q (gt_tx_power_down_reg[1]),  .D (gt_power_down[1]),  .C(pclk));
     
     
                    // Lane 1 - GTPX0Y2
     // synthesis attribute loc l1_reg_tx_data0   "SLICE_X58Y40"
     // synthesis attribute loc l1_reg_tx_data1   "SLICE_X58Y40"
     // synthesis attribute loc l1_reg_tx_data2   "SLICE_X58Y40"
     // synthesis attribute loc l1_reg_tx_data3   "SLICE_X58Y40"
     // synthesis attribute loc l1_reg_tx_data4   "SLICE_X58Y41"
     // synthesis attribute loc l1_reg_tx_data5   "SLICE_X58Y41"
     // synthesis attribute loc l1_reg_tx_data6   "SLICE_X58Y41"
     // synthesis attribute loc l1_reg_tx_data7   "SLICE_X58Y41"
                               
     // synthesis attribute loc l1_reg_tx_data_k      "SLICE_X59Y40"
     // synthesis attribute loc l1_reg_tx_elec_idle   "SLICE_X59Y40"
     // synthesis attribute loc l1_reg_tx_compliance  "SLICE_X59Y40"
                                
     // synthesis attribute loc l1_reg_power_down0  "SLICE_X59Y41"
     // synthesis attribute loc l1_reg_power_down1  "SLICE_X59Y41"
                                
     // synthesis attribute loc l1_reg_tx_detect_rx_loopback "SLICE_X59Y41"
          
     FD l1_reg_tx_data0 ( .Q (gt_tx_data_reg[8]),  .D (gt_tx_data[8]),  .C(pclk));
     FD l1_reg_tx_data1 ( .Q (gt_tx_data_reg[9]),  .D (gt_tx_data[9]),  .C(pclk));
     FD l1_reg_tx_data2 ( .Q (gt_tx_data_reg[10]), .D (gt_tx_data[10]), .C(pclk));
     FD l1_reg_tx_data3 ( .Q (gt_tx_data_reg[11]), .D (gt_tx_data[11]), .C(pclk));
     FD l1_reg_tx_data4 ( .Q (gt_tx_data_reg[12]), .D (gt_tx_data[12]), .C(pclk));
     FD l1_reg_tx_data5 ( .Q (gt_tx_data_reg[13]), .D (gt_tx_data[13]), .C(pclk));
     FD l1_reg_tx_data6 ( .Q (gt_tx_data_reg[14]), .D (gt_tx_data[14]), .C(pclk));
     FD l1_reg_tx_data7 ( .Q (gt_tx_data_reg[15]), .D (gt_tx_data[15]), .C(pclk));
     
     FD l1_reg_tx_data_k    ( .Q (gt_tx_data_k_reg[1]),     .D (gt_tx_data_k[1]),     .C(pclk));
     FD l1_reg_tx_elec_idle ( .Q (gt_tx_elec_idle_reg[1]),  .D (gt_tx_elec_idle[1]),  .C(pclk));
     FD l1_reg_tx_compliance( .Q (gt_tx_compliance_reg[1]), .D (gt_tx_compliance[1]), .C(pclk));
         
     FD l1_reg_tx_detect_rx_loopback ( .Q (gt_tx_detect_rx_loopback_reg[1]), .D (gt_tx_detect_rx_loopback[1]), .C(pclk));
          
     FD l1_reg_power_down0  ( .Q (gt_tx_power_down_reg[2]),  .D (gt_power_down[2]),  .C(pclk));
     FD l1_reg_power_down1  ( .Q (gt_tx_power_down_reg[3]),  .D (gt_power_down[3]),  .C(pclk));
     
     
                    // Lane 2 - GTPX0Y1
     // synthesis attribute loc l2_reg_tx_data0   "SLICE_X58Y39"
     // synthesis attribute loc l2_reg_tx_data1   "SLICE_X58Y39"
     // synthesis attribute loc l2_reg_tx_data2   "SLICE_X58Y39"
     // synthesis attribute loc l2_reg_tx_data3   "SLICE_X58Y39"
     // synthesis attribute loc l2_reg_tx_data4   "SLICE_X58Y38"
     // synthesis attribute loc l2_reg_tx_data5   "SLICE_X58Y38"
     // synthesis attribute loc l2_reg_tx_data6   "SLICE_X58Y38"
     // synthesis attribute loc l2_reg_tx_data7   "SLICE_X58Y38"
                               
     // synthesis attribute loc l2_reg_tx_data_k      "SLICE_X59Y38"
     // synthesis attribute loc l2_reg_tx_elec_idle   "SLICE_X59Y38"
     // synthesis attribute loc l2_reg_tx_compliance  "SLICE_X59Y38"
                                
     // synthesis attribute loc l2_reg_power_down0  "SLICE_X59Y39"
     // synthesis attribute loc l2_reg_power_down1  "SLICE_X59Y39"
                                
     // synthesis attribute loc l2_reg_tx_detect_rx_loopback "SLICE_X59Y39"
          
     FD l2_reg_tx_data0 ( .Q (gt_tx_data_reg[16]), .D (gt_tx_data[16]), .C(pclk));
     FD l2_reg_tx_data1 ( .Q (gt_tx_data_reg[17]), .D (gt_tx_data[17]), .C(pclk));
     FD l2_reg_tx_data2 ( .Q (gt_tx_data_reg[18]), .D (gt_tx_data[18]), .C(pclk));
     FD l2_reg_tx_data3 ( .Q (gt_tx_data_reg[19]), .D (gt_tx_data[19]), .C(pclk));
     FD l2_reg_tx_data4 ( .Q (gt_tx_data_reg[20]), .D (gt_tx_data[20]), .C(pclk));
     FD l2_reg_tx_data5 ( .Q (gt_tx_data_reg[21]), .D (gt_tx_data[21]), .C(pclk));
     FD l2_reg_tx_data6 ( .Q (gt_tx_data_reg[22]), .D (gt_tx_data[22]), .C(pclk));
     FD l2_reg_tx_data7 ( .Q (gt_tx_data_reg[23]), .D (gt_tx_data[23]), .C(pclk));
     
     FD l2_reg_tx_data_k    ( .Q (gt_tx_data_k_reg[2]),     .D (gt_tx_data_k[2]),     .C(pclk));
     FD l2_reg_tx_elec_idle ( .Q (gt_tx_elec_idle_reg[2]),  .D (gt_tx_elec_idle[2]),  .C(pclk));
     FD l2_reg_tx_compliance( .Q (gt_tx_compliance_reg[2]), .D (gt_tx_compliance[2]), .C(pclk));
         
     FD l2_reg_tx_detect_rx_loopback ( .Q (gt_tx_detect_rx_loopback_reg[2]), .D (gt_tx_detect_rx_loopback[2]), .C(pclk));
          
     FD l2_reg_power_down0  ( .Q (gt_tx_power_down_reg[4]),  .D (gt_power_down[4]),  .C(pclk));
     FD l2_reg_power_down1  ( .Q (gt_tx_power_down_reg[5]),  .D (gt_power_down[5]),  .C(pclk));
     
     
                    // Lane 3 - GTPX0Y1
     // synthesis attribute loc l3_reg_tx_data0   "SLICE_X58Y20"
     // synthesis attribute loc l3_reg_tx_data1   "SLICE_X58Y20"
     // synthesis attribute loc l3_reg_tx_data2   "SLICE_X58Y20"
     // synthesis attribute loc l3_reg_tx_data3   "SLICE_X58Y20"
     // synthesis attribute loc l3_reg_tx_data4   "SLICE_X58Y21"
     // synthesis attribute loc l3_reg_tx_data5   "SLICE_X58Y21"
     // synthesis attribute loc l3_reg_tx_data6   "SLICE_X58Y21"
     // synthesis attribute loc l3_reg_tx_data7   "SLICE_X58Y21"
     
     // synthesis attribute loc l3_reg_tx_data_k      "SLICE_X59Y20"
     // synthesis attribute loc l3_reg_tx_elec_idle   "SLICE_X59Y20"
     // synthesis attribute loc l3_reg_tx_compliance  "SLICE_X59Y20"
                                
     // synthesis attribute loc l3_reg_power_down0  "SLICE_X59Y21"
     // synthesis attribute loc l3_reg_power_down1  "SLICE_X59Y21"
     // synthesis attribute loc l3_reg_tx_detect_rx_loopback "SLICE_X59Y21"
                                   
     FD l3_reg_tx_data0 ( .Q (gt_tx_data_reg[24]), .D (gt_tx_data[24]), .C(pclk));
     FD l3_reg_tx_data1 ( .Q (gt_tx_data_reg[25]), .D (gt_tx_data[25]), .C(pclk));
     FD l3_reg_tx_data2 ( .Q (gt_tx_data_reg[26]), .D (gt_tx_data[26]), .C(pclk));
     FD l3_reg_tx_data3 ( .Q (gt_tx_data_reg[27]), .D (gt_tx_data[27]), .C(pclk));
     FD l3_reg_tx_data4 ( .Q (gt_tx_data_reg[28]), .D (gt_tx_data[28]), .C(pclk));
     FD l3_reg_tx_data5 ( .Q (gt_tx_data_reg[29]), .D (gt_tx_data[29]), .C(pclk));
     FD l3_reg_tx_data6 ( .Q (gt_tx_data_reg[30]), .D (gt_tx_data[30]), .C(pclk));
     FD l3_reg_tx_data7 ( .Q (gt_tx_data_reg[31]), .D (gt_tx_data[31]), .C(pclk));
     
     FD l3_reg_tx_data_k    ( .Q (gt_tx_data_k_reg[3]),     .D (gt_tx_data_k[3]),     .C(pclk));
     FD l3_reg_tx_elec_idle ( .Q (gt_tx_elec_idle_reg[3]),  .D (gt_tx_elec_idle[3]),  .C(pclk));
     FD l3_reg_tx_compliance( .Q (gt_tx_compliance_reg[3]), .D (gt_tx_compliance[3]), .C(pclk));
         
     FD l3_reg_tx_detect_rx_loopback ( .Q (gt_tx_detect_rx_loopback_reg[3]), .D (gt_tx_detect_rx_loopback[3]), .C(pclk));
          
     FD l3_reg_power_down0  ( .Q (gt_tx_power_down_reg[6]),  .D (gt_power_down[6]),  .C(pclk));
     FD l3_reg_power_down1  ( .Q (gt_tx_power_down_reg[7]),  .D (gt_power_down[7]),  .C(pclk));
     
     
                          
     assign rTXN = GTP_TXN;
     assign rTXP = GTP_TXP;
         
     assign gt_tx_n = rTXN[(NO_OF_LANES-1):0];
     assign gt_tx_p = rTXP[(NO_OF_LANES-1):0];
     
     assign GTP_RXN[(NO_OF_LANES-1):0] = gt_rx_n;
     assign GTP_RXP[(NO_OF_LANES-1):0] = gt_rx_p;
    
     BUFG bufg1 (.I(gt_clk[0]),        .O(gtpclk_bufg));
     BUFG bufg2 (.I(gt_refclk_out[0]), .O(refclkout_bufg));

    
// Channel bonding settings for simulation. These settings should be changed
// based on how the GTPs are daisy chained. For more imformation on channel 
// bonding please refer to the V5 GTP User Guide 

// Note: The ucf should reflect the same settings 
   
          //NO_OF_LANES = 4 (Lane 0, Lane 1 , Lane 2 , Lane 3)
        defparam GTPD[2].GTP_i.CHAN_BOND_LEVEL_0  = 1;
        defparam GTPD[2].GTP_i.CHAN_BOND_LEVEL_1  = 0;
        defparam GTPD[2].GTP_i.CHAN_BOND_MODE_0   = "SLAVE";   
        defparam GTPD[2].GTP_i.CHAN_BOND_MODE_1   = "SLAVE"; 
        defparam GTPD[0].GTP_i.CHAN_BOND_LEVEL_0  = 3;
        defparam GTPD[0].GTP_i.CHAN_BOND_LEVEL_1  = 2;
        defparam GTPD[0].GTP_i.CHAN_BOND_MODE_0   = "MASTER";
        defparam GTPD[0].GTP_i.CHAN_BOND_MODE_1   = "SLAVE"; 

        assign  gt_rx_chbond_i[0] = 3'b0;
        assign  gt_rx_chbond_i[1] = gt_rx_chbond_o[0];
        assign  gt_rx_chbond_i[2] = gt_rx_chbond_o[1];
        assign  gt_rx_chbond_i[3] = gt_rx_chbond_o[2];        
        
// *********************************************
// LOGIC to generate the individual GTP register data and 
// control ports
//
     genvar i;   
     generate 
        for (i=0; i < NO_OF_LANES; i= i+2)
           begin: GTPD
              GTP_DUAL #
           
               (
                  // synthesis translate_off
                  .SIM_RECEIVER_DETECT_PASS0  ("TRUE"                  ),
                  .SIM_RECEIVER_DETECT_PASS1  ("TRUE"                  ),
                  .SIM_GTPRESET_SPEEDUP       (1                       ),
                  // synthesis translate_on
                  .AC_CAP_DIS_0               ("FALSE"                 ),
                  .AC_CAP_DIS_1               ("FALSE"                 ),
                  .ALIGN_COMMA_WORD_0         (1                       ),
                  .ALIGN_COMMA_WORD_1         (1                       ),
                  .CHAN_BOND_1_MAX_SKEW_0     (7                       ),
                  .CHAN_BOND_1_MAX_SKEW_1     (7                       ),
                  .CHAN_BOND_2_MAX_SKEW_0     (7                       ),
                  .CHAN_BOND_2_MAX_SKEW_1     (7                       ),
                  .CHAN_BOND_SEQ_2_USE_0      ("TRUE"                  ),
                  .CHAN_BOND_SEQ_2_USE_1      ("TRUE"                  ),
                  .CHAN_BOND_SEQ_LEN_0        (4                       ),
                  .CHAN_BOND_SEQ_LEN_1        (4                       ),
                  .CLK25_DIVIDER              (CLK25_DIVIDER           ),
                  .CLKINDC_B                  ("TRUE"                  ),
                  .CLK_CORRECT_USE_0          ("TRUE"                  ),
                  .CLK_CORRECT_USE_1          ("TRUE"                  ),
                  .CLK_COR_ADJ_LEN_0          (1                       ),
                  .CLK_COR_ADJ_LEN_1          (1                       ),
                  .CLK_COR_DET_LEN_0          (1                       ),
                  .CLK_COR_DET_LEN_1          (1                       ),
                  .CLK_COR_INSERT_IDLE_FLAG_0 ("FALSE"                 ),
                  .CLK_COR_INSERT_IDLE_FLAG_1 ("FALSE"                 ),
                  .CLK_COR_KEEP_IDLE_0        ("FALSE"                 ),
                  .CLK_COR_KEEP_IDLE_1        ("FALSE"                 ),
                  .CLK_COR_MAX_LAT_0          (18                      ),
                  .CLK_COR_MAX_LAT_1          (18                      ),
                  .CLK_COR_MIN_LAT_0          (16                      ),
                  .CLK_COR_MIN_LAT_1          (16                      ),
                  .CLK_COR_PRECEDENCE_0       ("TRUE"                  ),
                  .CLK_COR_PRECEDENCE_1       ("TRUE"                  ),
                  .CLK_COR_REPEAT_WAIT_0      (5                       ),
                  .CLK_COR_REPEAT_WAIT_1      (5                       ),
                  .CLK_COR_SEQ_2_USE_0        ("FALSE"                 ),
                  .CLK_COR_SEQ_2_USE_1        ("FALSE"                 ),
                  .COMMA_DOUBLE_0             ("FALSE"                 ),
                  .COMMA_DOUBLE_1             ("FALSE"                 ),
                  .DEC_MCOMMA_DETECT_0        ("TRUE"                  ),
                  .DEC_MCOMMA_DETECT_1        ("TRUE"                  ),
                  .DEC_PCOMMA_DETECT_0        ("TRUE"                  ),
                  .DEC_PCOMMA_DETECT_1        ("TRUE"                  ),
                  .DEC_VALID_COMMA_ONLY_0     ("TRUE"                  ),
                  .DEC_VALID_COMMA_ONLY_1     ("TRUE"                  ),
                  .MCOMMA_DETECT_0            ("TRUE"                  ),
                  .MCOMMA_DETECT_1            ("TRUE"                  ),
                  .OOB_CLK_DIVIDER            (4                       ),
                  .OVERSAMPLE_MODE            ("FALSE"                 ),
                  .PCI_EXPRESS_MODE_0         ("TRUE"                  ),
                  .PCI_EXPRESS_MODE_1         ("TRUE"                  ),
                  .PCOMMA_DETECT_0            ("TRUE"                  ),
                  .PCOMMA_DETECT_1            ("TRUE"                  ),
                  .PLL_DIVSEL_FB              (PLL_DIVSEL_FB           ),
                  .PLL_DIVSEL_REF             (PLL_DIVSEL_REF          ),
                  .PLL_RXDIVSEL_OUT_0         (1                       ),
                  .PLL_RXDIVSEL_OUT_1         (1                       ),
                  .PLL_SATA_0                 ("FALSE"                 ),
                  .PLL_SATA_1                 ("FALSE"                 ),
                  .PLL_TXDIVSEL_COMM_OUT      (1                       ),
                  .PLL_TXDIVSEL_OUT_0         (1                       ),
                  .PLL_TXDIVSEL_OUT_1         (1                       ),
                  .RCV_TERM_GND_0             ("TRUE"                  ),
                  .RCV_TERM_GND_1             ("TRUE"                  ),
                  .RCV_TERM_MID_0             ("TRUE"                  ),
                  .RCV_TERM_MID_1             ("TRUE"                  ),
                  .RCV_TERM_VTTRX_0           ("FALSE"                 ),
                  .RCV_TERM_VTTRX_1           ("FALSE"                 ),
                  .RX_BUFFER_USE_0            ("TRUE"                  ),
                  .RX_BUFFER_USE_1            ("TRUE"                  ),
                  .RX_DECODE_SEQ_MATCH_0      ("TRUE"                  ),
                  .RX_DECODE_SEQ_MATCH_1      ("TRUE"                  ),
                  .RX_LOSS_OF_SYNC_FSM_0      ("FALSE"                 ),
                  .RX_LOSS_OF_SYNC_FSM_1      ("FALSE"                 ),
                  .RX_LOS_INVALID_INCR_0      (8                       ),
                  .RX_LOS_INVALID_INCR_1      (8                       ),
                  .RX_LOS_THRESHOLD_0         (128                     ),
                  .RX_LOS_THRESHOLD_1         (128                     ),
                  .RX_SLIDE_MODE_0            ("PCS"                   ),
                  .RX_SLIDE_MODE_1            ("PCS"                   ),
                  .RX_STATUS_FMT_0            ("PCIE"                  ),
                  .RX_STATUS_FMT_1            ("PCIE"                  ),
                  .RX_XCLK_SEL_0              ("RXREC"                 ),
                  .RX_XCLK_SEL_1              ("RXREC"                 ),
                  .SATA_MAX_BURST_0           (7                       ),
                  .SATA_MAX_BURST_1           (7                       ),
                  .SATA_MAX_INIT_0            (22                      ),
                  .SATA_MAX_INIT_1            (22                      ),
                  .SATA_MAX_WAKE_0            (7                       ),
                  .SATA_MAX_WAKE_1            (7                       ),
                  .SATA_MIN_BURST_0           (4                       ),
                  .SATA_MIN_BURST_1           (4                       ),
                  .SATA_MIN_INIT_0            (12                      ),
                  .SATA_MIN_INIT_1            (12                      ),
                  .SATA_MIN_WAKE_0            (4                       ),
                  .SATA_MIN_WAKE_1            (4                       ),
                  .TERMINATION_IMP_0          (50                      ),
                  .TERMINATION_IMP_1          (50                      ),
                  .TERMINATION_OVRD           ("FALSE"                 ),
                  .TX_BUFFER_USE_0            ("TRUE"                  ),
                  .TX_BUFFER_USE_1            ("TRUE"                  ),
                  .TX_DIFF_BOOST_0            ("TRUE"                  ),
                  .TX_DIFF_BOOST_1            ("TRUE"                  ),
                  .TX_SYNC_FILTERB            (1                       ),
                  .TX_XCLK_SEL_0              ("TXOUT"                 ),
                  .TX_XCLK_SEL_1              ("TXOUT"                 ),
                  .CHAN_BOND_SEQ_1_1_0        (10'b0001001010          ), //D10.2 (end TS1)
                  .CHAN_BOND_SEQ_1_1_1        (10'b0001001010          ), //D10.2 (end TS1)
                  .CHAN_BOND_SEQ_1_2_0        (10'b0001001010          ), //D10.2 (end TS1)
                  .CHAN_BOND_SEQ_1_2_1        (10'b0001001010          ), //D10.2 (end TS1)
                  .CHAN_BOND_SEQ_1_3_0        (10'b0001001010          ), //D10.2 (end TS1)
                  .CHAN_BOND_SEQ_1_3_1        (10'b0001001010          ), //D10.2 (end TS1)
                  .CHAN_BOND_SEQ_1_4_0        (10'b0110111100          ), //K28.5 (COM)
                  .CHAN_BOND_SEQ_1_4_1        (10'b0110111100          ), //K28.5 (COM)
                  .CHAN_BOND_SEQ_1_ENABLE_0   (4'b1111                 ), //Look for 4 byte seq
                  .CHAN_BOND_SEQ_1_ENABLE_1   (4'b1111                 ), //Look for 4 byte seq
                  .CHAN_BOND_SEQ_2_1_0        (10'b0100111100          ), //K28.1 (FTS)
                  .CHAN_BOND_SEQ_2_1_1        (10'b0100111100          ), //K28.1 (FTS)
                  .CHAN_BOND_SEQ_2_2_0        (10'b0100111100          ), //K28.1 (FTS)
                  .CHAN_BOND_SEQ_2_2_1        (10'b0100111100          ), //K28.1 (FTS)
                  .CHAN_BOND_SEQ_2_3_0        (10'b0110111100          ), //K28.5 (COM)
                  .CHAN_BOND_SEQ_2_3_1        (10'b0110111100          ), //K28.5 (COM)
                  .CHAN_BOND_SEQ_2_4_0        (10'b0100011100          ), //K28.0 (SKP)
                  .CHAN_BOND_SEQ_2_4_1        (10'b0100011100          ), //K28.0 (SKP)
                  .CHAN_BOND_SEQ_2_ENABLE_0   (4'b1111                 ), //Look for 4 byte seq
                  .CHAN_BOND_SEQ_2_ENABLE_1   (4'b1111                 ), //Look for 4 byte seq
                  .CLK_COR_SEQ_1_1_0          (10'b0100011100          ), //K28.0 (SKP)
                  .CLK_COR_SEQ_1_1_1          (10'b0100011100          ), //K28.0 (SKP)
                  .CLK_COR_SEQ_1_2_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_1_2_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_1_3_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_1_3_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_1_4_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_1_4_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_1_ENABLE_0     (4'b1111                 ),
                  .CLK_COR_SEQ_1_ENABLE_1     (4'b1111                 ),
                  .CLK_COR_SEQ_2_1_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_1_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_2_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_2_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_3_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_3_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_4_0          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_4_1          (10'b0000000000          ),
                  .CLK_COR_SEQ_2_ENABLE_0     (4'b1111                 ),
                  .CLK_COR_SEQ_2_ENABLE_1     (4'b1111                 ),
                  .COMMA_10B_ENABLE_0         (10'b1111111111          ),
                  .COMMA_10B_ENABLE_1         (10'b1111111111          ),
                  .COM_BURST_VAL_0            (4'b1111                 ),
                  .COM_BURST_VAL_1            (4'b1111                 ),
                  .MCOMMA_10B_VALUE_0         (10'b1010000011          ),
                  .MCOMMA_10B_VALUE_1         (10'b1010000011          ),
                  .OOBDETECT_THRESHOLD_0      (3'b010                  ),
                  .OOBDETECT_THRESHOLD_1      (3'b010                  ),
                  .PCOMMA_10B_VALUE_0         (10'b0101111100          ),
                  .PCOMMA_10B_VALUE_1         (10'b0101111100          ),
                  .PMA_CDR_SCAN_0             (27'h6C08040             ),
                  .PMA_CDR_SCAN_1             (27'h6C08040             ),
                  .PMA_RX_CFG_0               (25'h0DCE089             ),
                  .PMA_RX_CFG_1               (25'h0DCE089             ),
                  .PRBS_ERR_THRESHOLD_0       (32'h00000001            ),
                  .PRBS_ERR_THRESHOLD_1       (32'h00000001            ),
                  .SATA_BURST_VAL_0           (3'b100                  ),
                  .SATA_BURST_VAL_1           (3'b100                  ),
                  .SATA_IDLE_VAL_0            (3'b011                  ),
                  .SATA_IDLE_VAL_1            (3'b011                  ),
                  .TERMINATION_CTRL           (5'b10100                ),
                  .TRANS_TIME_FROM_P2_0       (16'h003C                ),
                  .TRANS_TIME_FROM_P2_1       (16'h003C                ),
                  .TRANS_TIME_NON_P2_0        (16'h0019                ),
                  .TRANS_TIME_NON_P2_1        (16'h0019                ),
                  .TRANS_TIME_TO_P2_0         (16'h0064                ),
                  .TRANS_TIME_TO_P2_1         (16'h0064                ),
                  .TXRX_INVERT_0              (5'b00000                ),
                  .TXRX_INVERT_1              (5'b00000                )
                  
                  
              )   
              
              GTP_i(
              // GTP_DUAL outputs
              .DO(gt_do[16*i+15:16*i]),
              .DRDY(gt_drdy[i]),
              .PHYSTATUS0(gt_rx_phy_status_reg[i+0]),
              .PHYSTATUS1(gt_rx_phy_status_reg[i+1]),
              .PLLLKDET(plllkdet_out[i/2]),
              .REFCLKOUT(gt_refclk_out[i]), 
              .RESETDONE0(resetdone[i]),
              .RESETDONE1(resetdone[i+1]),
              .RXBUFSTATUS0(),
              .RXBUFSTATUS1(),
              .RXBYTEISALIGNED0(rxbyteisaligned[i]),
              .RXBYTEISALIGNED1(rxbyteisaligned[i+1]),
              .RXBYTEREALIGN0(),
              .RXBYTEREALIGN1(),
              .RXCHANBONDSEQ0(rxchanbondseq[i]),
              .RXCHANBONDSEQ1(rxchanbondseq[i+1]),
              .RXCHANISALIGNED0(gt_rxchanisaligned_reg[i+0]),
              .RXCHANISALIGNED1(gt_rxchanisaligned_reg[i+1]),
              .RXCHANREALIGN0(),
              .RXCHANREALIGN1(),
              .RXCHARISCOMMA0(),
              .RXCHARISCOMMA1(),
              .RXCHARISK0({float_rx_data_k[i+0],gt_rx_data_k_reg[i+0]}),
              .RXCHARISK1({float_rx_data_k[i+1],gt_rx_data_k_reg[i+1]}),
              .RXCHBONDO0(gt_rx_chbond_o[i]),   
              .RXCHBONDO1(gt_rx_chbond_o[i+1]),
              .RXCLKCORCNT0(),
              .RXCLKCORCNT1(),
              .RXCOMMADET0(),
              .RXCOMMADET1(),
              .RXDATA0({float_rx_data[8*i+7:8*i],gt_rx_data_reg[8*i+7:8*i]}),
              .RXDATA1({float_rx_data[8*i+15:8*i+8],gt_rx_data_reg[8*i+15:8*i+8]}),
              .RXDISPERR0(),
              .RXDISPERR1(),
              .RXELECIDLE0(gt_rx_elec_idle_reg[i+0]),
              .RXELECIDLE1(gt_rx_elec_idle_reg[i+1]),
              .RXLOSSOFSYNC0(),
              .RXLOSSOFSYNC1(),
              .RXNOTINTABLE0(),
              .RXNOTINTABLE1(),
              .RXOVERSAMPLEERR0(),
              .RXOVERSAMPLEERR1(),
              .RXPRBSERR0(),
              .RXPRBSERR1(),
              .RXRECCLK0(),
              .RXRECCLK1(),
              .RXRUNDISP0(),
              .RXRUNDISP1(),
              .RXSTATUS0(gt_rx_status_reg[3*i+2:3*i]),
              .RXSTATUS1(gt_rx_status_reg[3*i+5:3*i+3]),
              .RXVALID0(gt_rx_valid_reg[i+0]),
              .RXVALID1(gt_rx_valid_reg[i+1]),
              .TXBUFSTATUS0(),
              .TXBUFSTATUS1(),
              .TXKERR0(),
              .TXKERR1(),
              .TXN0(GTP_TXN[i+0]),
              .TXN1(GTP_TXN[i+1]),
              .TXOUTCLK0(gt_clk[i]),
              .TXOUTCLK1(),
              .TXP0(GTP_TXP[i+0]),
              .TXP1(GTP_TXP[i+1]),
              .TXRUNDISP0(),
              .TXRUNDISP1(),
              // GTP_DUAL inputs
              .CLKIN(refclk),
              .DADDR(gt_daddr[7*i+6:7*i]),
              .DCLK(gt_dclk),
              .DEN(gt_den[i]),
              .DI(gt_di[16*i+15:16*i]),
              .DWE(gt_dwen[i]),
              .GTPRESET(gtpreset),
              .INTDATAWIDTH(1'b1),
              .LOOPBACK0(3'b000),
              .LOOPBACK1(3'b000),
              .PLLLKDETEN(1'b1),
              .PLLPOWERDOWN(1'b0),
              .PRBSCNTRESET0(1'b0),
              .PRBSCNTRESET1(1'b0),
              .REFCLKPWRDNB(1'b1),
              .RXBUFRESET0(1'b0),
              .RXBUFRESET1(1'b0),
              .RXCDRRESET0(gt_pipe_reset_reg[i+0]),
              .RXCDRRESET1(gt_pipe_reset_reg[i+1]),
              .RXCHBONDI0(gt_rx_chbond_i[i]),
              .RXCHBONDI1(gt_rx_chbond_i[i+1]),
              .RXCOMMADETUSE0(1'b1),
              .RXCOMMADETUSE1(1'b1),
              .RXDATAWIDTH0(1'b0),
              .RXDATAWIDTH1(1'b0),
              .RXDEC8B10BUSE0(1'b1),
              .RXDEC8B10BUSE1(1'b1),
              .RXENCHANSYNC0(gt_rx_enchansync[i]),
              .RXENCHANSYNC1(gt_rx_enchansync[i+1]),
              .RXENEQB0(1'b1),
              .RXENEQB1(1'b1),
              .RXENMCOMMAALIGN0(1'b1),
              .RXENMCOMMAALIGN1(1'b1),
              .RXENPCOMMAALIGN0(1'b1),
              .RXENPCOMMAALIGN1(1'b1),
              .RXENPRBSTST0(2'b00),
              .RXENPRBSTST1(2'b00),
              .RXENSAMPLEALIGN0(1'b0),
              .RXENSAMPLEALIGN1(1'b0),
              .RXEQMIX0(2'b01),
              .RXEQMIX1(2'b01),
              .RXEQPOLE0(4'b0000),
              .RXEQPOLE1(4'b0000),
              .RXN0(GTP_RXN[i+0]),
              .RXN1(GTP_RXN[i+1]),
              .RXP0(GTP_RXP[i+0]),
              .RXP1(GTP_RXP[i+1]),
              .RXPMASETPHASE0(1'b0),
              .RXPMASETPHASE1(1'b0),
              .RXPOLARITY0(gt_rx_polarity_reg[i+0]),
              .RXPOLARITY1(gt_rx_polarity_reg[i+1]),
              .RXPOWERDOWN0(gt_rx_power_down_reg[2*i+1:2*i]),
              .RXPOWERDOWN1(gt_rx_power_down_reg[2*i+3:2*i+2]),
              .RXRESET0(rxreset),
              .RXRESET1(rxreset),
              .RXSLIDE0(1'b0),
              .RXSLIDE1(1'b0),
              .RXUSRCLK0(pclk),
              .RXUSRCLK1(pclk),
              .RXUSRCLK20(pclk),
              .RXUSRCLK21(pclk),

              .RXELECIDLERESET0(gt_rx_elec_idle_reset[i]),   //(RESETDONE[i+0] & gt_rx_elec_idle[i+0]),
              .RXELECIDLERESET1(gt_rx_elec_idle_reset[i+1]), //(RESETDONE[i+1] & gt_rx_elec_idle[i+1]),
              .RXENELECIDLERESETB(gt_rx_en_elec_idle_resetb[i/2]), //(~((RESETDONE[i+0] & gt_rx_elec_idle[i+0]) | (RESETDONE[i+1] & gt_rx_elec_idle[i+1]))),
                   
              .TXBUFDIFFCTRL0(3'b000),
              .TXBUFDIFFCTRL1(3'b000),
              .TXBYPASS8B10B0(2'b00),
              .TXBYPASS8B10B1(2'b00),
              .TXCHARDISPMODE0({1'b0,gt_tx_compliance_reg[i+0]}),
              .TXCHARDISPMODE1({1'b0,gt_tx_compliance_reg[i+1]}),
              .TXCHARDISPVAL0(2'b00),
              .TXCHARDISPVAL1(2'b00),
              .TXCHARISK0({1'b0,gt_tx_data_k_reg[i+0]}),
              .TXCHARISK1({1'b0,gt_tx_data_k_reg[i+1]}),
              .TXCOMSTART0(1'b0),
              .TXCOMSTART1(1'b0),
              .TXCOMTYPE0(1'b0),
              .TXCOMTYPE1(1'b0),
              .TXDATA0({8'b0,gt_tx_data_reg[8*i+7:8*i]}),
              .TXDATA1({8'b0,gt_tx_data_reg[8*i+15:8*i+8]}),
              .TXDATAWIDTH0(1'b0),
              .TXDATAWIDTH1(1'b0),
              .TXDETECTRX0(gt_tx_detect_rx_loopback_reg[i+0]),
              .TXDETECTRX1(gt_tx_detect_rx_loopback_reg[i+1]),
              .TXDIFFCTRL0(3'b000),
              .TXDIFFCTRL1(3'b000),
              .TXELECIDLE0(gt_tx_elec_idle_reg[i+0]),
              .TXELECIDLE1(gt_tx_elec_idle_reg[i+1]),
              .TXENC8B10BUSE0(1'b1),
              .TXENC8B10BUSE1(1'b1),
              .TXENPMAPHASEALIGN(1'b0),
              .TXENPRBSTST0(2'b00),
              .TXENPRBSTST1(2'b00),
              .TXINHIBIT0(1'b0),
              .TXINHIBIT1(1'b0),
              .TXPMASETPHASE(1'b0),
              .TXPOLARITY0(1'b0),
              .TXPOLARITY1(1'b0),
              .TXPOWERDOWN0(gt_tx_power_down_reg[2*i+1:2*i]),
              .TXPOWERDOWN1(gt_tx_power_down_reg[2*i+3:2*i+2]),
              .TXPREEMPHASIS0(3'b111),
              .TXPREEMPHASIS1(3'b111),
              .TXRESET0(1'b0),
              .TXRESET1(1'b0),
              .TXUSRCLK0(~pclk),
              .TXUSRCLK1(~pclk),
              .TXUSRCLK20(~pclk),
              .TXUSRCLK21(~pclk),
              .GTPTEST(4'b0)
              );             

           end
     endgenerate
   

///////////////////////////////////////////////////////////////////////////////////////////
// Logic for enabling L0s state
///////////////////////////////////////////////////////////////////////////////////////////

    wire rst_init = gt_pipe_reset_reg[0];
    reg  rxreset; // connect to RXRESET of the GTP inputs 
    reg  m1_delayed_elec_idle_reset;
    reg  m2_delayed_elec_idle_reset;
    reg  delayed_elec_idle_reset;

      
    always @(posedge pclk or posedge rst_init) begin
        if (rst_init) begin
          m1_delayed_elec_idle_reset <= 1'b0;
          m2_delayed_elec_idle_reset <= 1'b0;
          delayed_elec_idle_reset    <= 1'b0;
          rxreset <= 1'b0;
        end else begin
          // synchronize elec_idle_reset
          m1_delayed_elec_idle_reset <= gt_rx_elec_idle_reset[0];
          m2_delayed_elec_idle_reset <= m1_delayed_elec_idle_reset;
          delayed_elec_idle_reset    <= m2_delayed_elec_idle_reset;
          // create a one-cycle pulse on rxreset
          rxreset <= ~m2_delayed_elec_idle_reset & delayed_elec_idle_reset;
        end
    end

// Latch for CDRRESET for L0s 
     wire [7:0]        icdrreset;
     reg  [7:0]        cdrreset = 0;
     
     generate 
        genvar j;
          for (j=0; j < 8; j= j+1)
             begin: gen_cdrreset
             
                if (j < NO_OF_LANES) begin: for_GTP
                   assign icdrreset[j] = resetdone[j] & gt_rx_elec_idle_reg[j];
                   
                   always @( icdrreset or gt_rx_valid_reg) begin : yes_latch
                       if ( icdrreset[j] & ~ gt_rx_valid_reg[j] ) begin
                           cdrreset[j] <= #50 1'b1;
                       end else if ( ~ icdrreset[j] ) begin
                           cdrreset[j] <= #50 1'b0;
                       end
                   end
                   
                   assign gt_rx_elec_idle_reset[j] = cdrreset[j];
                
                end else begin : for_tieoff
                   assign icdrreset[j] = 1'b0;
                   
                   //synthesis translate_off
                   initial cdrreset[j] <= 1'b0;
                   //synthesis translate_on
                   
                   assign gt_rx_elec_idle_reset[j] = 1'b0;
                end
             end
     endgenerate
     
     generate 
        genvar k;
          for (k=0; k < 8; k= k+2)
             begin: gen_resetb
                assign gt_rx_en_elec_idle_resetb[k/2] = ~ ( cdrreset[k] | cdrreset[k+1]);
             end
     endgenerate
   
///////////////////////////////////////////////////////////////////////////////////////////  
  
  
     generate
         if (NO_OF_LANES == 1 || NO_OF_LANES == 2) begin : laneslt4
           assign plllkdet_out[3:1] = 3'b0;
         end else if (NO_OF_LANES == 4) begin : laneseq4
           assign plllkdet_out[3:2] = 2'b0;
         end
      endgenerate


     generate
        for (i=NO_OF_LANES; i < 8; i=i+1) 
        begin: tx_tied_off   
            assign gt_tx_data_reg[8*i+7:8*i+0]          = 8'b0;
            assign gt_tx_data_k_reg[i]                  = 1'b0;
            assign gt_tx_elec_idle_reg[i]               = 1'b1;
            assign gt_tx_detect_rx_loopback_reg[i]      = 1'b0;
            assign gt_tx_compliance_reg[i]              = 1'b0;
            assign gt_tx_power_down_reg[2*i+1:2*i+0]    = 2'b0;
        end
     endgenerate    

endmodule
