//------------------------------------------------------------------------------
//
// Copyright (C) 2005, Xilinx, Inc. All Rights Reserved.
//
// This file is owned and controlled by Xilinx and must be used solely
// for design, simulation, implementation and creation of design files
// limited to Xilinx devices or technologies. Use with non-Xilinx
// devices or technologies is expressly prohibited and immediately
// terminates your license.
//
// Xilinx products are not intended for use in life support
// appliances, devices, or systems. Use in such applications is
// expressly prohibited.
//
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 1.3
//  \   \         Application : Generated by Xilinx PCI Express Wizard
//  /   /         Filename    : pci_express_wrapper.v
// /___/   /\     Module      : pci_express_wrapper
// \   \  /  \
//  \___\/\___\
//
//------------------------------------------------------------------------------

module pci_express_wrapper #
   (

     parameter   G_SIM = 1,
     parameter   G_USER_RESETS = 0,
     parameter   G_USE_DCM = 0,

     // integer: 0 for no BAR logic , 1 for BAR decoding logic to be included
     //-------------------------------------------------------
     parameter  BARMONITORENABLE  = 0,

     // integer: 100 for 100MHz Refclk, 125 for 125MHz Refclk,250 for 250MHz Refclk,
     // ------------------------------------------------------
     parameter  REFCLKFREQ = 100,

     // integer: 1 for x1 lane, 2 for x2 lanes, 4 for x4 lanes, 8 for x8 lanes
     // ------------------------------------------------------
     parameter  NO_OF_LANES = 4,

     // integer: 1 for 1/1 ratio (USERCLK = 250 MHz),
     //          2 for 1/2 ratio (USERCLK = 125 MHz),
     //          4 for 1/4 ratio (USERCLK = 62.5 MHz)
     // ------------------------------------------------------
     parameter  CLKRATIO = 2,

     // string:  "TRUE" or "FALSE"
     // note:    set to "TRUE" if CLKRATIO > 1, otherwise set to "FALSE"
     // ------------------------------------------------------
     parameter  CLKDIVIDED = "TRUE",

     // integer: 0 for 128 bytes, 1 for 256 bytes, 2 for 512 bytes,
     //          3 for 1024 bytes, 4 for 2048 bytes, 5 for 4096 bytes
     // ------------------------------------------------------
     parameter  MAXPAYLOADSIZE = 0

   )
   (
     // ------------------------------------------------------
     // Clock Management and Reset Interface ports
     // ------------------------------------------------------

     input   wire                user_reset_n,

     output  wire                core_clk,                  
     output  wire                user_clk,                  
     output  wire                clock_lock,

     input   wire                gsr,                             

     input   wire                crm_urst_n,                      
     input   wire                crm_nvrst_n,                     
     input   wire                crm_mgmt_rst_n,                  
     input   wire                crm_user_cfg_rst_n,              
     input   wire                crm_mac_rst_n,
     input   wire                crm_link_rst_n,

     input   wire                compliance_avoid,
     input   wire                l0_cfg_loopback_master,
     input   wire                l0_transactions_pending,

     input   wire                l0_set_completer_abort_error,
     input   wire                l0_set_detected_corr_error,
     input   wire                l0_set_detected_fatal_error,
     input   wire                l0_set_detected_nonfatal_error,
     input   wire                l0_set_user_detected_parity_error,
     input   wire                l0_set_user_master_data_parity,
     input   wire                l0_set_user_received_master_abort,
     input   wire                l0_set_user_received_target_abort,
     input   wire                l0_set_user_system_error,
     input   wire                l0_set_user_signalled_target_abort,
     input   wire                l0_set_completion_timeout_uncorr_error,
     input   wire                l0_set_completion_timeout_corr_error,
     input   wire                l0_set_unexpected_completion_uncorr_error,
     input   wire                l0_set_unexpected_completion_corr_error,
     input   wire                l0_set_unsupported_request_nonposted_error,
     input   wire                l0_set_unsupported_request_other_error,
     input   wire                l0_legacy_int_funct0,

     input   wire   [31:0]       mgmt_wdata,
     input   wire   [3:0]        mgmt_bwren,
     input   wire                mgmt_wren,
     input   wire   [10:0]       mgmt_addr,
     input   wire                mgmt_rden,

     input   wire   [6:0]        mgmt_stats_credit_sel,

     output                      crm_do_hot_reset_n,
     output                      crm_pwr_soft_reset_n,

     output         [31:0]       mgmt_rdata,
     output                      mgmt_rddone,
     output                      mgmt_wrdone,
     output         [16:0]       mgmt_pso,
     output         [11:0]       mgmt_stats_credit,
     output                      l0_first_cfg_write_occurred,
     output                      l0_cfg_loopback_ack,
     output         [1:0]        l0_rx_mac_link_error,
     output                      l0_mac_link_up,
     output         [3:0]        l0_mac_negotiated_link_width,
     output                      l0_mac_link_training,
     output         [3:0]        l0_ltssm_state,

     output                      l0_mac_new_state_ack,
     output                      l0_mac_rx_l0s_state,
     output                      l0_mac_entered_l0,

     output         [7:0]        l0_dl_up_down,
     output         [6:0]        l0_dll_error_vector,

     output         [12:0]       l0_completer_id,

     output                      l0_msi_enable0,
     output         [2:0]        l0_multi_msg_en0,
     output                      l0_stats_dllp_received,
     output                      l0_stats_dllp_transmitted,
     output                      l0_stats_os_received,
     output                      l0_stats_os_transmitted,
     output                      l0_stats_tlp_received,
     output                      l0_stats_tlp_transmitted,
     output                      l0_stats_cfg_received,
     output                      l0_stats_cfg_transmitted,
     output                      l0_stats_cfg_other_received,
     output                      l0_stats_cfg_other_transmitted,

     output         [1:0]        l0_pwr_state0,
     output                      l0_pwr_l23_ready_state,
     output                      l0_pwr_tx_l0s_state,
     output                      l0_pwr_turn_off_req,

     output                      io_space_enable,
     output                      mem_space_enable,
     output                      bus_master_enable,
     output                      parity_error_response,
     output                      serr_enable,
     output                      interrupt_disable,
     output                      ur_reporting_enable,

     // ------------------------------------------------------
     // Local Link Interface ports 
     // ------------------------------------------------------

     // TX ports
     input   wire   [63:0]       llk_tx_data,
     input   wire                llk_tx_src_rdy_n,
     input   wire                llk_tx_sof_n,
     input   wire                llk_tx_eof_n,
     input   wire                llk_tx_sop_n,
     input   wire                llk_tx_eop_n,
     input   wire   [1:0]        llk_tx_enable_n,
     input   wire   [2:0]        llk_tx_ch_tc,
     input   wire   [1:0]        llk_tx_ch_fifo,
     output                      llk_tx_dst_rdy_n,
     output         [9:0]        llk_tx_chan_space,
     output         [7:0]        llk_tx_ch_posted_ready_n,
     output         [7:0]        llk_tx_ch_non_posted_ready_n,
     output         [7:0]        llk_tx_ch_completion_ready_n,

     // RX ports
     input   wire                llk_rx_dst_req_n,
     input   wire                llk_rx_dst_cont_req_n,
     input   wire   [2:0]        llk_rx_ch_tc,
     input   wire   [1:0]        llk_rx_ch_fifo,
     output         [7:0]        llk_tc_status,
     output         [63:0]       llk_rx_data,
     output                      llk_rx_src_rdy_n,
     output                      llk_rx_src_last_req_n,
     output                      llk_rx_sof_n,
     output                      llk_rx_eof_n,
     output                      llk_rx_sop_n,
     output                      llk_rx_eop_n,
     output         [1:0]        llk_rx_valid_n,
     output         [15:0]       llk_rx_preferred_type,
     output         [7:0]        llk_rx_ch_posted_available_n,
     output         [7:0]        llk_rx_ch_non_posted_available_n,
     output         [7:0]        llk_rx_ch_completion_available_n,

     // ------------------------------------------------------
     // Transceiver Interface ports 
     // ------------------------------------------------------

     input   wire   [NO_OF_LANES-1:0] RXN,
     input   wire   [NO_OF_LANES-1:0] RXP,
     output         [NO_OF_LANES-1:0] TXN,
     output         [NO_OF_LANES-1:0] TXP,
     output  wire                gtpclk_bufg,
     output  wire                refclkout_bufg,
     output  wire   [3:0]        plllkdet_out,
     output  wire   [7:0]        resetdone,
     output  wire   [106:0]      debug,
     input   wire                gtpreset,
     input   wire                refclk,

     input   wire   [7:0]        gt_rx_present,

     output  wire   [6:0]        bar_hit,

     output         [2:0]        max_payload_size,
     output         [2:0]        max_read_request_size

   );

   pcie_top_wrapper
   #(
   
      .G_SIM(G_SIM),
      .G_USER_RESETS(G_USER_RESETS),
      .G_USE_DCM(G_USE_DCM),
   
      // integer: 0 for no BAR logic , 1 for BAR decoding logic to be included
      //-------------------------------------------------------
      .BARMONITORENABLE(BARMONITORENABLE),
   
      // integer: 100 for 100MHz Refclk, 125 for 125MHz Refclk,250 for 250MHz Refclk,
      // ------------------------------------------------------
      .REFCLKFREQ(REFCLKFREQ),
   
      // integer: 0 for PCI Express Endpoint, 1 for Legacy PCI Express Endpoint
      // ------------------------------------------------------
      .COMPONENTTYPE(0),
   
      // integer: 1 for x1 lane, 2 for x2 lanes, 4 for x4 lanes, 8 for x8 lanes
      // ------------------------------------------------------
      .NO_OF_LANES(NO_OF_LANES),
   
      // integer: 1 for 1/1 ratio, 2 for 1/2 ratio, 4 for 1/4 ratio
      // ------------------------------------------------------
      .CLKRATIO(CLKRATIO),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .CLKDIVIDED(CLKDIVIDED),
   
      // 16 bit hex: 10EE for xilinx
      // ------------------------------------------------------
      .VENDORID(16'h10EE),
   
      // 16 bit hex:
      // ------------------------------------------------------
      .DEVICEID(16'h5050),
   
      // 8 bit hex:
      // ------------------------------------------------------
      .REVISIONID(8'h00),
   
      // 16 bit hex:
      // ------------------------------------------------------
      .SUBSYSTEMVENDORID(16'h10EE),
   
      // 16 bit hex:
      // ------------------------------------------------------
      .SUBSYSTEMID(16'h5050),
   
      // 24 bit hex:
      // ------------------------------------------------------
      .CLASSCODE(24'h050000),
   
      // 32 bit hex:
      // ------------------------------------------------------
      .CARDBUSCISPOINTER(32'h00000000),
   
      // integer: 0 for NONE, 1 for INTA, 2 for INTB, 3 for INTC, 4 for INTD
      // ------------------------------------------------------
      .INTERRUPTPIN(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR0EXIST("TRUE"),
   
      // integer: 0 for MEMORY, 1 for I/O
      // ------------------------------------------------------
      .BAR0IOMEMN(0),
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .BAR064(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR0PREFETCHABLE("FALSE"),
   
      // integer:
      // ------------------------------------------------------
      .BAR0MASKWIDTH(20),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR1EXIST("FALSE"),
   
      // integer: 0 for MEMORY, 1 for I/O
      // ------------------------------------------------------
      .BAR1IOMEMN(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR1PREFETCHABLE("FALSE"),
   
      // integer:
      // ------------------------------------------------------
      .BAR1MASKWIDTH(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR2EXIST("FALSE"),
   
      // integer: 0 for MEMORY, 1 for I/O
      // ------------------------------------------------------
      .BAR2IOMEMN(0),
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .BAR264(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR2PREFETCHABLE("FALSE"),
   
      // integer:
      // ------------------------------------------------------
      .BAR2MASKWIDTH(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR3EXIST("FALSE"),
   
      // integer: 0 for MEMORY, 1 for I/O
      // ------------------------------------------------------
      .BAR3IOMEMN(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR3PREFETCHABLE("FALSE"),
   
      // integer:
      // ------------------------------------------------------
      .BAR3MASKWIDTH(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR4EXIST("FALSE"),
   
      // integer: 0 for MEMORY, 1 for I/O
      // ------------------------------------------------------
      .BAR4IOMEMN(0),
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .BAR464(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR4PREFETCHABLE("FALSE"),
   
      // integer:
      // ------------------------------------------------------
      .BAR4MASKWIDTH(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR5EXIST("FALSE"),
   
      // integer: 0 for MEMORY, 1 for I/O
      // ------------------------------------------------------
      .BAR5IOMEMN(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .BAR5PREFETCHABLE("FALSE"),
   
      // integer:
      // ------------------------------------------------------
      .BAR5MASKWIDTH(0),
   
      // integer: 0 for 128 bytes, 1 for 256 bytes, 2 for 512 bytes,
      //          3 for 1024 bytes, 4 for 2048 bytes, 5 for 4096 bytes
      // ------------------------------------------------------
      .MAXPAYLOADSIZE(MAXPAYLOADSIZE),
   
      // integer: 0 for max of 64ns, 1 for max of 128ns, 2 for max of 256ns, 3 for max of 512ns,
      //          4 for max of 1us, 5 for max of 2us, 6 for max of 4us, 7 for no limit
      // ------------------------------------------------------
      .DEVICECAPABILITYENDPOINTL0SLATENCY(0),
   
      // integer: 0 for max of 1us, 1 for max of 2us, 2 for max of 4us, 3 for max of 8us,
      //          4 for max of 16us, 5 for max of 32us, 6 for max of 64us, 7 for no limit
      // ------------------------------------------------------
      .DEVICECAPABILITYENDPOINTL1LATENCY(0),
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .LINKCAPABILITYASPMSUPPORTEN(1),
   
      // integer: 0 for less than 64ns, 1 for 64ns to 128ns, 2 for 128ns to 256ns, 3 for 256ns to 512ns,
      //          4 for 512ns to 1us, 5 for 1us to 2us, 6 for 2us to 4us, 7 for more than 4us
      // ------------------------------------------------------
      .L0SEXITLATENCY(7),
   
      // integer: 0 for less than 64ns, 1 for 64ns to 128ns, 2 for 128ns to 256ns, 3 for 256ns to 512ns,
      //          4 for 512ns to 1us, 5 for 1us to 2us, 6 for 2us to 4us, 7 for more than 4us
      // ------------------------------------------------------
      .L0SEXITLATENCYCOMCLK(7),
   
      // integer: 0 for less than 1us, 1 for 1us to 2us, 2 for 2us to 4us, 3 for 4us to 8us,
      //          4 for 8us to 16us, 5 for 16us to 32us, 6 for 32us to 64us, 7 for more than 64us
      // ------------------------------------------------------
      .L1EXITLATENCY(7),
   
      // integer: 0 for less than 1us, 1 for 1us to 2us, 2 for 2us to 4us, 3 for 4us to 8us,
      //          4 for 8us to 16us, 5 for 16us to 32us, 6 for 32us to 64us, 7 for more than 64us
      // ------------------------------------------------------
      .L1EXITLATENCYCOMCLK(7),
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .MSIENABLE(0), 
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .DSNENABLE(0), 
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .VCENABLE(0),
   
      // integer: 0 for 1 message, 1 for 2 messages, 2 for 4 messages
      // ------------------------------------------------------
      .MSICAPABILITYMULTIMSGCAP(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .PMCAPABILITYDSI("TRUE"),
   
      // integer: 0, 1
      // ------------------------------------------------------
      .PORTVCCAPABILITYEXTENDEDVCCOUNT(0),
   
      // integer: 0 for none, 1 for round robin, 2 for weighted round robin
      // ------------------------------------------------------
   	.PORTVCCAPABILITYVCARBCAP(0),
   
      // integer: 0, 1
      // ------------------------------------------------------
      .LOWPRIORITYVCCOUNT(0),
   
      // 64 bit hex:
      // ------------------------------------------------------
      .DEVICESERIALNUMBER(64'hE000000001000A35),
   
      // integer: 0 for false, 1 for true
      // ------------------------------------------------------
      .FORCENOSCRAMBLING(0),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .LINKSTATUSSLOTCLOCKCONFIG("TRUE"),
   
      // integer: 0..255
      // ------------------------------------------------------
      .TXTSNFTS(255),
   
      // integer: 0..255
      // ------------------------------------------------------
      .TXTSNFTSCOMCLK(255),
   
      // string: "TRUE" or "FALSE"
      // ------------------------------------------------------
      .RESETMODE("FALSE"),
   
      // integer: 9 for 4096 bytes, 10 for 8192 bytes, 11 for 16384 bytes,
      //          12 for 32768 bytes
      // ------------------------------------------------------
      .RETRYRAMSIZE(9),
   
      // integer:
      // ------------------------------------------------------
      .VC0RXFIFOSIZEP(1024),
   
      // integer:
      // ------------------------------------------------------
      .VC0RXFIFOSIZENP(192),
   
      // integer:
      // ------------------------------------------------------
      .VC0RXFIFOSIZEC(1368),
   
      // integer:
      // ------------------------------------------------------
      .VC1RXFIFOSIZEP(0),
   
      // integer:
      // ------------------------------------------------------
      .VC1RXFIFOSIZENP(0),
   
      // integer:
      // ------------------------------------------------------
      .VC1RXFIFOSIZEC(0),
   
      // integer:
      // ------------------------------------------------------
      .VC0TXFIFOSIZEP(1024),
   
      // integer:
      // ------------------------------------------------------
      .VC0TXFIFOSIZENP(192),
   
      // integer:
      // ------------------------------------------------------
      .VC0TXFIFOSIZEC(1024),
   
      // integer:
      // ------------------------------------------------------
      .VC1TXFIFOSIZEP(0),
   
      // integer:
      // ------------------------------------------------------
      .VC1TXFIFOSIZENP(0),
   
      // integer:
      // ------------------------------------------------------
      .VC1TXFIFOSIZEC(0)
   
   )
   pcie_top_inst
   (
   
      // ------------------------------------------------------
      // Clock Management and Reset Interface
      // ------------------------------------------------------
   
      .user_reset_n           (user_reset_n),                                 // I
      .core_clk               (core_clk    ),                                 // O
      .user_clk               (user_clk    ),                                 // O
      .clock_lock             (clock_lock  ),                                 // O
   
      .gsr                    (gsr         ),                                 // I
   
      .crm_urst_n             (crm_urst_n),                                   // I
      .crm_nvrst_n            (crm_nvrst_n),                                  // I
      .crm_mgmt_rst_n         (crm_mgmt_rst_n),                               // I
      .crm_user_cfg_rst_n     (crm_user_cfg_rst_n),                           // I
      .crm_mac_rst_n          (crm_mac_rst_n),                                // I
      .crm_link_rst_n         (crm_link_rst_n),                               // I
      
      .compliance_avoid       (compliance_avoid),                             // I
      .l0_cfg_loopback_master (l0_cfg_loopback_master),                       // I
      .l0_transactions_pending(l0_transactions_pending),                      // I
      .l0_set_completer_abort_error     (l0_set_completer_abort_error),       // I
      .l0_set_detected_corr_error       (l0_set_detected_corr_error),         // I
      .l0_set_detected_fatal_error      (l0_set_detected_fatal_error),        // I
      .l0_set_detected_nonfatal_error   (l0_set_detected_nonfatal_error),     // I
      .l0_set_user_detected_parity_error(l0_set_user_detected_parity_error),   // I
      .l0_set_user_master_data_parity   (l0_set_user_master_data_parity),      // I
      .l0_set_user_received_master_abort(l0_set_user_received_master_abort),   // I
      .l0_set_user_received_target_abort(l0_set_user_received_target_abort),   // I
      .l0_set_user_system_error         (l0_set_user_system_error),            // I
      .l0_set_user_signalled_target_abort(l0_set_user_signalled_target_abort), // I
      .l0_set_completion_timeout_uncorr_error    (l0_set_completion_timeout_uncorr_error),     // I
      .l0_set_completion_timeout_corr_error      (l0_set_completion_timeout_corr_error),       // I
      .l0_set_unexpected_completion_uncorr_error (l0_set_unexpected_completion_uncorr_error),  // I
      .l0_set_unexpected_completion_corr_error   (l0_set_unexpected_completion_corr_error),    // I
      .l0_set_unsupported_request_nonposted_error(l0_set_unsupported_request_nonposted_error), // I
      .l0_set_unsupported_request_other_error    (l0_set_unsupported_request_other_error),     // I
      .l0_legacy_int_funct0                      (l0_legacy_int_funct0),                       // I
      
      .mgmt_wdata  (mgmt_wdata),                                               // I [31:0]
      .mgmt_bwren  (mgmt_bwren),                                               // I [3:0]
      .mgmt_wren   (mgmt_wren),                                                // I
      .mgmt_addr   (mgmt_addr),                                                // I [10:0]
      .mgmt_rden   (mgmt_rden),                                                // I
      .mgmt_stats_credit_sel(mgmt_stats_credit_sel),                           // I [6:0]
      
      .crm_do_hot_reset_n   (crm_do_hot_reset_n),                              // O
      .crm_pwr_soft_reset_n (crm_pwr_soft_reset_n),                            // O
      
      .mgmt_rdata       (mgmt_rdata),                                          // O [31:0]
      .mgmt_rddone      (mgmt_rddone),                                         // O 
      .mgmt_wrdone      (mgmt_wrdone),                                         // O
      .mgmt_pso         (mgmt_pso),                                            // O [16:0]
      .mgmt_stats_credit(mgmt_stats_credit),                                   // O [11:0]
      .l0_first_cfg_write_occurred (l0_first_cfg_write_occurred),              // O
      .l0_cfg_loopback_ack         (l0_cfg_loopback_ack),                      // O
      .l0_rx_mac_link_error        (l0_rx_mac_link_error),                     // O [1:0]
      .l0_mac_link_up              (l0_mac_link_up),                           // O
      .l0_mac_negotiated_link_width(l0_mac_negotiated_link_width),             // O [3:0]
      .l0_mac_link_training        (l0_mac_link_training),                     // O
      .l0_ltssm_state              (l0_ltssm_state),                           // O [3:0]
      
      .l0_mac_new_state_ack        (l0_mac_new_state_ack),                     // O
      .l0_mac_rx_l0s_state         (l0_mac_rx_l0s_state),                      // O
      .l0_mac_entered_l0           (l0_mac_entered_l0),                        // O
      
      .l0_dl_up_down               (l0_dl_up_down),                            // O [7:0]
      .l0_dll_error_vector         (l0_dll_error_vector),                      // O [6:0]
      
      .l0_completer_id             (l0_completer_id),                          // O [12:0]
      
      .l0_msi_enable0              (l0_msi_enable0),                           // O
      .l0_multi_msg_en0            (l0_multi_msg_en0),                         // O [2:0]
      .l0_stats_dllp_received      (l0_stats_dllp_received),                   // O
      .l0_stats_dllp_transmitted   (l0_stats_dllp_transmitted),                // O
      .l0_stats_os_received        (l0_stats_os_received),                     // O
      .l0_stats_os_transmitted     (l0_stats_os_transmitted),                  // O
      .l0_stats_tlp_received       (l0_stats_tlp_received),                    // O
      .l0_stats_tlp_transmitted    (l0_stats_tlp_transmitted),                 // O
      .l0_stats_cfg_received       (l0_stats_cfg_received),                    // O
      .l0_stats_cfg_transmitted    (l0_stats_cfg_transmitted),                 // O
      .l0_stats_cfg_other_received   (l0_stats_cfg_other_received),            // O
      .l0_stats_cfg_other_transmitted(l0_stats_cfg_other_transmitted),         // O
      
      .l0_pwr_state0         (l0_pwr_state0),                                  // O [1:0]
      .l0_pwr_l23_ready_state(l0_pwr_l23_ready_state),                         // O
      .l0_pwr_tx_l0s_state   (l0_pwr_tx_l0s_state),                            // O
      .l0_pwr_turn_off_req   (l0_pwr_turn_off_req),                            // O
      
      .io_space_enable       (io_space_enable),                                // O
      .mem_space_enable      (mem_space_enable),                               // O
      .bus_master_enable     (bus_master_enable),                              // O
      .parity_error_response (parity_error_response),                          // O
      .serr_enable           (serr_enable),                                    // O
      .interrupt_disable     (interrupt_disable),                              // O
      .ur_reporting_enable   (ur_reporting_enable),                            // O
   
      // ------------------------------------------------------
      // Local Link Interface
      // ------------------------------------------------------
   
      // TX ports
      .llk_tx_data      (llk_tx_data),                                         // I [63:0]
      .llk_tx_src_rdy_n (llk_tx_src_rdy_n),                                    // I
      .llk_tx_sof_n     (llk_tx_sof_n),                                        // I
      .llk_tx_eof_n     (llk_tx_eof_n),                                        // I
      .llk_tx_sop_n     (llk_tx_sop_n),                                        // I
      .llk_tx_eop_n     (llk_tx_eop_n),                                        // I
      .llk_tx_enable_n  (llk_tx_enable_n),                                     // I [1:0]
      .llk_tx_ch_tc     (llk_tx_ch_tc),                                        // I [2:0]
      .llk_tx_ch_fifo   (llk_tx_ch_fifo),                                      // I [1:0]
      .llk_tx_dst_rdy_n (llk_tx_dst_rdy_n),                                    // O
      .llk_tx_chan_space(llk_tx_chan_space),                                   // O [9:0]
      .llk_tx_ch_posted_ready_n    (llk_tx_ch_posted_ready_n),                 // O [7:0]
      .llk_tx_ch_non_posted_ready_n(llk_tx_ch_non_posted_ready_n),             // O [7:0]
      .llk_tx_ch_completion_ready_n(llk_tx_ch_completion_ready_n),             // O [7:0]
   
      // RX ports
      .llk_rx_dst_req_n (llk_rx_dst_req_n),                                    // I
      .llk_rx_dst_cont_req_n (llk_rx_dst_cont_req_n),                          // I
      .llk_rx_ch_tc     (llk_rx_ch_tc),                                        // I [2:0]
      .llk_rx_ch_fifo   (llk_rx_ch_fifo),                                      // I [1:0]
      .llk_tc_status    (llk_tc_status),                                       // O [7:0]
      .llk_rx_data      (llk_rx_data),                                         // O [63:0]
      .llk_rx_src_rdy_n (llk_rx_src_rdy_n),                                    // O
      .llk_rx_src_last_req_n(llk_rx_src_last_req_n),                           // O
      .llk_rx_sof_n     (llk_rx_sof_n),                                        // O
      .llk_rx_eof_n     (llk_rx_eof_n),                                        // O
      .llk_rx_sop_n     (llk_rx_sop_n),                                        // O
      .llk_rx_eop_n     (llk_rx_eop_n),                                        // O
      .llk_rx_valid_n   (llk_rx_valid_n),                                      // O [1:0]
      .llk_rx_preferred_type           (llk_rx_preferred_type),                // O [15:0]
      .llk_rx_ch_posted_available_n    (llk_rx_ch_posted_available_n),         // O [7:0]
      .llk_rx_ch_non_posted_available_n(llk_rx_ch_non_posted_available_n),     // O [7:0]
      .llk_rx_ch_completion_available_n(llk_rx_ch_completion_available_n),     // O [7:0]
   
      // ------------------------------------------------------
      // Transceiver Interface
      // ------------------------------------------------------
   
      // GT ports
      .RXN             (RXN),                                                   // I [3:0]
      .RXP             (RXP),                                                   // I [3:0]
      .TXN             (TXN),                                                   // O [3:0]
      .TXP             (TXP),                                                   // O [3:0]
      .gtpclk_bufg     (gtpclk_bufg),                                           // O
      .refclkout_bufg  (refclkout_bufg),                                        // O
      .plllkdet_out    (plllkdet_out),                                          // O [3:0]
      .resetdone       (resetdone),                                             // O [7:0]
      .debug           (debug),                                                 // O [106:0]
      .gtpreset        (gtpreset),                                              // I
      .refclk          (refclk),                                                // I
      
      .gt_rx_present   (gt_rx_present),                                         // I [7:0]
      .bar_hit         (bar_hit),                                               // O [6:0]
      .max_payload_size     (max_payload_size),                                 // O [2:0]
      .max_read_request_size(max_read_request_size)                             // O [2:0]
   
   );

endmodule // pci_express_wrapper
